// <auto-generated/>
namespace MyTelegram;

public class RpcErrors
{
    /// <summary>
    /// Rpc 400 errors
    /// </summary>
    public static class RpcErrors400
    {
       public const int ErrorCode = 400;
       /// <summary>
       /// About string too long.
       /// <code>
       /// account.updateProfile
       /// </code>
       /// </summary>
       public static readonly RpcError AboutTooLong = new(ErrorCode, "ABOUT_TOO_LONG");
 
       /// <summary>
       /// Access token expired.
       /// <code>
       /// auth.importBotAuthorization
       /// </code>
       /// </summary>
       public static readonly RpcError AccessTokenExpired = new(ErrorCode, "ACCESS_TOKEN_EXPIRED");
 
       /// <summary>
       /// Access token invalid.
       /// <code>
       /// auth.importBotAuthorization
       /// </code>
       /// </summary>
       public static readonly RpcError AccessTokenInvalid = new(ErrorCode, "ACCESS_TOKEN_INVALID");
 
       /// <summary>
       /// The specified admin ID is invalid.
       /// <code>
       /// messages.deleteRevokedExportedChatInvites
       /// messages.getExportedChatInvites
       /// </code>
       /// </summary>
       public static readonly RpcError AdminIdInvalid = new(ErrorCode, "ADMIN_ID_INVALID");
 
       /// <summary>
       /// An admin rank cannot contain emojis.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError AdminRankEmojiNotAllowed = new(ErrorCode, "ADMIN_RANK_EMOJI_NOT_ALLOWED");
 
       /// <summary>
       /// The specified admin rank is invalid.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError AdminRankInvalid = new(ErrorCode, "ADMIN_RANK_INVALID");
 
       /// <summary>
       /// There are too many admins.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError AdminsTooMuch = new(ErrorCode, "ADMINS_TOO_MUCH");
 
       /// <summary>
       /// You have uploaded too many profile photos, delete some before retrying.
       /// <code>
       /// photos.updateProfilePhoto
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError AlbumPhotosTooMany = new(ErrorCode, "ALBUM_PHOTOS_TOO_MANY");
 
       /// <summary>
       /// API ID invalid.
       /// <code>
       /// auth.exportLoginToken
       /// auth.importBotAuthorization
       /// auth.importWebTokenAuthorization
       /// auth.sendCode
       /// </code>
       /// </summary>
       public static readonly RpcError ApiIdInvalid = new(ErrorCode, "API_ID_INVALID");
 
       /// <summary>
       /// This API id was published somewhere, you can't use it now.
       /// <code>
       /// auth.exportLoginToken
       /// auth.importBotAuthorization
       /// auth.sendCode
       /// </code>
       /// </summary>
       public static readonly RpcError ApiIdPublishedFlood = new(ErrorCode, "API_ID_PUBLISHED_FLOOD");
 
       /// <summary>
       /// The title of the article is empty.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ArticleTitleEmpty = new(ErrorCode, "ARTICLE_TITLE_EMPTY");
 
       /// <summary>
       /// The remote URL specified in the content field is empty.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError AudioContentUrlEmpty = new(ErrorCode, "AUDIO_CONTENT_URL_EMPTY");
 
       /// <summary>
       /// An empty audio title was provided.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError AudioTitleEmpty = new(ErrorCode, "AUDIO_TITLE_EMPTY");
 
       /// <summary>
       /// The provided authorization is invalid.
       /// <code>
       /// auth.importAuthorization
       /// invokeWithLayer
       /// </code>
       /// </summary>
       public static readonly RpcError AuthBytesInvalid = new(ErrorCode, "AUTH_BYTES_INVALID");
 
       /// <summary>
       /// The specified auth token was already accepted.
       /// <code>
       /// auth.acceptLoginToken
       /// auth.importLoginToken
       /// </code>
       /// </summary>
       public static readonly RpcError AuthTokenAlreadyAccepted = new(ErrorCode, "AUTH_TOKEN_ALREADY_ACCEPTED");
 
       /// <summary>
       /// An error occurred while importing the auth token.
       /// <code>
       /// auth.acceptLoginToken
       /// </code>
       /// </summary>
       public static readonly RpcError AuthTokenException = new(ErrorCode, "AUTH_TOKEN_EXCEPTION");
 
       /// <summary>
       /// The authorization token has expired.
       /// <code>
       /// auth.acceptLoginToken
       /// auth.importLoginToken
       /// </code>
       /// </summary>
       public static readonly RpcError AuthTokenExpired = new(ErrorCode, "AUTH_TOKEN_EXPIRED");
 
       /// <summary>
       /// The specified auth token is invalid.
       /// <code>
       /// auth.importLoginToken
       /// </code>
       /// </summary>
       public static readonly RpcError AuthTokenInvalid = new(ErrorCode, "AUTH_TOKEN_INVALID");
 
       /// <summary>
       /// The specified auth token is invalid.
       /// <code>
       /// auth.acceptLoginToken
       /// auth.importLoginToken
       /// </code>
       /// </summary>
       public static readonly RpcError AuthTokenInvalidx = new(ErrorCode, "AUTH_TOKEN_INVALIDX");
 
       /// <summary>
       /// The autoarchive setting is not available at this time: please check the value of the [autoarchive_setting_available field in client config ](https://core.telegram.org/api/config#client-configuration) before calling this method.
       /// <code>
       /// account.setGlobalPrivacySettings
       /// </code>
       /// </summary>
       public static readonly RpcError AutoarchiveNotAvailable = new(ErrorCode, "AUTOARCHIVE_NOT_AVAILABLE");
 
       /// <summary>
       /// The specified card number is invalid.
       /// <code>
       /// payments.getBankCardData
       /// </code>
       /// </summary>
       public static readonly RpcError BankCardNumberInvalid = new(ErrorCode, "BANK_CARD_NUMBER_INVALID");
 
       /// <summary>
       /// You provided some invalid flags in the banned rights.
       /// <code>
       /// messages.editChatDefaultBannedRights
       /// </code>
       /// </summary>
       public static readonly RpcError BannedRightsInvalid = new(ErrorCode, "BANNED_RIGHTS_INVALID");
 
       /// <summary>
       /// The specified bot app is invalid.
       /// <code>
       /// messages.getBotApp
       /// </code>
       /// </summary>
       public static readonly RpcError BotAppInvalid = new(ErrorCode, "BOT_APP_INVALID");
 
       /// <summary>
       /// Bots can't edit admin privileges.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError BotChannelsNa = new(ErrorCode, "BOT_CHANNELS_NA");
 
       /// <summary>
       /// The specified command description is invalid.
       /// <code>
       /// bots.setBotCommands
       /// </code>
       /// </summary>
       public static readonly RpcError BotCommandDescriptionInvalid = new(ErrorCode, "BOT_COMMAND_DESCRIPTION_INVALID");
 
       /// <summary>
       /// The specified command is invalid.
       /// <code>
       /// bots.setBotCommands
       /// </code>
       /// </summary>
       public static readonly RpcError BotCommandInvalid = new(ErrorCode, "BOT_COMMAND_INVALID");
 
       /// <summary>
       /// Bot domain invalid.
       /// <code>
       /// messages.editMessage
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError BotDomainInvalid = new(ErrorCode, "BOT_DOMAIN_INVALID");
 
       /// <summary>
       /// This bot can't be added to groups.
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// messages.addChatUser
       /// </code>
       /// </summary>
       public static readonly RpcError BotGroupsBlocked = new(ErrorCode, "BOT_GROUPS_BLOCKED");
 
       /// <summary>
       /// This bot can't be used in inline mode.
       /// <code>
       /// messages.getInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError BotInlineDisabled = new(ErrorCode, "BOT_INLINE_DISABLED");
 
       /// <summary>
       /// This is not a valid bot.
       /// <code>
       /// bots.allowSendMessage
       /// bots.canSendMessage
       /// bots.invokeWebViewCustomMethod
       /// bots.reorderUsernames
       /// bots.toggleUsername
       /// messages.editMessage
       /// messages.getAttachMenuBot
       /// messages.getInlineBotResults
       /// messages.sendMessage
       /// messages.startBot
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError BotInvalid = new(ErrorCode, "BOT_INVALID");
 
       /// <summary>
       /// Only bots can call this method, please use [@stickers](https://t.me/stickers) if you're a user.
       /// <code>
       /// stickers.addStickerToSet
       /// stickers.changeSticker
       /// stickers.deleteStickerSet
       /// stickers.removeStickerFromSet
       /// </code>
       /// </summary>
       public static readonly RpcError BotMissing = new(ErrorCode, "BOT_MISSING");
 
       /// <summary>
       /// Bots can't pin messages in PM just for themselves.
       /// <code>
       /// messages.updatePinnedMessage
       /// </code>
       /// </summary>
       public static readonly RpcError BotOnesideNotAvail = new(ErrorCode, "BOT_ONESIDE_NOT_AVAIL");
 
       /// <summary>
       /// Please enable bot payments in botfather before calling this method.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError BotPaymentsDisabled = new(ErrorCode, "BOT_PAYMENTS_DISABLED");
 
       /// <summary>
       /// A timeout occurred while fetching data from the bot.
       /// <code>
       /// messages.getBotCallbackAnswer
       /// messages.getInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError BotResponseTimeout = new(ErrorCode, "BOT_RESPONSE_TIMEOUT");
 
       /// <summary>
       /// The score wasn't modified.
       /// <code>
       /// messages.setGameScore
       /// </code>
       /// </summary>
       public static readonly RpcError BotScoreNotModified = new(ErrorCode, "BOT_SCORE_NOT_MODIFIED");
 
       /// <summary>
       /// There are too many bots in this chat/channel.
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// </code>
       /// </summary>
       public static readonly RpcError BotsTooMuch = new(ErrorCode, "BOTS_TOO_MUCH");
 
       /// <summary>
       /// Broadcast ID invalid.
       /// <code>
       /// channels.setDiscussionGroup
       /// </code>
       /// </summary>
       public static readonly RpcError BroadcastIdInvalid = new(ErrorCode, "BROADCAST_ID_INVALID");
 
       /// <summary>
       /// You can't forward polls with public voters.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError BroadcastPublicVotersForbidden = new(ErrorCode, "BROADCAST_PUBLIC_VOTERS_FORBIDDEN");
 
       /// <summary>
       /// This method can only be called on a channel, please use stats.getMegagroupStats for supergroups.
       /// <code>
       /// stats.getBroadcastStats
       /// </code>
       /// </summary>
       public static readonly RpcError BroadcastRequired = new(ErrorCode, "BROADCAST_REQUIRED");
 
       /// <summary>
       /// The data of one or more of the buttons you provided is invalid.
       /// <code>
       /// messages.editInlineBotMessage
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ButtonDataInvalid = new(ErrorCode, "BUTTON_DATA_INVALID");
 
       /// <summary>
       /// The specified button text is invalid.
       /// <code>
       /// bots.setBotMenuButton
       /// </code>
       /// </summary>
       public static readonly RpcError ButtonTextInvalid = new(ErrorCode, "BUTTON_TEXT_INVALID");
 
       /// <summary>
       /// The type of one or more of the buttons you provided is invalid.
       /// <code>
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ButtonTypeInvalid = new(ErrorCode, "BUTTON_TYPE_INVALID");
 
       /// <summary>
       /// Button URL invalid.
       /// <code>
       /// bots.setBotMenuButton
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setInlineBotResults
       /// test.test
       /// </code>
       /// </summary>
       public static readonly RpcError ButtonUrlInvalid = new(ErrorCode, "BUTTON_URL_INVALID");
 
       /// <summary>
       /// The privacy setting of the user specified in a [inputKeyboardButtonUserProfile](/constructor/inputKeyboardButtonUserProfile) button do not allow creating such a button.
       /// <code>
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ButtonUserPrivacyRestricted = new(ErrorCode, "BUTTON_USER_PRIVACY_RESTRICTED");
 
       /// <summary>
       /// The call was already accepted.
       /// <code>
       /// phone.acceptCall
       /// phone.discardCall
       /// </code>
       /// </summary>
       public static readonly RpcError CallAlreadyAccepted = new(ErrorCode, "CALL_ALREADY_ACCEPTED");
 
       /// <summary>
       /// The call was already declined.
       /// <code>
       /// phone.acceptCall
       /// phone.confirmCall
       /// phone.receivedCall
       /// </code>
       /// </summary>
       public static readonly RpcError CallAlreadyDeclined = new(ErrorCode, "CALL_ALREADY_DECLINED");
 
       /// <summary>
       /// The call failed because the user is already making another call.
       /// <code>
       /// phone.discardCall
       /// </code>
       /// </summary>
       public static readonly RpcError CallOccupyFailed = new(ErrorCode, "CALL_OCCUPY_FAILED");
 
       /// <summary>
       /// The provided call peer object is invalid.
       /// <code>
       /// phone.acceptCall
       /// phone.confirmCall
       /// phone.discardCall
       /// phone.receivedCall
       /// phone.saveCallDebug
       /// phone.setCallRating
       /// </code>
       /// </summary>
       public static readonly RpcError CallPeerInvalid = new(ErrorCode, "CALL_PEER_INVALID");
 
       /// <summary>
       /// Call protocol flags invalid.
       /// <code>
       /// phone.acceptCall
       /// phone.requestCall
       /// </code>
       /// </summary>
       public static readonly RpcError CallProtocolFlagsInvalid = new(ErrorCode, "CALL_PROTOCOL_FLAGS_INVALID");
 
       /// <summary>
       /// You can't call this method in a CDN DC.
       /// <code>
       /// invokeWithLayer
       /// updates.getDifference
       /// upload.getCdnFileHashes
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError CdnMethodInvalid = new(ErrorCode, "CDN_METHOD_INVALID");
 
       /// <summary>
       /// This supergroup is not a forum.
       /// <code>
       /// channels.createForumTopic
       /// channels.editForumTopic
       /// channels.getForumTopics
       /// channels.getForumTopicsByID
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelForumMissing = new(ErrorCode, "CHANNEL_FORUM_MISSING");
 
       /// <summary>
       /// The specified supergroup ID is invalid.
       /// <code>
       /// channels.convertToGigagroup
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelIdInvalid = new(ErrorCode, "CHANNEL_ID_INVALID");
 
       /// <summary>
       /// The provided channel is invalid.
       /// <code>
       /// account.updateNotifySettings
       /// channels.checkUsername
       /// channels.clickSponsoredMessage
       /// channels.convertToGigagroup
       /// channels.createForumTopic
       /// channels.deleteChannel
       /// channels.deleteHistory
       /// channels.deleteMessages
       /// channels.deleteParticipantHistory
       /// channels.deleteTopicHistory
       /// channels.deleteUserHistory
       /// channels.editAbout
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.editPhoto
       /// channels.editTitle
       /// channels.exportInvite
       /// channels.exportMessageLink
       /// channels.getAdminLog
       /// channels.getChannels
       /// channels.getForumTopics
       /// channels.getForumTopicsByID
       /// channels.getFullChannel
       /// channels.getMessages
       /// channels.getParticipant
       /// channels.getParticipants
       /// channels.getSponsoredMessages
       /// channels.inviteToChannel
       /// channels.joinChannel
       /// channels.leaveChannel
       /// channels.readHistory
       /// channels.readMessageContents
       /// channels.reorderUsernames
       /// channels.reportSpam
       /// channels.setDiscussionGroup
       /// channels.setStickers
       /// channels.toggleInvites
       /// channels.toggleJoinRequest
       /// channels.toggleJoinToSend
       /// channels.togglePreHistoryHidden
       /// channels.toggleSignatures
       /// channels.toggleSlowMode
       /// channels.updatePinnedMessage
       /// channels.updateUsername
       /// channels.viewSponsoredMessage
       /// messages.editChatAbout
       /// messages.editMessage
       /// messages.exportChatInvite
       /// messages.forwardMessages
       /// messages.getBotCallbackAnswer
       /// messages.getChatInviteImporters
       /// messages.getDiscussionMessage
       /// messages.getExportedChatInvites
       /// messages.getHistory
       /// messages.getInlineBotResults
       /// messages.getMessagesViews
       /// messages.getPeerDialogs
       /// messages.getPeerSettings
       /// messages.getReplies
       /// messages.getUnreadMentions
       /// messages.hideAllChatJoinRequests
       /// messages.importChatInvite
       /// messages.readMentions
       /// messages.report
       /// messages.search
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendReaction
       /// messages.sendVote
       /// messages.setTyping
       /// messages.uploadMedia
       /// msg_container
       /// msg_resend_req
       /// msgs_state_req
       /// stats.getBroadcastStats
       /// stats.getMegagroupStats
       /// stats.getMessagePublicForwards
       /// stats.getMessageStats
       /// stories.getBoostersList
       /// updates.getChannelDifference
       /// updates.getDifference
       /// upload.getFile
       /// users.getUsers
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelInvalid = new(ErrorCode, "CHANNEL_INVALID");
 
       /// <summary>
       /// The current user is not in the channel.
       /// <code>
       /// channels.deleteHistory
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelParicipantMissing = new(ErrorCode, "CHANNEL_PARICIPANT_MISSING");
 
       /// <summary>
       /// You haven't joined this channel/supergroup.
       /// <code>
       /// account.reportPeer
       /// account.updateNotifySettings
       /// channels.checkUsername
       /// channels.deleteChannel
       /// channels.deleteHistory
       /// channels.deleteMessages
       /// channels.deleteParticipantHistory
       /// channels.deleteUserHistory
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.editCreator
       /// channels.editPhoto
       /// channels.editTitle
       /// channels.exportMessageLink
       /// channels.getAdminLog
       /// channels.getChannels
       /// channels.getForumTopics
       /// channels.getFullChannel
       /// channels.getMessages
       /// channels.getParticipant
       /// channels.getParticipants
       /// channels.getSendAs
       /// channels.getSponsoredMessages
       /// channels.inviteToChannel
       /// channels.joinChannel
       /// channels.leaveChannel
       /// channels.readHistory
       /// channels.readMessageContents
       /// channels.togglePreHistoryHidden
       /// channels.toggleUsername
       /// channels.updateUsername
       /// channels.viewSponsoredMessage
       /// contacts.addContact
       /// contacts.block
       /// contacts.unblock
       /// folders.editPeerFolders
       /// messages.deleteHistory
       /// messages.editChatAbout
       /// messages.editExportedChatInvite
       /// messages.editMessage
       /// messages.exportChatInvite
       /// messages.forwardMessages
       /// messages.getBotCallbackAnswer
       /// messages.getChatInviteImporters
       /// messages.getDiscussionMessage
       /// messages.getExportedChatInvite
       /// messages.getExportedChatInvites
       /// messages.getHistory
       /// messages.getInlineBotResults
       /// messages.getMessagesReactions
       /// messages.getMessagesViews
       /// messages.getOnlines
       /// messages.getPeerDialogs
       /// messages.getPeerSettings
       /// messages.getReplies
       /// messages.getUnreadMentions
       /// messages.hideAllChatJoinRequests
       /// messages.hideChatJoinRequest
       /// messages.importChatInvite
       /// messages.readHistory
       /// messages.readMentions
       /// messages.report
       /// messages.reportSpam
       /// messages.search
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// messages.sendReaction
       /// messages.sendVote
       /// messages.setTyping
       /// messages.toggleDialogPin
       /// messages.updatePinnedMessage
       /// messages.uploadMedia
       /// phone.createGroupCall
       /// stats.getBroadcastStats
       /// updates.getChannelDifference
       /// updates.getDifference
       /// upload.getFile
       /// users.getFullUser
       /// users.getUsers
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelPrivate = new(ErrorCode, "CHANNEL_PRIVATE");
 
       /// <summary>
       /// This channel has too many participants (>1000) to be deleted.
       /// <code>
       /// channels.deleteHistory
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelTooBig = new(ErrorCode, "CHANNEL_TOO_BIG");
 
       /// <summary>
       /// Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).
       /// <code>
       /// channels.deleteChannel
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelTooLarge = new(ErrorCode, "CHANNEL_TOO_LARGE");
 
       /// <summary>
       /// The user has reached the limit of public geogroups.
       /// <code>
       /// channels.createChannel
       /// channels.getAdminedPublicChannels
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelsAdminLocatedTooMuch = new(ErrorCode, "CHANNELS_ADMIN_LOCATED_TOO_MUCH");
 
       /// <summary>
       /// You're admin of too many public channels, make some channels private to change the username of this channel.
       /// <code>
       /// channels.checkUsername
       /// channels.editCreator
       /// channels.getAdminedPublicChannels
       /// channels.updateUsername
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelsAdminPublicTooMuch = new(ErrorCode, "CHANNELS_ADMIN_PUBLIC_TOO_MUCH");
 
       /// <summary>
       /// You have joined too many channels/supergroups.
       /// <code>
       /// channels.createChannel
       /// channels.joinChannel
       /// messages.hideAllChatJoinRequests
       /// messages.hideChatJoinRequest
       /// messages.importChatInvite
       /// messages.migrateChat
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelsTooMuch = new(ErrorCode, "CHANNELS_TOO_MUCH");
 
       /// <summary>
       /// About text has not changed.
       /// <code>
       /// channels.editAbout
       /// messages.editChatAbout
       /// </code>
       /// </summary>
       public static readonly RpcError ChatAboutNotModified = new(ErrorCode, "CHAT_ABOUT_NOT_MODIFIED");
 
       /// <summary>
       /// Chat about too long.
       /// <code>
       /// channels.createChannel
       /// channels.editAbout
       /// messages.editChatAbout
       /// </code>
       /// </summary>
       public static readonly RpcError ChatAboutTooLong = new(ErrorCode, "CHAT_ABOUT_TOO_LONG");
 
       /// <summary>
       /// You must be an admin in this chat to do this.
       /// <code>
       /// channels.convertToGigagroup
       /// channels.deleteChannel
       /// channels.deleteHistory
       /// channels.deleteParticipantHistory
       /// channels.deleteUserHistory
       /// channels.editAbout
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.editCreator
       /// channels.editLocation
       /// channels.editPhoto
       /// channels.editTitle
       /// channels.exportInvite
       /// channels.getAdminLog
       /// channels.getParticipant
       /// channels.getParticipants
       /// channels.inviteToChannel
       /// channels.reportSpam
       /// channels.setDiscussionGroup
       /// channels.toggleInvites
       /// channels.toggleJoinToSend
       /// channels.togglePreHistoryHidden
       /// channels.toggleSignatures
       /// channels.toggleSlowMode
       /// channels.toggleUsername
       /// channels.updatePinnedMessage
       /// channels.updateUsername
       /// messages.addChatUser
       /// messages.checkHistoryImportPeer
       /// messages.deleteChat
       /// messages.deleteChatUser
       /// messages.deleteHistory
       /// messages.editChatAbout
       /// messages.editChatDefaultBannedRights
       /// messages.editExportedChatInvite
       /// messages.editMessage
       /// messages.exportChatInvite
       /// messages.forwardMessages
       /// messages.getAdminsWithInvites
       /// messages.getChatInviteImporters
       /// messages.getExportedChatInvite
       /// messages.getExportedChatInvites
       /// messages.getMessageEditData
       /// messages.getScheduledHistory
       /// messages.getScheduledMessages
       /// messages.hideAllChatJoinRequests
       /// messages.hideChatJoinRequest
       /// messages.migrateChat
       /// messages.search
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// messages.setChatAvailableReactions
       /// messages.setTyping
       /// messages.startBot
       /// messages.toggleNoForwards
       /// messages.unpinAllMessages
       /// messages.updatePinnedMessage
       /// messages.uploadImportedMedia
       /// messages.uploadMedia
       /// phone.createGroupCall
       /// phone.getGroupCallStreamRtmpUrl
       /// stats.getBroadcastStats
       /// stats.getMegagroupStats
       /// stats.getMessagePublicForwards
       /// stats.getMessageStats
       /// stories.getBoostersList
       /// </code>
       /// </summary>
       public static readonly RpcError ChatAdminRequired = new(ErrorCode, "CHAT_ADMIN_REQUIRED");
 
       /// <summary>
       /// You can't enable forum topics in a discussion group linked to a channel.
       /// <code>
       /// channels.toggleForum
       /// </code>
       /// </summary>
       public static readonly RpcError ChatDiscussionUnallowed = new(ErrorCode, "CHAT_DISCUSSION_UNALLOWED");
 
       /// <summary>
       /// You can't forward messages from a protected chat.
       /// <code>
       /// messages.editMessage
       /// messages.forwardMessages
       /// messages.sendMedia
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatForwardsRestricted = new(ErrorCode, "CHAT_FORWARDS_RESTRICTED");
 
       /// <summary>
       /// The provided chat ID is empty.
       /// <code>
       /// messages.discardEncryption
       /// </code>
       /// </summary>
       public static readonly RpcError ChatIdEmpty = new(ErrorCode, "CHAT_ID_EMPTY");
 
       /// <summary>
       /// The provided chat id is invalid.
       /// <code>
       /// channels.checkUsername
       /// channels.getSendAs
       /// channels.toggleJoinRequest
       /// channels.toggleJoinToSend
       /// channels.togglePreHistoryHidden
       /// channels.toggleSignatures
       /// channels.updatePinnedMessage
       /// folders.editPeerFolders
       /// messages.acceptEncryption
       /// messages.addChatUser
       /// messages.deleteChat
       /// messages.deleteChatUser
       /// messages.deleteHistory
       /// messages.editChatAbout
       /// messages.editChatAdmin
       /// messages.editChatDefaultBannedRights
       /// messages.editChatPhoto
       /// messages.editChatTitle
       /// messages.exportChatInvite
       /// messages.forwardMessage
       /// messages.forwardMessages
       /// messages.getChats
       /// messages.getFullChat
       /// messages.getHistory
       /// messages.getMessagesViews
       /// messages.getOnlines
       /// messages.migrateChat
       /// messages.readDiscussion
       /// messages.readHistory
       /// messages.reportEncryptedSpam
       /// messages.search
       /// messages.sendEncrypted
       /// messages.sendEncryptedFile
       /// messages.sendEncryptedService
       /// messages.sendMessage
       /// messages.setEncryptedTyping
       /// messages.setTyping
       /// messages.toggleChatAdmins
       /// messages.updateDialogFilter
       /// messages.uploadMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatIdInvalid = new(ErrorCode, "CHAT_ID_INVALID");
 
       /// <summary>
       /// Invalid chat.
       /// <code>
       /// channels.inviteToChannel
       /// channels.joinChannel
       /// channels.leaveChannel
       /// messages.createChat
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError ChatInvalid = new(ErrorCode, "CHAT_INVALID");
 
       /// <summary>
       /// You can't set an expiration date on permanent invite links.
       /// <code>
       /// messages.editExportedChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError ChatInvitePermanent = new(ErrorCode, "CHAT_INVITE_PERMANENT");
 
       /// <summary>
       /// The chat is public, you can't hide the history to new users.
       /// <code>
       /// channels.togglePreHistoryHidden
       /// </code>
       /// </summary>
       public static readonly RpcError ChatLinkExists = new(ErrorCode, "CHAT_LINK_EXISTS");
 
       /// <summary>
       /// No changes were made to chat information because the new information you passed is identical to the current information.
       /// <code>
       /// channels.deleteChannel
       /// channels.editCreator
       /// channels.editLocation
       /// channels.editPhoto
       /// channels.editTitle
       /// channels.getFullChannel
       /// channels.toggleAntiSpam
       /// channels.toggleForum
       /// channels.toggleInvites
       /// channels.toggleJoinRequest
       /// channels.toggleJoinToSend
       /// channels.toggleParticipantsHidden
       /// channels.togglePreHistoryHidden
       /// channels.toggleSignatures
       /// channels.toggleSlowMode
       /// channels.updatePinnedMessage
       /// channels.updateUsername
       /// messages.editChatAbout
       /// messages.editChatDefaultBannedRights
       /// messages.editChatPhoto
       /// messages.editChatTitle
       /// messages.setChatAvailableReactions
       /// messages.setHistoryTTL
       /// messages.toggleChatAdmins
       /// messages.toggleNoForwards
       /// messages.unpinAllMessages
       /// messages.updatePinnedMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ChatNotModified = new(ErrorCode, "CHAT_NOT_MODIFIED");
 
       /// <summary>
       /// You can only enable join requests in public groups.
       /// <code>
       /// channels.toggleJoinRequest
       /// </code>
       /// </summary>
       public static readonly RpcError ChatPublicRequired = new(ErrorCode, "CHAT_PUBLIC_REQUIRED");
 
       /// <summary>
       /// You can't send messages in this chat, you were restricted.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.uploadMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatRestricted = new(ErrorCode, "CHAT_RESTRICTED");
 
       /// <summary>
       /// `min_date` and `max_date` are not available for using with non-user peers.
       /// <code>
       /// messages.deleteHistory
       /// </code>
       /// </summary>
       public static readonly RpcError ChatRevokeDateUnsupported = new(ErrorCode, "CHAT_REVOKE_DATE_UNSUPPORTED");
 
       /// <summary>
       /// You can't send inline messages in this group.
       /// <code>
       /// messages.sendInlineBotResult
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendInlineForbidden = new(ErrorCode, "CHAT_SEND_INLINE_FORBIDDEN");
 
       /// <summary>
       /// No chat title provided.
       /// <code>
       /// channels.createChannel
       /// channels.editTitle
       /// messages.createChat
       /// messages.editChatTitle
       /// </code>
       /// </summary>
       public static readonly RpcError ChatTitleEmpty = new(ErrorCode, "CHAT_TITLE_EMPTY");
 
       /// <summary>
       /// This method is not available for groups with more than `chat_read_mark_size_threshold` members, [see client configuration ](https://core.telegram.org/api/config#client-configuration).
       /// <code>
       /// messages.getMessageReadParticipants
       /// messages.getMessagesReadParticipants
       /// </code>
       /// </summary>
       public static readonly RpcError ChatTooBig = new(ErrorCode, "CHAT_TOO_BIG");
 
       /// <summary>
       /// 
       /// <code>
       /// messages.updateDialogFilter
       /// </code>
       /// </summary>
       public static readonly RpcError ChatlistExcludeInvalid = new(ErrorCode, "CHATLIST_EXCLUDE_INVALID");
 
       /// <summary>
       /// The provided code is empty.
       /// <code>
       /// auth.recoverPassword
       /// </code>
       /// </summary>
       public static readonly RpcError CodeEmpty = new(ErrorCode, "CODE_EMPTY");
 
       /// <summary>
       /// Code hash invalid.
       /// <code>
       /// account.confirmPhone
       /// </code>
       /// </summary>
       public static readonly RpcError CodeHashInvalid = new(ErrorCode, "CODE_HASH_INVALID");
 
       /// <summary>
       /// Code invalid.
       /// <code>
       /// account.confirmPasswordEmail
       /// </code>
       /// </summary>
       public static readonly RpcError CodeInvalid = new(ErrorCode, "CODE_INVALID");
 
       /// <summary>
       /// The provided API id is invalid.
       /// <code>
       /// help.getConfig
       /// invokeWithLayer
       /// </code>
       /// </summary>
       public static readonly RpcError ConnectionApiIdInvalid = new(ErrorCode, "CONNECTION_API_ID_INVALID");
 
       /// <summary>
       /// App version is empty.
       /// <code>
       /// help.getConfig
       /// </code>
       /// </summary>
       public static readonly RpcError ConnectionAppVersionEmpty = new(ErrorCode, "CONNECTION_APP_VERSION_EMPTY");
 
       /// <summary>
       /// Layer invalid.
       /// <code>
       /// contacts.resolveUsername
       /// help.getConfig
       /// initConnection
       /// </code>
       /// </summary>
       public static readonly RpcError ConnectionLayerInvalid = new(ErrorCode, "CONNECTION_LAYER_INVALID");
 
       /// <summary>
       /// Contact to add is missing.
       /// <code>
       /// contacts.acceptContact
       /// </code>
       /// </summary>
       public static readonly RpcError ContactAddMissing = new(ErrorCode, "CONTACT_ADD_MISSING");
 
       /// <summary>
       /// The provided contact ID is invalid.
       /// <code>
       /// contacts.acceptContact
       /// contacts.addContact
       /// contacts.block
       /// contacts.deleteContact
       /// contacts.unblock
       /// </code>
       /// </summary>
       public static readonly RpcError ContactIdInvalid = new(ErrorCode, "CONTACT_ID_INVALID");
 
       /// <summary>
       /// Contact name empty.
       /// <code>
       /// contacts.addContact
       /// </code>
       /// </summary>
       public static readonly RpcError ContactNameEmpty = new(ErrorCode, "CONTACT_NAME_EMPTY");
 
       /// <summary>
       /// Missing contact request.
       /// <code>
       /// contacts.acceptContact
       /// </code>
       /// </summary>
       public static readonly RpcError ContactReqMissing = new(ErrorCode, "CONTACT_REQ_MISSING");
 
       /// <summary>
       /// An error occurred while creating the call.
       /// <code>
       /// phone.createGroupCall
       /// </code>
       /// </summary>
       public static readonly RpcError CreateCallFailed = new(ErrorCode, "CREATE_CALL_FAILED");
 
       /// <summary>
       /// The total amount of all prices is invalid.
       /// <code>
       /// messages.sendMedia
       /// payments.exportInvoice
       /// </code>
       /// </summary>
       public static readonly RpcError CurrencyTotalAmountInvalid = new(ErrorCode, "CURRENCY_TOTAL_AMOUNT_INVALID");
 
       /// <summary>
       /// Encrypted data invalid.
       /// <code>
       /// help.getConfig
       /// messages.getBotCallbackAnswer
       /// messages.sendEncrypted
       /// messages.sendEncryptedService
       /// </code>
       /// </summary>
       public static readonly RpcError DataInvalid = new(ErrorCode, "DATA_INVALID");
 
       /// <summary>
       /// The provided JSON data is invalid.
       /// <code>
       /// bots.answerWebhookJSONQuery
       /// bots.sendCustomRequest
       /// help.acceptTermsOfService
       /// phone.joinGroupCall
       /// phone.saveCallDebug
       /// </code>
       /// </summary>
       public static readonly RpcError DataJsonInvalid = new(ErrorCode, "DATA_JSON_INVALID");
 
       /// <summary>
       /// Data too long.
       /// <code>
       /// messages.sendEncrypted
       /// messages.sendEncryptedFile
       /// </code>
       /// </summary>
       public static readonly RpcError DataTooLong = new(ErrorCode, "DATA_TOO_LONG");
 
       /// <summary>
       /// Date empty.
       /// <code>
       /// updates.getDifference
       /// </code>
       /// </summary>
       public static readonly RpcError DateEmpty = new(ErrorCode, "DATE_EMPTY");
 
       /// <summary>
       /// The provided DC ID is invalid.
       /// <code>
       /// auth.exportAuthorization
       /// </code>
       /// </summary>
       public static readonly RpcError DcIdInvalid = new(ErrorCode, "DC_ID_INVALID");
 
       /// <summary>
       /// g_a invalid.
       /// <code>
       /// messages.requestEncryption
       /// </code>
       /// </summary>
       public static readonly RpcError DhGAInvalid = new(ErrorCode, "DH_G_A_INVALID");
 
       /// <summary>
       /// The specified document is invalid.
       /// <code>
       /// account.updateEmojiStatus
       /// channels.editForumTopic
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setInlineBotResults
       /// upload.getWebFile
       /// </code>
       /// </summary>
       public static readonly RpcError DocumentInvalid = new(ErrorCode, "DOCUMENT_INVALID");
 
       /// <summary>
       /// Email hash expired.
       /// <code>
       /// account.cancelPasswordEmail
       /// account.confirmPasswordEmail
       /// account.resendPasswordEmail
       /// </code>
       /// </summary>
       public static readonly RpcError EmailHashExpired = new(ErrorCode, "EMAIL_HASH_EXPIRED");
 
       /// <summary>
       /// The specified email is invalid.
       /// <code>
       /// account.sendVerifyEmailCode
       /// account.updatePasswordSettings
       /// account.verifyEmail
       /// </code>
       /// </summary>
       public static readonly RpcError EmailInvalid = new(ErrorCode, "EMAIL_INVALID");
 
       /// <summary>
       /// In order to change the login email with emailVerifyPurposeLoginChange, an existing login email must already be set using emailVerifyPurposeLoginSetup.
       /// <code>
       /// account.sendVerifyEmailCode
       /// </code>
       /// </summary>
       public static readonly RpcError EmailNotSetup = new(ErrorCode, "EMAIL_NOT_SETUP");
 
       /// <summary>
       /// Email unconfirmed.
       /// <code>
       /// account.updatePasswordSettings
       /// </code>
       /// </summary>
       public static readonly RpcError EmailUnconfirmed = new(ErrorCode, "EMAIL_UNCONFIRMED");
 
       /// <summary>
       /// The provided email isn't confirmed, <c>{0}</c> is the length of the verification code that was just sent to the email: use [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail) to enter the received verification code and enable the recovery email.
       /// <code>
       /// account.updatePasswordSettings
       /// </code>
       /// </summary>
       public static readonly RpcError EmailUnconfirmedX = new(ErrorCode, "EMAIL_UNCONFIRMED_{0}");
 
       /// <summary>
       /// The verification email has expired.
       /// <code>
       /// account.verifyEmail
       /// </code>
       /// </summary>
       public static readonly RpcError EmailVerifyExpired = new(ErrorCode, "EMAIL_VERIFY_EXPIRED");
 
       /// <summary>
       /// The specified theme emoji is valid.
       /// <code>
       /// messages.setChatTheme
       /// </code>
       /// </summary>
       public static readonly RpcError EmojiInvalid = new(ErrorCode, "EMOJI_INVALID");
 
       /// <summary>
       /// The specified `video_emoji_markup` was invalid.
       /// <code>
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError EmojiMarkupInvalid = new(ErrorCode, "EMOJI_MARKUP_INVALID");
 
       /// <summary>
       /// The theme wasn't changed.
       /// <code>
       /// messages.setChatTheme
       /// </code>
       /// </summary>
       public static readonly RpcError EmojiNotModified = new(ErrorCode, "EMOJI_NOT_MODIFIED");
 
       /// <summary>
       /// The emoji is empty.
       /// <code>
       /// messages.getStickers
       /// messages.searchCustomEmoji
       /// </code>
       /// </summary>
       public static readonly RpcError EmoticonEmpty = new(ErrorCode, "EMOTICON_EMPTY");
 
       /// <summary>
       /// The specified emoji is invalid.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError EmoticonInvalid = new(ErrorCode, "EMOTICON_INVALID");
 
       /// <summary>
       /// inputStickerSetDice.emoji cannot be empty.
       /// <code>
       /// messages.getStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError EmoticonStickerpackMissing = new(ErrorCode, "EMOTICON_STICKERPACK_MISSING");
 
       /// <summary>
       /// Encrypted message invalid.
       /// <code>
       /// auth.bindTempAuthKey
       /// msgs_ack
       /// </code>
       /// </summary>
       public static readonly RpcError EncryptedMessageInvalid = new(ErrorCode, "ENCRYPTED_MESSAGE_INVALID");
 
       /// <summary>
       /// Secret chat already accepted.
       /// <code>
       /// messages.acceptEncryption
       /// messages.discardEncryption
       /// </code>
       /// </summary>
       public static readonly RpcError EncryptionAlreadyAccepted = new(ErrorCode, "ENCRYPTION_ALREADY_ACCEPTED");
 
       /// <summary>
       /// The secret chat was already declined.
       /// <code>
       /// messages.acceptEncryption
       /// messages.discardEncryption
       /// </code>
       /// </summary>
       public static readonly RpcError EncryptionAlreadyDeclined = new(ErrorCode, "ENCRYPTION_ALREADY_DECLINED");
 
       /// <summary>
       /// The secret chat was declined.
       /// <code>
       /// messages.sendEncrypted
       /// messages.sendEncryptedFile
       /// messages.sendEncryptedService
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError EncryptionDeclined = new(ErrorCode, "ENCRYPTION_DECLINED");
 
       /// <summary>
       /// The provided secret chat ID is invalid.
       /// <code>
       /// messages.discardEncryption
       /// messages.sendEncryptedService
       /// </code>
       /// </summary>
       public static readonly RpcError EncryptionIdInvalid = new(ErrorCode, "ENCRYPTION_ID_INVALID");
 
       /// <summary>
       /// You provided too many styled message entities.
       /// <code>
       /// messages.editMessage
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError EntitiesTooLong = new(ErrorCode, "ENTITIES_TOO_LONG");
 
       /// <summary>
       /// A specified [entity offset or length](/api/entities#entity-length) is invalid, see [here ](/api/entities#entity-length) for info on how to properly compute the entity offset/length.
       /// <code>
       /// help.editUserInfo
       /// messages.editInlineBotMessage
       /// messages.editMessage
       /// messages.getWebPagePreview
       /// messages.saveDraft
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError EntityBoundsInvalid = new(ErrorCode, "ENTITY_BOUNDS_INVALID");
 
       /// <summary>
       /// You mentioned an invalid user.
       /// <code>
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError EntityMentionUserInvalid = new(ErrorCode, "ENTITY_MENTION_USER_INVALID");
 
       /// <summary>
       /// The provided error message is empty.
       /// <code>
       /// messages.setBotPrecheckoutResults
       /// </code>
       /// </summary>
       public static readonly RpcError ErrorTextEmpty = new(ErrorCode, "ERROR_TEXT_EMPTY");
 
       /// <summary>
       /// The specified expiration date is invalid.
       /// <code>
       /// messages.exportChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError ExpireDateInvalid = new(ErrorCode, "EXPIRE_DATE_INVALID");
 
       /// <summary>
       /// Provided card is invalid.
       /// <code>
       /// contacts.importCard
       /// </code>
       /// </summary>
       public static readonly RpcError ExportCardInvalid = new(ErrorCode, "EXPORT_CARD_INVALID");
 
       /// <summary>
       /// External URL invalid.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ExternalUrlInvalid = new(ErrorCode, "EXTERNAL_URL_INVALID");
 
       /// <summary>
       /// File content-type is invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError FileContentTypeInvalid = new(ErrorCode, "FILE_CONTENT_TYPE_INVALID");
 
       /// <summary>
       /// An empty file was provided.
       /// <code>
       /// messages.sendEncryptedFile
       /// </code>
       /// </summary>
       public static readonly RpcError FileEmtpy = new(ErrorCode, "FILE_EMTPY");
 
       /// <summary>
       /// The provided file id is invalid.
       /// <code>
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError FileIdInvalid = new(ErrorCode, "FILE_ID_INVALID");
 
       /// <summary>
       /// The provided file part is empty.
       /// <code>
       /// msgs_state_req
       /// upload.saveBigFilePart
       /// upload.saveFilePart
       /// </code>
       /// </summary>
       public static readonly RpcError FilePartEmpty = new(ErrorCode, "FILE_PART_EMPTY");
 
       /// <summary>
       /// The file part number is invalid.
       /// <code>
       /// upload.saveBigFilePart
       /// upload.saveFilePart
       /// </code>
       /// </summary>
       public static readonly RpcError FilePartInvalid = new(ErrorCode, "FILE_PART_INVALID");
 
       /// <summary>
       /// The length of a file part is invalid.
       /// <code>
       /// messages.sendMedia
       /// messages.uploadMedia
       /// </code>
       /// </summary>
       public static readonly RpcError FilePartLengthInvalid = new(ErrorCode, "FILE_PART_LENGTH_INVALID");
 
       /// <summary>
       /// Provided file part size has changed.
       /// <code>
       /// upload.saveBigFilePart
       /// </code>
       /// </summary>
       public static readonly RpcError FilePartSizeChanged = new(ErrorCode, "FILE_PART_SIZE_CHANGED");
 
       /// <summary>
       /// The provided file part size is invalid.
       /// <code>
       /// upload.saveBigFilePart
       /// </code>
       /// </summary>
       public static readonly RpcError FilePartSizeInvalid = new(ErrorCode, "FILE_PART_SIZE_INVALID");
 
       /// <summary>
       /// The uploaded file part is too big.
       /// <code>
       /// upload.saveBigFilePart
       /// </code>
       /// </summary>
       public static readonly RpcError FilePartTooBig = new(ErrorCode, "FILE_PART_TOO_BIG");
 
       /// <summary>
       /// The number of file parts is invalid.
       /// <code>
       /// channels.editPhoto
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.uploadMedia
       /// photos.updateProfilePhoto
       /// photos.uploadProfilePhoto
       /// upload.saveBigFilePart
       /// </code>
       /// </summary>
       public static readonly RpcError FilePartsInvalid = new(ErrorCode, "FILE_PARTS_INVALID");
 
       /// <summary>
       /// The file reference expired, it [must be refreshed](https://core.telegram.org/api/file_reference).
       /// <code>
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError FileReferenceX = new(ErrorCode, "FILE_REFERENCE_*");
 
       /// <summary>
       /// An empty [file reference](https://core.telegram.org/api/file_reference) was specified.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError FileReferenceEmpty = new(ErrorCode, "FILE_REFERENCE_EMPTY");
 
       /// <summary>
       /// File reference expired, it must be refetched as described in [the documentation](https://core.telegram.org/api/file_reference).
       /// <code>
       /// messages.sendMedia
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError FileReferenceExpired = new(ErrorCode, "FILE_REFERENCE_EXPIRED");
 
       /// <summary>
       /// The specified [file reference](https://core.telegram.org/api/file_reference) is invalid.
       /// <code>
       /// channels.editPhoto
       /// </code>
       /// </summary>
       public static readonly RpcError FileReferenceInvalid = new(ErrorCode, "FILE_REFERENCE_INVALID");
 
       /// <summary>
       /// An empty file title was specified.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError FileTitleEmpty = new(ErrorCode, "FILE_TITLE_EMPTY");
 
       /// <summary>
       /// The specified file token is invalid.
       /// <code>
       /// upload.reuploadCdnFile
       /// </code>
       /// </summary>
       public static readonly RpcError FileTokenInvalid = new(ErrorCode, "FILE_TOKEN_INVALID");
 
       /// <summary>
       /// The specified filter ID is invalid.
       /// <code>
       /// chatlists.deleteExportedInvite
       /// chatlists.editExportedInvite
       /// chatlists.exportChatlistInvite
       /// chatlists.getChatlistUpdates
       /// messages.updateDialogFilter
       /// </code>
       /// </summary>
       public static readonly RpcError FilterIdInvalid = new(ErrorCode, "FILTER_ID_INVALID");
 
       /// <summary>
       /// The include_peers vector of the filter is empty.
       /// <code>
       /// chatlists.joinChatlistInvite
       /// messages.updateDialogFilter
       /// </code>
       /// </summary>
       public static readonly RpcError FilterIncludeEmpty = new(ErrorCode, "FILTER_INCLUDE_EMPTY");
 
       /// <summary>
       /// The specified filter cannot be used in this context.
       /// <code>
       /// chatlists.exportChatlistInvite
       /// messages.getSearchResultsCalendar
       /// messages.searchSentMedia
       /// </code>
       /// </summary>
       public static readonly RpcError FilterNotSupported = new(ErrorCode, "FILTER_NOT_SUPPORTED");
 
       /// <summary>
       /// The title field of the filter is empty.
       /// <code>
       /// messages.updateDialogFilter
       /// </code>
       /// </summary>
       public static readonly RpcError FilterTitleEmpty = new(ErrorCode, "FILTER_TITLE_EMPTY");
 
       /// <summary>
       /// The first name is invalid.
       /// <code>
       /// account.updateProfile
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError FirstnameInvalid = new(ErrorCode, "FIRSTNAME_INVALID");
 
       /// <summary>
       /// An empty folder ID was specified.
       /// <code>
       /// folders.deleteFolder
       /// </code>
       /// </summary>
       public static readonly RpcError FolderIdEmpty = new(ErrorCode, "FOLDER_ID_EMPTY");
 
       /// <summary>
       /// Invalid folder ID.
       /// <code>
       /// folders.deleteFolder
       /// folders.editPeerFolders
       /// messages.getDialogs
       /// messages.getPinnedDialogs
       /// messages.searchGlobal
       /// </code>
       /// </summary>
       public static readonly RpcError FolderIdInvalid = new(ErrorCode, "FOLDER_ID_INVALID");
 
       /// <summary>
       /// 
       /// <code>
       /// channels.convertToGigagroup
       /// channels.togglePreHistoryHidden
       /// </code>
       /// </summary>
       public static readonly RpcError ForumEnabled = new(ErrorCode, "FORUM_ENABLED");
 
       /// <summary>
       /// You were just elected admin, you can't add or modify other admins yet.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError FreshChangeAdminsForbidden = new(ErrorCode, "FRESH_CHANGE_ADMINS_FORBIDDEN");
 
       /// <summary>
       /// Bots can't use fromMessage min constructors.
       /// <code>
       /// messages.sendMessage
       /// updates.getChannelDifference
       /// users.getUsers
       /// </code>
       /// </summary>
       public static readonly RpcError FromMessageBotDisabled = new(ErrorCode, "FROM_MESSAGE_BOT_DISABLED");
 
       /// <summary>
       /// The specified from_id is invalid.
       /// <code>
       /// messages.search
       /// </code>
       /// </summary>
       public static readonly RpcError FromPeerInvalid = new(ErrorCode, "FROM_PEER_INVALID");
 
       /// <summary>
       /// Bots can't send another bot's game.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError GameBotInvalid = new(ErrorCode, "GAME_BOT_INVALID");
 
       /// <summary>
       /// You can't modify the icon of the "General" topic.
       /// <code>
       /// channels.editForumTopic
       /// </code>
       /// </summary>
       public static readonly RpcError GeneralModifyIconForbidden = new(ErrorCode, "GENERAL_MODIFY_ICON_FORBIDDEN");
 
       /// <summary>
       /// Invalid geoposition provided.
       /// <code>
       /// contacts.getLocated
       /// </code>
       /// </summary>
       public static readonly RpcError GeoPointInvalid = new(ErrorCode, "GEO_POINT_INVALID");
 
       /// <summary>
       /// GIF content-type invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError GifContentTypeInvalid = new(ErrorCode, "GIF_CONTENT_TYPE_INVALID");
 
       /// <summary>
       /// The provided GIF ID is invalid.
       /// <code>
       /// messages.saveGif
       /// </code>
       /// </summary>
       public static readonly RpcError GifIdInvalid = new(ErrorCode, "GIF_ID_INVALID");
 
       /// <summary>
       /// This graph has expired, please obtain a new graph token.
       /// <code>
       /// stats.loadAsyncGraph
       /// </code>
       /// </summary>
       public static readonly RpcError GraphExpiredReload = new(ErrorCode, "GRAPH_EXPIRED_RELOAD");
 
       /// <summary>
       /// Invalid graph token provided, please reload the stats and provide the updated token.
       /// <code>
       /// stats.loadAsyncGraph
       /// </code>
       /// </summary>
       public static readonly RpcError GraphInvalidReload = new(ErrorCode, "GRAPH_INVALID_RELOAD");
 
       /// <summary>
       /// The graph is outdated, please get a new async token using stats.getBroadcastStats.
       /// <code>
       /// stats.loadAsyncGraph
       /// </code>
       /// </summary>
       public static readonly RpcError GraphOutdatedReload = new(ErrorCode, "GRAPH_OUTDATED_RELOAD");
 
       /// <summary>
       /// The group call was already discarded.
       /// <code>
       /// phone.discardGroupCall
       /// phone.discardGroupCallRequest
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallAlreadyDiscarded = new(ErrorCode, "GROUPCALL_ALREADY_DISCARDED");
 
       /// <summary>
       /// The group call has already ended.
       /// <code>
       /// phone.editGroupCallParticipant
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallForbidden = new(ErrorCode, "GROUPCALL_FORBIDDEN");
 
       /// <summary>
       /// The specified group call is invalid.
       /// <code>
       /// phone.discardGroupCall
       /// phone.getGroupCall
       /// phone.getGroupCallStreamChannels
       /// phone.inviteToGroupCall
       /// phone.joinGroupCall
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallInvalid = new(ErrorCode, "GROUPCALL_INVALID");
 
       /// <summary>
       /// You haven't joined this group call.
       /// <code>
       /// phone.checkGroupCall
       /// phone.getGroupCallStreamChannels
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallJoinMissing = new(ErrorCode, "GROUPCALL_JOIN_MISSING");
 
       /// <summary>
       /// Group call settings weren't modified.
       /// <code>
       /// phone.toggleGroupCallRecord
       /// phone.toggleGroupCallSettings
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallNotModified = new(ErrorCode, "GROUPCALL_NOT_MODIFIED");
 
       /// <summary>
       /// The app needs to retry joining the group call with a new SSRC value.
       /// <code>
       /// phone.joinGroupCall
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallSsrcDuplicateMuch = new(ErrorCode, "GROUPCALL_SSRC_DUPLICATE_MUCH");
 
       /// <summary>
       /// Invalid grouped media.
       /// <code>
       /// messages.forwardMessages
       /// </code>
       /// </summary>
       public static readonly RpcError GroupedMediaInvalid = new(ErrorCode, "GROUPED_MEDIA_INVALID");
 
       /// <summary>
       /// The provided hash is invalid.
       /// <code>
       /// account.changeAuthorizationSettings
       /// account.resetAuthorization
       /// account.resetWebAuthorization
       /// account.sendConfirmPhoneCode
       /// </code>
       /// </summary>
       public static readonly RpcError HashInvalid = new(ErrorCode, "HASH_INVALID");
 
       /// <summary>
       /// The join request was missing or was already handled.
       /// <code>
       /// messages.hideAllChatJoinRequests
       /// messages.hideChatJoinRequest
       /// </code>
       /// </summary>
       public static readonly RpcError HideRequesterMissing = new(ErrorCode, "HIDE_REQUESTER_MISSING");
 
       /// <summary>
       /// Failure while processing image.
       /// <code>
       /// messages.editChatPhoto
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.uploadMedia
       /// photos.updateProfilePhoto
       /// photos.uploadProfilePhoto
       /// stories.sendStory
       /// </code>
       /// </summary>
       public static readonly RpcError ImageProcessFailed = new(ErrorCode, "IMAGE_PROCESS_FAILED");
 
       /// <summary>
       /// The specified chat export file is invalid.
       /// <code>
       /// messages.initHistoryImport
       /// </code>
       /// </summary>
       public static readonly RpcError ImportFileInvalid = new(ErrorCode, "IMPORT_FILE_INVALID");
 
       /// <summary>
       /// The specified chat export file was exported from an unsupported chat app.
       /// <code>
       /// messages.checkHistoryImport
       /// messages.initHistoryImport
       /// </code>
       /// </summary>
       public static readonly RpcError ImportFormatUnrecognized = new(ErrorCode, "IMPORT_FORMAT_UNRECOGNIZED");
 
       /// <summary>
       /// The specified import ID is invalid.
       /// <code>
       /// messages.startHistoryImport
       /// </code>
       /// </summary>
       public static readonly RpcError ImportIdInvalid = new(ErrorCode, "IMPORT_ID_INVALID");
 
       /// <summary>
       /// The specified token is invalid.
       /// <code>
       /// contacts.importContactToken
       /// </code>
       /// </summary>
       public static readonly RpcError ImportTokenInvalid = new(ErrorCode, "IMPORT_TOKEN_INVALID");
 
       /// <summary>
       /// The inline query expired.
       /// <code>
       /// messages.sendInlineBotResult
       /// </code>
       /// </summary>
       public static readonly RpcError InlineResultExpired = new(ErrorCode, "INLINE_RESULT_EXPIRED");
 
       /// <summary>
       /// The specified folder is invalid.
       /// <code>
       /// chatlists.getChatlistUpdates
       /// </code>
       /// </summary>
       public static readonly RpcError InputChatlistInvalid = new(ErrorCode, "INPUT_CHATLIST_INVALID");
 
       /// <summary>
       /// The specified filter is invalid.
       /// <code>
       /// messages.search
       /// </code>
       /// </summary>
       public static readonly RpcError InputFilterInvalid = new(ErrorCode, "INPUT_FILTER_INVALID");
 
       /// <summary>
       /// The specified text is empty.
       /// <code>
       /// messages.translateText
       /// </code>
       /// </summary>
       public static readonly RpcError InputTextEmpty = new(ErrorCode, "INPUT_TEXT_EMPTY");
 
       /// <summary>
       /// The specified user was deleted.
       /// <code>
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.inviteToChannel
       /// channels.reportSpam
       /// contacts.block
       /// messages.addChatUser
       /// messages.createChat
       /// messages.editMessage
       /// messages.forwardMessages
       /// messages.getInlineBotResults
       /// messages.hideChatJoinRequest
       /// messages.requestEncryption
       /// messages.search
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendScreenshotNotification
       /// messages.setTyping
       /// messages.startBot
       /// messages.uploadMedia
       /// phone.requestCall
       /// </code>
       /// </summary>
       public static readonly RpcError InputUserDeactivated = new(ErrorCode, "INPUT_USER_DEACTIVATED");
 
       /// <summary>
       /// If the user has anonymously joined a group call as a channel, they can't invite other users to the group call because that would cause deanonymization, because the invite would be sent using the original user ID, not the anonymized channel ID.
       /// <code>
       /// phone.inviteToGroupCall
       /// </code>
       /// </summary>
       public static readonly RpcError InviteForbiddenWithJoinas = new(ErrorCode, "INVITE_FORBIDDEN_WITH_JOINAS");
 
       /// <summary>
       /// The invite hash is empty.
       /// <code>
       /// channels.joinChannel
       /// messages.checkChatInvite
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteHashEmpty = new(ErrorCode, "INVITE_HASH_EMPTY");
 
       /// <summary>
       /// The invite link has expired.
       /// <code>
       /// 1817183516
       /// channels.exportInvite
       /// channels.joinChannel
       /// invokeWithLayer
       /// messages.checkChatInvite
       /// messages.deleteExportedChatInvite
       /// messages.editExportedChatInvite
       /// messages.getChatInviteImporters
       /// messages.getExportedChatInvite
       /// messages.hideAllChatJoinRequests
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteHashExpired = new(ErrorCode, "INVITE_HASH_EXPIRED");
 
       /// <summary>
       /// The invite hash is invalid.
       /// <code>
       /// channels.joinChannel
       /// messages.checkChatInvite
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteHashInvalid = new(ErrorCode, "INVITE_HASH_INVALID");
 
       /// <summary>
       /// You have successfully requested to join this chat or channel.
       /// <code>
       /// channels.joinChannel
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteRequestSent = new(ErrorCode, "INVITE_REQUEST_SENT");
 
       /// <summary>
       /// The specified invite link was already revoked or is invalid.
       /// <code>
       /// messages.deleteExportedChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteRevokedMissing = new(ErrorCode, "INVITE_REVOKED_MISSING");
 
       /// <summary>
       /// The specified invite slug is empty.
       /// <code>
       /// chatlists.checkChatlistInvite
       /// chatlists.joinChatlistInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteSlugEmpty = new(ErrorCode, "INVITE_SLUG_EMPTY");
 
       /// <summary>
       /// The specified chat folder link has expired.
       /// <code>
       /// chatlists.checkChatlistInvite
       /// chatlists.joinChatlistInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteSlugExpired = new(ErrorCode, "INVITE_SLUG_EXPIRED");
 
       /// <summary>
       /// The maximum number of per-folder invites specified by the `chatlist_invites_limit_default`/`chatlist_invites_limit_premium` [client configuration parameters ](/api/config#chatlist-invites-limit-default) was reached.
       /// <code>
       /// chatlists.exportChatlistInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InvitesTooMuch = new(ErrorCode, "INVITES_TOO_MUCH");
 
       /// <summary>
       /// The specified invoice payload is invalid.
       /// <code>
       /// payments.exportInvoice
       /// </code>
       /// </summary>
       public static readonly RpcError InvoicePayloadInvalid = new(ErrorCode, "INVOICE_PAYLOAD_INVALID");
 
       /// <summary>
       /// The specified peer cannot be used to join a group call.
       /// <code>
       /// phone.joinGroupCall
       /// phone.saveDefaultGroupCallJoinAs
       /// </code>
       /// </summary>
       public static readonly RpcError JoinAsPeerInvalid = new(ErrorCode, "JOIN_AS_PEER_INVALID");
 
       /// <summary>
       /// The specified language code is invalid.
       /// <code>
       /// bots.getBotInfo
       /// bots.resetBotCommands
       /// bots.setBotCommands
       /// </code>
       /// </summary>
       public static readonly RpcError LangCodeInvalid = new(ErrorCode, "LANG_CODE_INVALID");
 
       /// <summary>
       /// The specified language code is not supported.
       /// <code>
       /// langpack.getLangPack
       /// langpack.getLanguage
       /// langpack.getStrings
       /// </code>
       /// </summary>
       public static readonly RpcError LangCodeNotSupported = new(ErrorCode, "LANG_CODE_NOT_SUPPORTED");
 
       /// <summary>
       /// The provided language pack is invalid.
       /// <code>
       /// langpack.getDifference
       /// langpack.getLangPack
       /// langpack.getLanguage
       /// langpack.getLanguages
       /// langpack.getStrings
       /// </code>
       /// </summary>
       public static readonly RpcError LangPackInvalid = new(ErrorCode, "LANG_PACK_INVALID");
 
       /// <summary>
       /// The last name is invalid.
       /// <code>
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError LastnameInvalid = new(ErrorCode, "LASTNAME_INVALID");
 
       /// <summary>
       /// The provided limit is invalid.
       /// <code>
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError LimitInvalid = new(ErrorCode, "LIMIT_INVALID");
 
       /// <summary>
       /// Discussion link not modified.
       /// <code>
       /// channels.setDiscussionGroup
       /// </code>
       /// </summary>
       public static readonly RpcError LinkNotModified = new(ErrorCode, "LINK_NOT_MODIFIED");
 
       /// <summary>
       /// The provided location is invalid.
       /// <code>
       /// photos.updateProfilePhoto
       /// upload.getFile
       /// upload.getFileHashes
       /// upload.getWebFile
       /// </code>
       /// </summary>
       public static readonly RpcError LocationInvalid = new(ErrorCode, "LOCATION_INVALID");
 
       /// <summary>
       /// The specified maximum date is invalid.
       /// <code>
       /// messages.deleteHistory
       /// </code>
       /// </summary>
       public static readonly RpcError MaxDateInvalid = new(ErrorCode, "MAX_DATE_INVALID");
 
       /// <summary>
       /// The provided max ID is invalid.
       /// <code>
       /// photos.getUserPhotos
       /// stories.readStories
       /// </code>
       /// </summary>
       public static readonly RpcError MaxIdInvalid = new(ErrorCode, "MAX_ID_INVALID");
 
       /// <summary>
       /// The specified max_qts is invalid.
       /// <code>
       /// messages.receivedQueue
       /// </code>
       /// </summary>
       public static readonly RpcError MaxQtsInvalid = new(ErrorCode, "MAX_QTS_INVALID");
 
       /// <summary>
       /// The MD5 checksums do not match.
       /// <code>
       /// messages.sendEncryptedFile
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError Md5ChecksumInvalid = new(ErrorCode, "MD5_CHECKSUM_INVALID");
 
       /// <summary>
       /// The caption is too long.
       /// <code>
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError MediaCaptionTooLong = new(ErrorCode, "MEDIA_CAPTION_TOO_LONG");
 
       /// <summary>
       /// The provided media object is invalid.
       /// <code>
       /// messages.editMessage
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMultiMedia
       /// stories.sendStory
       /// </code>
       /// </summary>
       public static readonly RpcError MediaEmpty = new(ErrorCode, "MEDIA_EMPTY");
 
       /// <summary>
       /// The specified media file is invalid.
       /// <code>
       /// stories.sendStory
       /// </code>
       /// </summary>
       public static readonly RpcError MediaFileInvalid = new(ErrorCode, "MEDIA_FILE_INVALID");
 
       /// <summary>
       /// You tried to send media of different types in an album.
       /// <code>
       /// messages.editMessage
       /// </code>
       /// </summary>
       public static readonly RpcError MediaGroupedInvalid = new(ErrorCode, "MEDIA_GROUPED_INVALID");
 
       /// <summary>
       /// Media invalid.
       /// <code>
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.sendMultiMedia
       /// messages.uploadMedia
       /// payments.exportInvoice
       /// </code>
       /// </summary>
       public static readonly RpcError MediaInvalid = new(ErrorCode, "MEDIA_INVALID");
 
       /// <summary>
       /// The new media is invalid.
       /// <code>
       /// messages.editMessage
       /// </code>
       /// </summary>
       public static readonly RpcError MediaNewInvalid = new(ErrorCode, "MEDIA_NEW_INVALID");
 
       /// <summary>
       /// Previous media invalid.
       /// <code>
       /// messages.editMessage
       /// </code>
       /// </summary>
       public static readonly RpcError MediaPrevInvalid = new(ErrorCode, "MEDIA_PREV_INVALID");
 
       /// <summary>
       /// The specified media TTL is invalid.
       /// <code>
       /// messages.editMessage
       /// </code>
       /// </summary>
       public static readonly RpcError MediaTtlInvalid = new(ErrorCode, "MEDIA_TTL_INVALID");
 
       /// <summary>
       /// The specified media type cannot be used in stories.
       /// <code>
       /// stories.sendStory
       /// </code>
       /// </summary>
       public static readonly RpcError MediaTypeInvalid = new(ErrorCode, "MEDIA_TYPE_INVALID");
 
       /// <summary>
       /// 
       /// <code>
       /// stories.sendStory
       /// </code>
       /// </summary>
       public static readonly RpcError MediaVideoStoryMissing = new(ErrorCode, "MEDIA_VIDEO_STORY_MISSING");
 
       /// <summary>
       /// Invalid supergroup ID.
       /// <code>
       /// channels.setDiscussionGroup
       /// </code>
       /// </summary>
       public static readonly RpcError MegagroupIdInvalid = new(ErrorCode, "MEGAGROUP_ID_INVALID");
 
       /// <summary>
       /// Group with hidden history for new members can't be set as discussion groups.
       /// <code>
       /// channels.setDiscussionGroup
       /// </code>
       /// </summary>
       public static readonly RpcError MegagroupPrehistoryHidden = new(ErrorCode, "MEGAGROUP_PREHISTORY_HIDDEN");
 
       /// <summary>
       /// You can only use this method on a supergroup.
       /// <code>
       /// channels.editLocation
       /// stats.getMegagroupStats
       /// </code>
       /// </summary>
       public static readonly RpcError MegagroupRequired = new(ErrorCode, "MEGAGROUP_REQUIRED");
 
       /// <summary>
       /// You can't edit this message anymore, too much time has passed since its creation.
       /// <code>
       /// messages.editMessage
       /// </code>
       /// </summary>
       public static readonly RpcError MessageEditTimeExpired = new(ErrorCode, "MESSAGE_EDIT_TIME_EXPIRED");
 
       /// <summary>
       /// The provided message is empty.
       /// <code>
       /// auth.sendInvites
       /// messages.editMessage
       /// messages.getWebPagePreview
       /// messages.sendMessage
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError MessageEmpty = new(ErrorCode, "MESSAGE_EMPTY");
 
       /// <summary>
       /// The provided message id is invalid.
       /// <code>
       /// channels.exportMessageLink
       /// messages.deleteHistory
       /// messages.deleteMessages
       /// messages.editInlineBotMessage
       /// messages.editMessage
       /// messages.forwardMessage
       /// messages.forwardMessages
       /// messages.getBotCallbackAnswer
       /// messages.getGameHighScores
       /// messages.getInlineGameHighScores
       /// messages.getMessageEditData
       /// messages.getMessagesReadParticipants
       /// messages.getPollResults
       /// messages.sendReaction
       /// messages.sendScheduledMessages
       /// messages.sendVote
       /// messages.setGameScore
       /// messages.setInlineGameScore
       /// messages.updatePinnedMessage
       /// msg_container
       /// payments.getPaymentForm
       /// payments.getPaymentReceipt
       /// payments.sendPaymentForm
       /// payments.validateRequestedInfo
       /// stats.getMessagePublicForwards
       /// stats.getMessageStats
       /// </code>
       /// </summary>
       public static readonly RpcError MessageIdInvalid = new(ErrorCode, "MESSAGE_ID_INVALID");
 
       /// <summary>
       /// No message ids were provided.
       /// <code>
       /// channels.getMessages
       /// messages.forwardMessages
       /// </code>
       /// </summary>
       public static readonly RpcError MessageIdsEmpty = new(ErrorCode, "MESSAGE_IDS_EMPTY");
 
       /// <summary>
       /// The provided message data is identical to the previous message data, the message wasn't modified.
       /// <code>
       /// messages.editInlineBotMessage
       /// messages.editMessage
       /// messages.sendReaction
       /// </code>
       /// </summary>
       public static readonly RpcError MessageNotModified = new(ErrorCode, "MESSAGE_NOT_MODIFIED");
 
       /// <summary>
       /// Poll closed.
       /// <code>
       /// messages.sendVote
       /// </code>
       /// </summary>
       public static readonly RpcError MessagePollClosed = new(ErrorCode, "MESSAGE_POLL_CLOSED");
 
       /// <summary>
       /// The provided message is too long.
       /// <code>
       /// messages.editMessage
       /// messages.sendMessage
       /// messages.setBotCallbackAnswer
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError MessageTooLong = new(ErrorCode, "MESSAGE_TOO_LONG");
 
       /// <summary>
       /// The specified method is invalid.
       /// <code>
       /// bots.sendCustomRequest
       /// messages.searchGifs
       /// </code>
       /// </summary>
       public static readonly RpcError MethodInvalid = new(ErrorCode, "METHOD_INVALID");
 
       /// <summary>
       /// The specified minimum date is invalid.
       /// <code>
       /// messages.deleteHistory
       /// </code>
       /// </summary>
       public static readonly RpcError MinDateInvalid = new(ErrorCode, "MIN_DATE_INVALID");
 
       /// <summary>
       /// Invalid message ID provided.
       /// <code>
       /// account.updateNotifySettings
       /// channels.deleteMessages
       /// channels.deleteParticipantHistory
       /// channels.deleteUserHistory
       /// channels.editBanned
       /// channels.exportMessageLink
       /// channels.getAdminLog
       /// channels.getChannels
       /// channels.getFullChannel
       /// channels.getMessages
       /// channels.getParticipant
       /// channels.getParticipants
       /// channels.getSponsoredMessages
       /// channels.inviteToChannel
       /// channels.joinChannel
       /// channels.leaveChannel
       /// channels.readHistory
       /// channels.readMessageContents
       /// channels.reportSpam
       /// contacts.acceptContact
       /// contacts.addContact
       /// contacts.block
       /// contacts.unblock
       /// help.getConfig
       /// messages.addChatUser
       /// messages.deleteHistory
       /// messages.editMessage
       /// messages.exportChatInvite
       /// messages.forwardMessages
       /// messages.getCommonChats
       /// messages.getDiscussionMessage
       /// messages.getHistory
       /// messages.getInlineBotResults
       /// messages.getMessageReactionsList
       /// messages.getMessageReadParticipants
       /// messages.getMessagesViews
       /// messages.getPeerDialogs
       /// messages.getPeerSettings
       /// messages.getPollVotes
       /// messages.getReplies
       /// messages.getUnreadMentions
       /// messages.hideChatJoinRequest
       /// messages.importChatInvite
       /// messages.readDiscussion
       /// messages.readHistory
       /// messages.readMentions
       /// messages.reportReaction
       /// messages.reportSpam
       /// messages.saveDraft
       /// messages.search
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendReaction
       /// messages.sendVote
       /// messages.setTyping
       /// messages.startBot
       /// messages.translateText
       /// messages.uploadMedia
       /// msg_container
       /// msgs_state_req
       /// photos.getUserPhotos
       /// req_pq_multi
       /// updates.getChannelDifference
       /// updates.getDifference
       /// upload.getFile
       /// upload.saveFilePart
       /// users.getFullUser
       /// users.getUsers
       /// </code>
       /// </summary>
       public static readonly RpcError MsgIdInvalid = new(ErrorCode, "MSG_ID_INVALID");
 
       /// <summary>
       /// [`chat_read_mark_expire_period` seconds](https://core.telegram.org/api/config#chat-read-mark-expire-period) have passed since the message was sent, read receipts were deleted.
       /// <code>
       /// messages.getMessageReadParticipants
       /// </code>
       /// </summary>
       public static readonly RpcError MsgTooOld = new(ErrorCode, "MSG_TOO_OLD");
 
       /// <summary>
       /// A waiting call returned an error.
       /// <code>
       /// messages.readEncryptedHistory
       /// messages.receivedQueue
       /// messages.sendEncrypted
       /// messages.sendEncryptedFile
       /// messages.sendEncryptedService
       /// </code>
       /// </summary>
       public static readonly RpcError MsgWaitFailed = new(ErrorCode, "MSG_WAIT_FAILED");
 
       /// <summary>
       /// Too many media files for album.
       /// <code>
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError MultiMediaTooLong = new(ErrorCode, "MULTI_MEDIA_TOO_LONG");
 
       /// <summary>
       /// The new salt is invalid.
       /// <code>
       /// account.updatePasswordSettings
       /// </code>
       /// </summary>
       public static readonly RpcError NewSaltInvalid = new(ErrorCode, "NEW_SALT_INVALID");
 
       /// <summary>
       /// No password is set on the current account, and no new password was specified in `new_settings`.
       /// <code>
       /// account.updatePasswordSettings
       /// </code>
       /// </summary>
       public static readonly RpcError NewSettingsEmpty = new(ErrorCode, "NEW_SETTINGS_EMPTY");
 
       /// <summary>
       /// The new password settings are invalid.
       /// <code>
       /// account.updatePasswordSettings
       /// auth.recoverPassword
       /// </code>
       /// </summary>
       public static readonly RpcError NewSettingsInvalid = new(ErrorCode, "NEW_SETTINGS_INVALID");
 
       /// <summary>
       /// The specified offset is longer than 64 bytes.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError NextOffsetInvalid = new(ErrorCode, "NEXT_OFFSET_INVALID");
 
       /// <summary>
       /// The provided offset is invalid.
       /// <code>
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError OffsetInvalid = new(ErrorCode, "OFFSET_INVALID");
 
       /// <summary>
       /// The provided offset peer is invalid.
       /// <code>
       /// messages.getDialogs
       /// </code>
       /// </summary>
       public static readonly RpcError OffsetPeerIdInvalid = new(ErrorCode, "OFFSET_PEER_ID_INVALID");
 
       /// <summary>
       /// Invalid option selected.
       /// <code>
       /// messages.sendVote
       /// </code>
       /// </summary>
       public static readonly RpcError OptionInvalid = new(ErrorCode, "OPTION_INVALID");
 
       /// <summary>
       /// Too many options provided.
       /// <code>
       /// messages.sendVote
       /// </code>
       /// </summary>
       public static readonly RpcError OptionsTooMuch = new(ErrorCode, "OPTIONS_TOO_MUCH");
 
       /// <summary>
       /// The specified username order is invalid.
       /// <code>
       /// account.reorderUsernames
       /// </code>
       /// </summary>
       public static readonly RpcError OrderInvalid = new(ErrorCode, "ORDER_INVALID");
 
       /// <summary>
       /// Short pack name invalid.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError PackShortNameInvalid = new(ErrorCode, "PACK_SHORT_NAME_INVALID");
 
       /// <summary>
       /// A stickerpack with this name already exists.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError PackShortNameOccupied = new(ErrorCode, "PACK_SHORT_NAME_OCCUPIED");
 
       /// <summary>
       /// The stickerpack title is invalid.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError PackTitleInvalid = new(ErrorCode, "PACK_TITLE_INVALID");
 
       /// <summary>
       /// The specified participant ID is invalid.
       /// <code>
       /// channels.deleteParticipantHistory
       /// channels.editBanned
       /// channels.getParticipant
       /// </code>
       /// </summary>
       public static readonly RpcError ParticipantIdInvalid = new(ErrorCode, "PARTICIPANT_ID_INVALID");
 
       /// <summary>
       /// Trying to enable a presentation, when the user hasn't joined the Video Chat with [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).
       /// <code>
       /// phone.editGroupCallParticipant
       /// phone.joinGroupCallPresentation
       /// </code>
       /// </summary>
       public static readonly RpcError ParticipantJoinMissing = new(ErrorCode, "PARTICIPANT_JOIN_MISSING");
 
       /// <summary>
       /// The other participant does not use an up to date telegram client with support for calls.
       /// <code>
       /// phone.requestCall
       /// </code>
       /// </summary>
       public static readonly RpcError ParticipantVersionOutdated = new(ErrorCode, "PARTICIPANT_VERSION_OUTDATED");
 
       /// <summary>
       /// Not enough participants.
       /// <code>
       /// channels.convertToGigagroup
       /// channels.setStickers
       /// channels.toggleParticipantsHidden
       /// </code>
       /// </summary>
       public static readonly RpcError ParticipantsTooFew = new(ErrorCode, "PARTICIPANTS_TOO_FEW");
 
       /// <summary>
       /// The provided password is empty.
       /// <code>
       /// account.resetPassword
       /// auth.requestPasswordRecovery
       /// </code>
       /// </summary>
       public static readonly RpcError PasswordEmpty = new(ErrorCode, "PASSWORD_EMPTY");
 
       /// <summary>
       /// The provided password hash is invalid.
       /// <code>
       /// account.getPasswordSettings
       /// account.getTmpPassword
       /// account.updatePasswordSettings
       /// auth.checkPassword
       /// channels.editCreator
       /// </code>
       /// </summary>
       public static readonly RpcError PasswordHashInvalid = new(ErrorCode, "PASSWORD_HASH_INVALID");
 
       /// <summary>
       /// You must enable 2FA in order to transfer ownership of a channel.
       /// <code>
       /// channels.editCreator
       /// </code>
       /// </summary>
       public static readonly RpcError PasswordMissing = new(ErrorCode, "PASSWORD_MISSING");
 
       /// <summary>
       /// The recovery code has expired.
       /// <code>
       /// auth.checkRecoveryPassword
       /// </code>
       /// </summary>
       public static readonly RpcError PasswordRecoveryExpired = new(ErrorCode, "PASSWORD_RECOVERY_EXPIRED");
 
       /// <summary>
       /// No email was set, can't recover password via email.
       /// <code>
       /// auth.requestPasswordRecovery
       /// </code>
       /// </summary>
       public static readonly RpcError PasswordRecoveryNa = new(ErrorCode, "PASSWORD_RECOVERY_NA");
 
       /// <summary>
       /// A [2FA password](https://core.telegram.org/api/srp) must be configured to use Telegram Passport.
       /// <code>
       /// account.saveSecureValue
       /// </code>
       /// </summary>
       public static readonly RpcError PasswordRequired = new(ErrorCode, "PASSWORD_REQUIRED");
 
       /// <summary>
       /// The password was modified less than 24 hours ago, try again in <c>{0}</c> seconds.
       /// <code>
       /// channels.editCreator
       /// </code>
       /// </summary>
       public static readonly RpcError PasswordTooFreshX = new(ErrorCode, "PASSWORD_TOO_FRESH_{0}");
 
       /// <summary>
       /// The specified payment provider is invalid.
       /// <code>
       /// messages.sendMedia
       /// payments.exportInvoice
       /// </code>
       /// </summary>
       public static readonly RpcError PaymentProviderInvalid = new(ErrorCode, "PAYMENT_PROVIDER_INVALID");
 
       /// <summary>
       /// You can't pin an empty chat with a user.
       /// <code>
       /// messages.toggleDialogPin
       /// </code>
       /// </summary>
       public static readonly RpcError PeerHistoryEmpty = new(ErrorCode, "PEER_HISTORY_EMPTY");
 
       /// <summary>
       /// The provided peer id is invalid.
       /// <code>
       /// account.getNotifySettings
       /// account.reportPeer
       /// account.reportProfilePhoto
       /// account.saveAutoSaveSettings
       /// account.updateNotifySettings
       /// bots.setBotCommands
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.getSendAs
       /// channels.joinChannel
       /// contacts.block
       /// contacts.resetTopPeerRating
       /// contacts.unblock
       /// messages.addChatUser
       /// messages.checkHistoryImportPeer
       /// messages.deleteChat
       /// messages.deleteChatUser
       /// messages.deleteExportedChatInvite
       /// messages.deleteHistory
       /// messages.deleteRevokedExportedChatInvites
       /// messages.editChatAbout
       /// messages.editChatAdmin
       /// messages.editChatDefaultBannedRights
       /// messages.editChatPhoto
       /// messages.editChatTitle
       /// messages.editExportedChatInvite
       /// messages.editMessage
       /// messages.exportChatInvite
       /// messages.forwardMessage
       /// messages.forwardMessages
       /// messages.getAdminsWithInvites
       /// messages.getBotCallbackAnswer
       /// messages.getChatInviteImporters
       /// messages.getChats
       /// messages.getDiscussionMessage
       /// messages.getExportedChatInvite
       /// messages.getExportedChatInvites
       /// messages.getFullChat
       /// messages.getGameHighScores
       /// messages.getHistory
       /// messages.getMessageEditData
       /// messages.getMessageReadParticipants
       /// messages.getMessagesViews
       /// messages.getOnlines
       /// messages.getPeerDialogs
       /// messages.getPeerSettings
       /// messages.getPollResults
       /// messages.getReplies
       /// messages.getScheduledHistory
       /// messages.getScheduledMessages
       /// messages.getSearchCounters
       /// messages.getStatsURL
       /// messages.getUnreadMentions
       /// messages.hideAllChatJoinRequests
       /// messages.hideChatJoinRequest
       /// messages.hideReportSpam
       /// messages.importChatInvite
       /// messages.markDialogUnread
       /// messages.migrateChat
       /// messages.readDiscussion
       /// messages.readHistory
       /// messages.readMentions
       /// messages.readReactions
       /// messages.reorderPinnedDialogs
       /// messages.report
       /// messages.reportSpam
       /// messages.saveDefaultSendAs
       /// messages.saveDraft
       /// messages.search
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// messages.sendReaction
       /// messages.sendScheduledMessages
       /// messages.sendScreenshotNotification
       /// messages.sendVote
       /// messages.setChatAvailableReactions
       /// messages.setChatTheme
       /// messages.setChatWallPaper
       /// messages.setGameScore
       /// messages.setTyping
       /// messages.startBot
       /// messages.toggleDialogPin
       /// messages.toggleNoForwards
       /// messages.translateText
       /// messages.updatePinnedMessage
       /// messages.uploadMedia
       /// phone.createGroupCall
       /// phone.getGroupCallJoinAs
       /// stats.getMessagePublicForwards
       /// stats.getMessageStats
       /// stickers.createStickerSet
       /// stories.applyBoost
       /// stories.canApplyBoost
       /// stories.canSendStory
       /// stories.deleteStories
       /// stories.editStory
       /// stories.exportStoryLink
       /// stories.getBoostersList
       /// stories.getBoostsStatus
       /// stories.getPeerStories
       /// stories.getPinnedStories
       /// stories.getStoriesArchive
       /// stories.getStoriesByID
       /// stories.getStoriesViews
       /// stories.getStoryViewsList
       /// stories.incrementStoryViews
       /// stories.readStories
       /// stories.report
       /// stories.sendReaction
       /// stories.sendStory
       /// stories.togglePeerStoriesHidden
       /// stories.togglePinned
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError PeerIdInvalid = new(ErrorCode, "PEER_ID_INVALID");
 
       /// <summary>
       /// The provided peer ID is not supported.
       /// <code>
       /// messages.search
       /// </code>
       /// </summary>
       public static readonly RpcError PeerIdNotSupported = new(ErrorCode, "PEER_ID_NOT_SUPPORTED");
 
       /// <summary>
       /// The specified list of peers is empty.
       /// <code>
       /// chatlists.exportChatlistInvite
       /// </code>
       /// </summary>
       public static readonly RpcError PeersListEmpty = new(ErrorCode, "PEERS_LIST_EMPTY");
 
       /// <summary>
       /// Persistent timestamp empty.
       /// <code>
       /// updates.getChannelDifference
       /// updates.getDifference
       /// </code>
       /// </summary>
       public static readonly RpcError PersistentTimestampEmpty = new(ErrorCode, "PERSISTENT_TIMESTAMP_EMPTY");
 
       /// <summary>
       /// Persistent timestamp invalid.
       /// <code>
       /// updates.getChannelDifference
       /// updates.getDifference
       /// </code>
       /// </summary>
       public static readonly RpcError PersistentTimestampInvalid = new(ErrorCode, "PERSISTENT_TIMESTAMP_INVALID");
 
       /// <summary>
       /// phone_code is missing.
       /// <code>
       /// account.changePhone
       /// account.confirmPhone
       /// account.verifyPhone
       /// auth.resendCode
       /// auth.signIn
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneCodeEmpty = new(ErrorCode, "PHONE_CODE_EMPTY");
 
       /// <summary>
       /// The phone code you provided has expired.
       /// <code>
       /// account.changePhone
       /// account.verifyPhone
       /// auth.cancelCode
       /// auth.resendCode
       /// auth.signIn
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneCodeExpired = new(ErrorCode, "PHONE_CODE_EXPIRED");
 
       /// <summary>
       /// phone_code_hash is missing.
       /// <code>
       /// auth.resendCode
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneCodeHashEmpty = new(ErrorCode, "PHONE_CODE_HASH_EMPTY");
 
       /// <summary>
       /// The provided phone code is invalid.
       /// <code>
       /// auth.signIn
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneCodeInvalid = new(ErrorCode, "PHONE_CODE_INVALID");
 
       /// <summary>
       /// An invalid or expired `phone_code_hash` was provided.
       /// <code>
       /// account.sendVerifyEmailCode
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneHashExpired = new(ErrorCode, "PHONE_HASH_EXPIRED");
 
       /// <summary>
       /// No user is associated to the specified phone number.
       /// <code>
       /// contacts.resolvePhone
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNotOccupied = new(ErrorCode, "PHONE_NOT_OCCUPIED");
 
       /// <summary>
       /// You can't sign up using this app.
       /// <code>
       /// auth.sendCode
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNumberAppSignupForbidden = new(ErrorCode, "PHONE_NUMBER_APP_SIGNUP_FORBIDDEN");
 
       /// <summary>
       /// The provided phone number is banned from telegram.
       /// <code>
       /// account.sendChangePhoneCode
       /// auth.checkPhone
       /// auth.sendCode
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNumberBanned = new(ErrorCode, "PHONE_NUMBER_BANNED");
 
       /// <summary>
       /// You asked for the code too many times.
       /// <code>
       /// auth.sendCode
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNumberFlood = new(ErrorCode, "PHONE_NUMBER_FLOOD");
 
       /// <summary>
       /// The phone number is invalid.
       /// <code>
       /// account.changePhone
       /// account.sendChangePhoneCode
       /// account.sendVerifyEmailCode
       /// account.sendVerifyPhoneCode
       /// account.verifyPhone
       /// auth.cancelCode
       /// auth.checkPhone
       /// auth.requestFirebaseSms
       /// auth.resendCode
       /// auth.resetLoginEmail
       /// auth.sendCode
       /// auth.signIn
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNumberInvalid = new(ErrorCode, "PHONE_NUMBER_INVALID");
 
       /// <summary>
       /// The phone number is already in use.
       /// <code>
       /// account.changePhone
       /// account.sendChangePhoneCode
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNumberOccupied = new(ErrorCode, "PHONE_NUMBER_OCCUPIED");
 
       /// <summary>
       /// The phone number is not yet being used.
       /// <code>
       /// auth.signIn
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNumberUnoccupied = new(ErrorCode, "PHONE_NUMBER_UNOCCUPIED");
 
       /// <summary>
       /// This phone is password protected.
       /// <code>
       /// auth.sendCode
       /// </code>
       /// </summary>
       public static readonly RpcError PhonePasswordProtected = new(ErrorCode, "PHONE_PASSWORD_PROTECTED");
 
       /// <summary>
       /// Photo mime-type invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoContentTypeInvalid = new(ErrorCode, "PHOTO_CONTENT_TYPE_INVALID");
 
       /// <summary>
       /// Photo URL invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoContentUrlEmpty = new(ErrorCode, "PHOTO_CONTENT_URL_EMPTY");
 
       /// <summary>
       /// Photo crop file missing.
       /// <code>
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoCropFileMissing = new(ErrorCode, "PHOTO_CROP_FILE_MISSING");
 
       /// <summary>
       /// Photo is too small.
       /// <code>
       /// channels.editPhoto
       /// messages.editChatPhoto
       /// photos.updateProfilePhoto
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoCropSizeSmall = new(ErrorCode, "PHOTO_CROP_SIZE_SMALL");
 
       /// <summary>
       /// The extension of the photo is invalid.
       /// <code>
       /// channels.editPhoto
       /// messages.editChatPhoto
       /// messages.sendMedia
       /// messages.uploadMedia
       /// photos.updateProfilePhoto
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoExtInvalid = new(ErrorCode, "PHOTO_EXT_INVALID");
 
       /// <summary>
       /// Profile photo file missing.
       /// <code>
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoFileMissing = new(ErrorCode, "PHOTO_FILE_MISSING");
 
       /// <summary>
       /// Photo ID invalid.
       /// <code>
       /// photos.updateProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoIdInvalid = new(ErrorCode, "PHOTO_ID_INVALID");
 
       /// <summary>
       /// Photo invalid.
       /// <code>
       /// channels.editPhoto
       /// messages.editChatPhoto
       /// messages.setInlineBotResults
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoInvalid = new(ErrorCode, "PHOTO_INVALID");
 
       /// <summary>
       /// The photo dimensions are invalid.
       /// <code>
       /// messages.sendMedia
       /// messages.uploadMedia
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoInvalidDimensions = new(ErrorCode, "PHOTO_INVALID_DIMENSIONS");
 
       /// <summary>
       /// Internal issues, try again later.
       /// <code>
       /// messages.sendMedia
       /// messages.uploadMedia
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoSaveFileInvalid = new(ErrorCode, "PHOTO_SAVE_FILE_INVALID");
 
       /// <summary>
       /// Photo thumbnail URL is empty.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError PhotoThumbUrlEmpty = new(ErrorCode, "PHOTO_THUMB_URL_EMPTY");
 
       /// <summary>
       /// You can't pin messages.
       /// <code>
       /// messages.updatePinnedMessage
       /// </code>
       /// </summary>
       public static readonly RpcError PinRestricted = new(ErrorCode, "PIN_RESTRICTED");
 
       /// <summary>
       /// Too many pinned dialogs.
       /// <code>
       /// messages.sendMessage
       /// messages.toggleDialogPin
       /// updates.getChannelDifference
       /// </code>
       /// </summary>
       public static readonly RpcError PinnedDialogsTooMuch = new(ErrorCode, "PINNED_DIALOGS_TOO_MUCH");
 
       /// <summary>
       /// One of the poll answers is not acceptable.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError PollAnswerInvalid = new(ErrorCode, "POLL_ANSWER_INVALID");
 
       /// <summary>
       /// Invalid poll answers were provided.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError PollAnswersInvalid = new(ErrorCode, "POLL_ANSWERS_INVALID");
 
       /// <summary>
       /// Duplicate poll options provided.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError PollOptionDuplicate = new(ErrorCode, "POLL_OPTION_DUPLICATE");
 
       /// <summary>
       /// Invalid poll option provided.
       /// <code>
       /// messages.sendMedia
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError PollOptionInvalid = new(ErrorCode, "POLL_OPTION_INVALID");
 
       /// <summary>
       /// One of the poll questions is not acceptable.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError PollQuestionInvalid = new(ErrorCode, "POLL_QUESTION_INVALID");
 
       /// <summary>
       /// A premium account is required to execute this action.
       /// <code>
       /// stories.sendStory
       /// </code>
       /// </summary>
       public static readonly RpcError PremiumAccountRequired = new(ErrorCode, "PREMIUM_ACCOUNT_REQUIRED");
 
       /// <summary>
       /// The privacy key is invalid.
       /// <code>
       /// account.getPrivacy
       /// account.setPrivacy
       /// </code>
       /// </summary>
       public static readonly RpcError PrivacyKeyInvalid = new(ErrorCode, "PRIVACY_KEY_INVALID");
 
       /// <summary>
       /// Too many privacy rules were specified, the current limit is 1000.
       /// <code>
       /// account.setPrivacy
       /// </code>
       /// </summary>
       public static readonly RpcError PrivacyTooLong = new(ErrorCode, "PRIVACY_TOO_LONG");
 
       /// <summary>
       /// The specified privacy rule combination is invalid.
       /// <code>
       /// account.setPrivacy
       /// </code>
       /// </summary>
       public static readonly RpcError PrivacyValueInvalid = new(ErrorCode, "PRIVACY_VALUE_INVALID");
 
       /// <summary>
       /// A public key is required.
       /// <code>
       /// account.getAuthorizationForm
       /// </code>
       /// </summary>
       public static readonly RpcError PublicKeyRequired = new(ErrorCode, "PUBLIC_KEY_REQUIRED");
 
       /// <summary>
       /// The query ID is empty.
       /// <code>
       /// messages.sendInlineBotResult
       /// </code>
       /// </summary>
       public static readonly RpcError QueryIdEmpty = new(ErrorCode, "QUERY_ID_EMPTY");
 
       /// <summary>
       /// The query ID is invalid.
       /// <code>
       /// bots.answerWebhookJSONQuery
       /// messages.sendWebViewResultMessage
       /// messages.setBotCallbackAnswer
       /// messages.setBotShippingResults
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError QueryIdInvalid = new(ErrorCode, "QUERY_ID_INVALID");
 
       /// <summary>
       /// The query string is too short.
       /// <code>
       /// contacts.search
       /// </code>
       /// </summary>
       public static readonly RpcError QueryTooShort = new(ErrorCode, "QUERY_TOO_SHORT");
 
       /// <summary>
       /// You can forward a quiz while hiding the original author only after choosing an option in the quiz.
       /// <code>
       /// messages.forwardMessages
       /// </code>
       /// </summary>
       public static readonly RpcError QuizAnswerMissing = new(ErrorCode, "QUIZ_ANSWER_MISSING");
 
       /// <summary>
       /// An invalid value was provided to the correct_answers field.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError QuizCorrectAnswerInvalid = new(ErrorCode, "QUIZ_CORRECT_ANSWER_INVALID");
 
       /// <summary>
       /// No correct quiz answer was specified.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError QuizCorrectAnswersEmpty = new(ErrorCode, "QUIZ_CORRECT_ANSWERS_EMPTY");
 
       /// <summary>
       /// You specified too many correct answers in a quiz, quizzes can only have one right answer!
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError QuizCorrectAnswersTooMuch = new(ErrorCode, "QUIZ_CORRECT_ANSWERS_TOO_MUCH");
 
       /// <summary>
       /// Quizzes can't have the multiple_choice flag set!
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError QuizMultipleInvalid = new(ErrorCode, "QUIZ_MULTIPLE_INVALID");
 
       /// <summary>
       /// Random ID empty.
       /// <code>
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError RandomIdEmpty = new(ErrorCode, "RANDOM_ID_EMPTY");
 
       /// <summary>
       /// A provided random ID is invalid.
       /// <code>
       /// messages.forwardMessages
       /// </code>
       /// </summary>
       public static readonly RpcError RandomIdInvalid = new(ErrorCode, "RANDOM_ID_INVALID");
 
       /// <summary>
       /// Random length invalid.
       /// <code>
       /// messages.getDhConfig
       /// </code>
       /// </summary>
       public static readonly RpcError RandomLengthInvalid = new(ErrorCode, "RANDOM_LENGTH_INVALID");
 
       /// <summary>
       /// Invalid range provided.
       /// <code>
       /// updates.getChannelDifference
       /// </code>
       /// </summary>
       public static readonly RpcError RangesInvalid = new(ErrorCode, "RANGES_INVALID");
 
       /// <summary>
       /// Empty reaction provided.
       /// <code>
       /// messages.sendReaction
       /// </code>
       /// </summary>
       public static readonly RpcError ReactionEmpty = new(ErrorCode, "REACTION_EMPTY");
 
       /// <summary>
       /// The specified reaction is invalid.
       /// <code>
       /// messages.sendReaction
       /// messages.setDefaultReaction
       /// stories.sendReaction
       /// </code>
       /// </summary>
       public static readonly RpcError ReactionInvalid = new(ErrorCode, "REACTION_INVALID");
 
       /// <summary>
       /// The message already has exactly `reactions_uniq_max` reaction emojis, you can't react with a new emoji, see [the docs for more info ](/api/config#client-configuration).
       /// <code>
       /// messages.sendReaction
       /// </code>
       /// </summary>
       public static readonly RpcError ReactionsTooMany = new(ErrorCode, "REACTIONS_TOO_MANY");
 
       /// <summary>
       /// Reply markup for buy button empty.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ReplyMarkupBuyEmpty = new(ErrorCode, "REPLY_MARKUP_BUY_EMPTY");
 
       /// <summary>
       /// The provided reply markup is invalid.
       /// <code>
       /// messages.editMessage
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ReplyMarkupInvalid = new(ErrorCode, "REPLY_MARKUP_INVALID");
 
       /// <summary>
       /// The specified reply_markup is too long.
       /// <code>
       /// messages.sendMedia
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ReplyMarkupTooLong = new(ErrorCode, "REPLY_MARKUP_TOO_LONG");
 
       /// <summary>
       /// The specified `reply_to` field is invalid.
       /// <code>
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ReplyToInvalid = new(ErrorCode, "REPLY_TO_INVALID");
 
       /// <summary>
       /// No password reset is in progress.
       /// <code>
       /// account.declinePasswordReset
       /// </code>
       /// </summary>
       public static readonly RpcError ResetRequestMissing = new(ErrorCode, "RESET_REQUEST_MISSING");
 
       /// <summary>
       /// You provided a duplicate result ID.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ResultIdDuplicate = new(ErrorCode, "RESULT_ID_DUPLICATE");
 
       /// <summary>
       /// Result ID empty.
       /// <code>
       /// messages.sendInlineBotResult
       /// </code>
       /// </summary>
       public static readonly RpcError ResultIdEmpty = new(ErrorCode, "RESULT_ID_EMPTY");
 
       /// <summary>
       /// One of the specified result IDs is invalid.
       /// <code>
       /// messages.sendInlineBotResult
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ResultIdInvalid = new(ErrorCode, "RESULT_ID_INVALID");
 
       /// <summary>
       /// Result type invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ResultTypeInvalid = new(ErrorCode, "RESULT_TYPE_INVALID");
 
       /// <summary>
       /// Too many results were provided.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError ResultsTooMuch = new(ErrorCode, "RESULTS_TOO_MUCH");
 
       /// <summary>
       /// You cannot change your vote.
       /// <code>
       /// messages.sendVote
       /// </code>
       /// </summary>
       public static readonly RpcError RevoteNotAllowed = new(ErrorCode, "REVOTE_NOT_ALLOWED");
 
       /// <summary>
       /// The new admin rights are equal to the old rights, no change was made.
       /// <code>
       /// bots.setBotBroadcastDefaultAdminRights
       /// bots.setBotGroupDefaultAdminRights
       /// </code>
       /// </summary>
       public static readonly RpcError RightsNotModified = new(ErrorCode, "RIGHTS_NOT_MODIFIED");
 
       /// <summary>
       /// Internal RSA decryption failed.
       /// <code>
       /// upload.getCdnFileHashes
       /// upload.reuploadCdnFile
       /// </code>
       /// </summary>
       public static readonly RpcError RsaDecryptFailed = new(ErrorCode, "RSA_DECRYPT_FAILED");
 
       /// <summary>
       /// Bots cannot schedule messages.
       /// <code>
       /// messages.sendMedia
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ScheduleBotNotAllowed = new(ErrorCode, "SCHEDULE_BOT_NOT_ALLOWED");
 
       /// <summary>
       /// Invalid schedule date provided.
       /// <code>
       /// messages.editMessage
       /// phone.createGroupCall
       /// </code>
       /// </summary>
       public static readonly RpcError ScheduleDateInvalid = new(ErrorCode, "SCHEDULE_DATE_INVALID");
 
       /// <summary>
       /// You can't schedule a message this far in the future.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ScheduleDateTooLate = new(ErrorCode, "SCHEDULE_DATE_TOO_LATE");
 
       /// <summary>
       /// Can't schedule until user is online, if the user's last seen timestamp is hidden by their privacy settings.
       /// <code>
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ScheduleStatusPrivate = new(ErrorCode, "SCHEDULE_STATUS_PRIVATE");
 
       /// <summary>
       /// There are too many scheduled messages.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ScheduleTooMuch = new(ErrorCode, "SCHEDULE_TOO_MUCH");
 
       /// <summary>
       /// The specified game score is invalid.
       /// <code>
       /// messages.setGameScore
       /// </code>
       /// </summary>
       public static readonly RpcError ScoreInvalid = new(ErrorCode, "SCORE_INVALID");
 
       /// <summary>
       /// The search query is empty.
       /// <code>
       /// contacts.search
       /// messages.search
       /// messages.searchGifs
       /// messages.searchGlobal
       /// </code>
       /// </summary>
       public static readonly RpcError SearchQueryEmpty = new(ErrorCode, "SEARCH_QUERY_EMPTY");
 
       /// <summary>
       /// You cannot provide a search query and an invite link at the same time.
       /// <code>
       /// messages.getChatInviteImporters
       /// </code>
       /// </summary>
       public static readonly RpcError SearchWithLinkNotSupported = new(ErrorCode, "SEARCH_WITH_LINK_NOT_SUPPORTED");
 
       /// <summary>
       /// Invalid duration provided.
       /// <code>
       /// channels.toggleSlowMode
       /// </code>
       /// </summary>
       public static readonly RpcError SecondsInvalid = new(ErrorCode, "SECONDS_INVALID");
 
       /// <summary>
       /// You can't send messages as the specified peer.
       /// <code>
       /// messages.forwardMessages
       /// messages.saveDefaultSendAs
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError SendAsPeerInvalid = new(ErrorCode, "SEND_AS_PEER_INVALID");
 
       /// <summary>
       /// Invalid media provided.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError SendMessageMediaInvalid = new(ErrorCode, "SEND_MESSAGE_MEDIA_INVALID");
 
       /// <summary>
       /// The message type is invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError SendMessageTypeInvalid = new(ErrorCode, "SEND_MESSAGE_TYPE_INVALID");
 
       /// <summary>
       /// This session was created less than 24 hours ago, try again in <c>{0}</c> seconds.
       /// <code>
       /// channels.editCreator
       /// </code>
       /// </summary>
       public static readonly RpcError SessionTooFreshX = new(ErrorCode, "SESSION_TOO_FRESH_{0}");
 
       /// <summary>
       /// Invalid settings were provided.
       /// <code>
       /// account.updateNotifySettings
       /// </code>
       /// </summary>
       public static readonly RpcError SettingsInvalid = new(ErrorCode, "SETTINGS_INVALID");
 
       /// <summary>
       /// The provided SHA256 hash is invalid.
       /// <code>
       /// messages.getDocumentByHash
       /// </code>
       /// </summary>
       public static readonly RpcError Sha256HashInvalid = new(ErrorCode, "SHA256_HASH_INVALID");
 
       /// <summary>
       /// The specified short name is invalid.
       /// <code>
       /// stickers.checkShortName
       /// </code>
       /// </summary>
       public static readonly RpcError ShortNameInvalid = new(ErrorCode, "SHORT_NAME_INVALID");
 
       /// <summary>
       /// The specified short name is already in use.
       /// <code>
       /// stickers.checkShortName
       /// </code>
       /// </summary>
       public static readonly RpcError ShortNameOccupied = new(ErrorCode, "SHORT_NAME_OCCUPIED");
 
       /// <summary>
       /// SlowMode is enabled, you cannot forward multiple messages to this group.
       /// <code>
       /// messages.forwardMessages
       /// </code>
       /// </summary>
       public static readonly RpcError SlowModeMultiMsgsDisabled = new(ErrorCode, "SLOWMODE_MULTI_MSGS_DISABLED");
 
       /// <summary>
       /// An error occurred while creating the SMS code.
       /// <code>
       /// auth.sendCode
       /// </code>
       /// </summary>
       public static readonly RpcError SmsCodeCreateFailed = new(ErrorCode, "SMS_CODE_CREATE_FAILED");
 
       /// <summary>
       /// Invalid SRP ID provided.
       /// <code>
       /// account.updatePasswordSettings
       /// auth.checkPassword
       /// channels.editCreator
       /// </code>
       /// </summary>
       public static readonly RpcError SrpIdInvalid = new(ErrorCode, "SRP_ID_INVALID");
 
       /// <summary>
       /// Password has changed.
       /// <code>
       /// account.updatePasswordSettings
       /// auth.checkPassword
       /// </code>
       /// </summary>
       public static readonly RpcError SrpPasswordChanged = new(ErrorCode, "SRP_PASSWORD_CHANGED");
 
       /// <summary>
       /// The start parameter is empty.
       /// <code>
       /// messages.setInlineBotResults
       /// messages.startBot
       /// </code>
       /// </summary>
       public static readonly RpcError StartParamEmpty = new(ErrorCode, "START_PARAM_EMPTY");
 
       /// <summary>
       /// Start parameter invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// messages.startBot
       /// </code>
       /// </summary>
       public static readonly RpcError StartParamInvalid = new(ErrorCode, "START_PARAM_INVALID");
 
       /// <summary>
       /// Start parameter is too long.
       /// <code>
       /// messages.startBot
       /// </code>
       /// </summary>
       public static readonly RpcError StartParamTooLong = new(ErrorCode, "START_PARAM_TOO_LONG");
 
       /// <summary>
       /// The specified sticker document is invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError StickerDocumentInvalid = new(ErrorCode, "STICKER_DOCUMENT_INVALID");
 
       /// <summary>
       /// Sticker emoji invalid.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerEmojiInvalid = new(ErrorCode, "STICKER_EMOJI_INVALID");
 
       /// <summary>
       /// Sticker file invalid.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerFileInvalid = new(ErrorCode, "STICKER_FILE_INVALID");
 
       /// <summary>
       /// The specified video sticker has invalid dimensions.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerGifDimensions = new(ErrorCode, "STICKER_GIF_DIMENSIONS");
 
       /// <summary>
       /// The provided sticker ID is invalid.
       /// <code>
       /// messages.faveSticker
       /// messages.saveRecentSticker
       /// </code>
       /// </summary>
       public static readonly RpcError StickerIdInvalid = new(ErrorCode, "STICKER_ID_INVALID");
 
       /// <summary>
       /// The provided sticker is invalid.
       /// <code>
       /// stickers.changeSticker
       /// stickers.changeStickerPosition
       /// stickers.removeStickerFromSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerInvalid = new(ErrorCode, "STICKER_INVALID");
 
       /// <summary>
       /// The specified sticker MIME type is invalid.
       /// <code>
       /// channels.editPhoto
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError StickerMimeInvalid = new(ErrorCode, "STICKER_MIME_INVALID");
 
       /// <summary>
       /// Sticker png dimensions invalid.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerPngDimensions = new(ErrorCode, "STICKER_PNG_DIMENSIONS");
 
       /// <summary>
       /// One of the specified stickers is not a valid PNG file.
       /// <code>
       /// stickers.addStickerToSet
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerPngNopng = new(ErrorCode, "STICKER_PNG_NOPNG");
 
       /// <summary>
       /// You must send the animated sticker as a document.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerTgsNodoc = new(ErrorCode, "STICKER_TGS_NODOC");
 
       /// <summary>
       /// Invalid TGS sticker provided.
       /// <code>
       /// stickers.addStickerToSet
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerTgsNotgs = new(ErrorCode, "STICKER_TGS_NOTGS");
 
       /// <summary>
       /// Incorrect stickerset thumb file provided, PNG / WEBP expected.
       /// <code>
       /// stickers.createStickerSet
       /// stickers.setStickerSetThumb
       /// </code>
       /// </summary>
       public static readonly RpcError StickerThumbPngNopng = new(ErrorCode, "STICKER_THUMB_PNG_NOPNG");
 
       /// <summary>
       /// Incorrect stickerset TGS thumb file provided.
       /// <code>
       /// stickers.createStickerSet
       /// stickers.setStickerSetThumb
       /// </code>
       /// </summary>
       public static readonly RpcError StickerThumbTgsNotgs = new(ErrorCode, "STICKER_THUMB_TGS_NOTGS");
 
       /// <summary>
       /// The specified video sticker is too big.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerVideoBig = new(ErrorCode, "STICKER_VIDEO_BIG");
 
       /// <summary>
       /// You must send the video sticker as a document.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerVideoNodoc = new(ErrorCode, "STICKER_VIDEO_NODOC");
 
       /// <summary>
       /// The specified video sticker is not in webm format.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerVideoNowebm = new(ErrorCode, "STICKER_VIDEO_NOWEBM");
 
       /// <summary>
       /// There are too many stickers in this stickerpack, you can't add any more.
       /// <code>
       /// stickers.addStickerToSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickerpackStickersTooMuch = new(ErrorCode, "STICKERPACK_STICKERS_TOO_MUCH");
 
       /// <summary>
       /// No sticker provided.
       /// <code>
       /// stickers.createStickerSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickersEmpty = new(ErrorCode, "STICKERS_EMPTY");
 
       /// <summary>
       /// There are too many stickers in this stickerpack, you can't add any more.
       /// <code>
       /// stickers.addStickerToSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickersTooMuch = new(ErrorCode, "STICKERS_TOO_MUCH");
 
       /// <summary>
       /// The provided sticker set is invalid.
       /// <code>
       /// messages.getStickerSet
       /// messages.installStickerSet
       /// messages.uninstallStickerSet
       /// stickers.addStickerToSet
       /// stickers.deleteStickerSet
       /// stickers.renameStickerSet
       /// stickers.setStickerSetThumb
       /// </code>
       /// </summary>
       public static readonly RpcError StickersetInvalid = new(ErrorCode, "STICKERSET_INVALID");
 
       /// <summary>
       /// 
       /// <code>
       /// stories.getStoriesByID
       /// </code>
       /// </summary>
       public static readonly RpcError StoriesNeverCreated = new(ErrorCode, "STORIES_NEVER_CREATED");
 
       /// <summary>
       /// You specified no story IDs.
       /// <code>
       /// stories.getStoriesByID
       /// stories.sendReaction
       /// </code>
       /// </summary>
       public static readonly RpcError StoryIdEmpty = new(ErrorCode, "STORY_ID_EMPTY");
 
       /// <summary>
       /// 
       /// <code>
       /// stories.sendStory
       /// </code>
       /// </summary>
       public static readonly RpcError StoryPeriodInvalid = new(ErrorCode, "STORY_PERIOD_INVALID");
 
       /// <summary>
       /// The switch_pm.text field was empty.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError SwitchPmTextEmpty = new(ErrorCode, "SWITCH_PM_TEXT_EMPTY");
 
       /// <summary>
       /// A takeout session has to be initialized, first.
       /// <code>
       /// contacts.getSaved
       /// </code>
       /// </summary>
       public static readonly RpcError TakeoutRequired = new(ErrorCode, "TAKEOUT_REQUIRED");
 
       /// <summary>
       /// An email reset was already requested.
       /// <code>
       /// auth.resetLoginEmail
       /// </code>
       /// </summary>
       public static readonly RpcError TaskAlreadyExists = new(ErrorCode, "TASK_ALREADY_EXISTS");
 
       /// <summary>
       /// The passed temporary key is already bound to another **perm_auth_key_id**.
       /// <code>
       /// auth.bindTempAuthKey
       /// </code>
       /// </summary>
       public static readonly RpcError TempAuthKeyAlreadyBound = new(ErrorCode, "TEMP_AUTH_KEY_ALREADY_BOUND");
 
       /// <summary>
       /// No temporary auth key provided.
       /// <code>
       /// auth.bindTempAuthKey
       /// </code>
       /// </summary>
       public static readonly RpcError TempAuthKeyEmpty = new(ErrorCode, "TEMP_AUTH_KEY_EMPTY");
 
       /// <summary>
       /// Invalid theme file provided.
       /// <code>
       /// account.uploadTheme
       /// </code>
       /// </summary>
       public static readonly RpcError ThemeFileInvalid = new(ErrorCode, "THEME_FILE_INVALID");
 
       /// <summary>
       /// Invalid theme format provided.
       /// <code>
       /// account.getTheme
       /// </code>
       /// </summary>
       public static readonly RpcError ThemeFormatInvalid = new(ErrorCode, "THEME_FORMAT_INVALID");
 
       /// <summary>
       /// Invalid theme provided.
       /// <code>
       /// account.getTheme
       /// account.updateTheme
       /// </code>
       /// </summary>
       public static readonly RpcError ThemeInvalid = new(ErrorCode, "THEME_INVALID");
 
       /// <summary>
       /// The theme's MIME type is invalid.
       /// <code>
       /// account.createTheme
       /// </code>
       /// </summary>
       public static readonly RpcError ThemeMimeInvalid = new(ErrorCode, "THEME_MIME_INVALID");
 
       /// <summary>
       /// The specified theme title is invalid.
       /// <code>
       /// account.createTheme
       /// </code>
       /// </summary>
       public static readonly RpcError ThemeTitleInvalid = new(ErrorCode, "THEME_TITLE_INVALID");
 
       /// <summary>
       /// The specified stickerpack title is invalid.
       /// <code>
       /// stickers.suggestShortName
       /// </code>
       /// </summary>
       public static readonly RpcError TitleInvalid = new(ErrorCode, "TITLE_INVALID");
 
       /// <summary>
       /// The temporary password is disabled.
       /// <code>
       /// account.getTmpPassword
       /// </code>
       /// </summary>
       public static readonly RpcError TmpPasswordDisabled = new(ErrorCode, "TMP_PASSWORD_DISABLED");
 
       /// <summary>
       /// The specified destination language is invalid.
       /// <code>
       /// messages.translateText
       /// </code>
       /// </summary>
       public static readonly RpcError ToLangInvalid = new(ErrorCode, "TO_LANG_INVALID");
 
       /// <summary>
       /// The specified token is empty.
       /// <code>
       /// account.registerDevice
       /// </code>
       /// </summary>
       public static readonly RpcError TokenEmpty = new(ErrorCode, "TOKEN_EMPTY");
 
       /// <summary>
       /// The provided token is invalid.
       /// <code>
       /// account.registerDevice
       /// account.unregisterDevice
       /// </code>
       /// </summary>
       public static readonly RpcError TokenInvalid = new(ErrorCode, "TOKEN_INVALID");
 
       /// <summary>
       /// The specified token type is invalid.
       /// <code>
       /// account.registerDevice
       /// </code>
       /// </summary>
       public static readonly RpcError TokenTypeInvalid = new(ErrorCode, "TOKEN_TYPE_INVALID");
 
       /// <summary>
       /// 
       /// <code>
       /// channels.editForumTopic
       /// </code>
       /// </summary>
       public static readonly RpcError TopicCloseSeparately = new(ErrorCode, "TOPIC_CLOSE_SEPARATELY");
 
       /// <summary>
       /// This topic was closed, you can't send messages to it anymore.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError TopicClosed = new(ErrorCode, "TOPIC_CLOSED");
 
       /// <summary>
       /// The specified topic was deleted.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError TopicDeleted = new(ErrorCode, "TOPIC_DELETED");
 
       /// <summary>
       /// The specified topic ID is invalid.
       /// <code>
       /// channels.deleteTopicHistory
       /// channels.editForumTopic
       /// messages.getDiscussionMessage
       /// messages.getReplies
       /// </code>
       /// </summary>
       public static readonly RpcError TopicIdInvalid = new(ErrorCode, "TOPIC_ID_INVALID");
 
       /// <summary>
       /// The updated topic info is equal to the current topic info, nothing was changed.
       /// <code>
       /// channels.editForumTopic
       /// </code>
       /// </summary>
       public static readonly RpcError TopicNotModified = new(ErrorCode, "TOPIC_NOT_MODIFIED");
 
       /// <summary>
       /// The specified topic title is empty.
       /// <code>
       /// channels.createForumTopic
       /// </code>
       /// </summary>
       public static readonly RpcError TopicTitleEmpty = new(ErrorCode, "TOPIC_TITLE_EMPTY");
 
       /// <summary>
       /// You specified no topic IDs.
       /// <code>
       /// channels.getForumTopicsByID
       /// </code>
       /// </summary>
       public static readonly RpcError TopicsEmpty = new(ErrorCode, "TOPICS_EMPTY");
 
       /// <summary>
       /// Audio transcription failed.
       /// <code>
       /// messages.transcribeAudio
       /// </code>
       /// </summary>
       public static readonly RpcError TranscriptionFailed = new(ErrorCode, "TRANSCRIPTION_FAILED");
 
       /// <summary>
       /// The provided TTL is invalid.
       /// <code>
       /// account.setAccountTTL
       /// account.setAuthorizationTTL
       /// </code>
       /// </summary>
       public static readonly RpcError TtlDaysInvalid = new(ErrorCode, "TTL_DAYS_INVALID");
 
       /// <summary>
       /// Invalid media Time To Live was provided.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError TtlMediaInvalid = new(ErrorCode, "TTL_MEDIA_INVALID");
 
       /// <summary>
       /// The specified TTL period is invalid.
       /// <code>
       /// channels.createChannel
       /// messages.setHistoryTTL
       /// </code>
       /// </summary>
       public static readonly RpcError TtlPeriodInvalid = new(ErrorCode, "TTL_PERIOD_INVALID");
 
       /// <summary>
       /// No top peer type was provided.
       /// <code>
       /// contacts.getTopPeers
       /// </code>
       /// </summary>
       public static readonly RpcError TypesEmpty = new(ErrorCode, "TYPES_EMPTY");
 
       /// <summary>
       /// Invalid until date provided.
       /// <code>
       /// messages.editChatDefaultBannedRights
       /// </code>
       /// </summary>
       public static readonly RpcError UntilDateInvalid = new(ErrorCode, "UNTIL_DATE_INVALID");
 
       /// <summary>
       /// Invalid URL provided.
       /// <code>
       /// messages.setBotCallbackAnswer
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError UrlInvalid = new(ErrorCode, "URL_INVALID");
 
       /// <summary>
       /// The specified usage limit is invalid.
       /// <code>
       /// messages.exportChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError UsageLimitInvalid = new(ErrorCode, "USAGE_LIMIT_INVALID");
 
       /// <summary>
       /// You're not an admin.
       /// <code>
       /// channels.editBanned
       /// </code>
       /// </summary>
       public static readonly RpcError UserAdminInvalid = new(ErrorCode, "USER_ADMIN_INVALID");
 
       /// <summary>
       /// You have already invited this user.
       /// <code>
       /// phone.inviteToGroupCall
       /// </code>
       /// </summary>
       public static readonly RpcError UserAlreadyInvited = new(ErrorCode, "USER_ALREADY_INVITED");
 
       /// <summary>
       /// The user is already in the group.
       /// <code>
       /// channels.joinChannel
       /// messages.addChatUser
       /// messages.hideChatJoinRequest
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError UserAlreadyParticipant = new(ErrorCode, "USER_ALREADY_PARTICIPANT");
 
       /// <summary>
       /// You're banned from sending messages in supergroups/channels.
       /// <code>
       /// channels.getChannels
       /// channels.getMessages
       /// channels.inviteToChannel
       /// channels.leaveChannel
       /// messages.editMessage
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// messages.sendReaction
       /// messages.setTyping
       /// messages.updatePinnedMessage
       /// messages.uploadMedia
       /// updates.getChannelDifference
       /// users.getUsers
       /// </code>
       /// </summary>
       public static readonly RpcError UserBannedInChannel = new(ErrorCode, "USER_BANNED_IN_CHANNEL");
 
       /// <summary>
       /// User blocked.
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// </code>
       /// </summary>
       public static readonly RpcError UserBlocked = new(ErrorCode, "USER_BLOCKED");
 
       /// <summary>
       /// Bots can only be admins in channels.
       /// <code>
       /// channels.inviteToChannel
       /// </code>
       /// </summary>
       public static readonly RpcError UserBot = new(ErrorCode, "USER_BOT");
 
       /// <summary>
       /// User accounts must provide the `bot` method parameter when calling this method. If there is no such method parameter, this method can only be invoked by bot accounts.
       /// <code>
       /// bots.answerWebhookJSONQuery
       /// bots.getBotCommands
       /// bots.getBotInfo
       /// bots.sendCustomRequest
       /// bots.setBotInfo
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError UserBotInvalid = new(ErrorCode, "USER_BOT_INVALID");
 
       /// <summary>
       /// This method can only be called by a bot.
       /// <code>
       /// bots.getBotMenuButton
       /// bots.setBotCommands
       /// bots.setBotGroupDefaultAdminRights
       /// messages.getGameHighScores
       /// messages.getInlineGameHighScores
       /// messages.setBotCallbackAnswer
       /// messages.setGameScore
       /// messages.setInlineGameScore
       /// users.setSecureValueErrors
       /// </code>
       /// </summary>
       public static readonly RpcError UserBotRequired = new(ErrorCode, "USER_BOT_REQUIRED");
 
       /// <summary>
       /// One of the users you tried to add is already in too many channels/supergroups.
       /// <code>
       /// channels.inviteToChannel
       /// channels.joinChannel
       /// messages.hideAllChatJoinRequests
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError UserChannelsTooMuch = new(ErrorCode, "USER_CHANNELS_TOO_MUCH");
 
       /// <summary>
       /// You can't leave this channel, because you're its creator.
       /// <code>
       /// channels.editAdmin
       /// channels.leaveChannel
       /// </code>
       /// </summary>
       public static readonly RpcError UserCreator = new(ErrorCode, "USER_CREATOR");
 
       /// <summary>
       /// The provided user ID is invalid.
       /// <code>
       /// auth.importAuthorization
       /// bots.setBotCommands
       /// channels.deleteUserHistory
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.editCreator
       /// channels.getParticipant
       /// channels.inviteToChannel
       /// channels.reportSpam
       /// messages.addChatUser
       /// messages.deleteChatUser
       /// messages.editChatAdmin
       /// messages.getCommonChats
       /// messages.hideChatJoinRequest
       /// messages.reportReaction
       /// messages.requestEncryption
       /// messages.search
       /// phone.requestCall
       /// photos.getUserPhotos
       /// photos.uploadContactProfilePhoto
       /// stickers.createStickerSet
       /// stories.getPinnedStories
       /// stories.getUserStories
       /// users.getFullUser
       /// users.setSecureValueErrors
       /// </code>
       /// </summary>
       public static readonly RpcError UserIdInvalid = new(ErrorCode, "USER_ID_INVALID");
 
       /// <summary>
       /// Invalid user provided.
       /// <code>
       /// help.editUserInfo
       /// help.getSupportName
       /// help.getUserInfo
       /// </code>
       /// </summary>
       public static readonly RpcError UserInvalid = new(ErrorCode, "USER_INVALID");
 
       /// <summary>
       /// You were blocked by this user.
       /// <code>
       /// messages.addChatUser
       /// messages.forwardMessages
       /// messages.sendEncryptedService
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setTyping
       /// msgs_ack
       /// msgs_state_req
       /// phone.requestCall
       /// </code>
       /// </summary>
       public static readonly RpcError UserIsBlocked = new(ErrorCode, "USER_IS_BLOCKED");
 
       /// <summary>
       /// Bots can't send messages to other bots.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setTyping
       /// </code>
       /// </summary>
       public static readonly RpcError UserIsBot = new(ErrorCode, "USER_IS_BOT");
 
       /// <summary>
       /// This user was kicked from this supergroup/channel.
       /// <code>
       /// channels.inviteToChannel
       /// </code>
       /// </summary>
       public static readonly RpcError UserKicked = new(ErrorCode, "USER_KICKED");
 
       /// <summary>
       /// The provided user is not a mutual contact.
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// messages.addChatUser
       /// messages.checkHistoryImportPeer
       /// </code>
       /// </summary>
       public static readonly RpcError UserNotMutualContact = new(ErrorCode, "USER_NOT_MUTUAL_CONTACT");
 
       /// <summary>
       /// You're not a member of this supergroup/channel.
       /// <code>
       /// -130635115
       /// channels.getParticipant
       /// channels.leaveChannel
       /// messages.deleteChatUser
       /// messages.editChatAdmin
       /// updates.getDifference
       /// </code>
       /// </summary>
       public static readonly RpcError UserNotParticipant = new(ErrorCode, "USER_NOT_PARTICIPANT");
 
       /// <summary>
       /// The specified user volume is invalid.
       /// <code>
       /// phone.editGroupCallParticipant
       /// </code>
       /// </summary>
       public static readonly RpcError UserVolumeInvalid = new(ErrorCode, "USER_VOLUME_INVALID");
 
       /// <summary>
       /// The provided username is not valid.
       /// <code>
       /// account.checkUsername
       /// account.toggleUsername
       /// account.updateUsername
       /// channels.checkUsername
       /// channels.toggleUsername
       /// channels.updateUsername
       /// contacts.resolveUsername
       /// help.getConfig
       /// updates.getDifference
       /// </code>
       /// </summary>
       public static readonly RpcError UsernameInvalid = new(ErrorCode, "USERNAME_INVALID");
 
       /// <summary>
       /// The username was not modified.
       /// <code>
       /// account.updateUsername
       /// channels.updateUsername
       /// </code>
       /// </summary>
       public static readonly RpcError UsernameNotModified = new(ErrorCode, "USERNAME_NOT_MODIFIED");
 
       /// <summary>
       /// The provided username is not occupied.
       /// <code>
       /// contacts.resolveUsername
       /// </code>
       /// </summary>
       public static readonly RpcError UsernameNotOccupied = new(ErrorCode, "USERNAME_NOT_OCCUPIED");
 
       /// <summary>
       /// The provided username is already occupied.
       /// <code>
       /// account.checkUsername
       /// account.updateUsername
       /// channels.checkUsername
       /// channels.updateUsername
       /// users.getFullUser
       /// </code>
       /// </summary>
       public static readonly RpcError UsernameOccupied = new(ErrorCode, "USERNAME_OCCUPIED");
 
       /// <summary>
       /// The specified username can be purchased on https://fragment.com.
       /// <code>
       /// account.checkUsername
       /// account.updateUsername
       /// channels.checkUsername
       /// channels.updateUsername
       /// </code>
       /// </summary>
       public static readonly RpcError UsernamePurchaseAvailable = new(ErrorCode, "USERNAME_PURCHASE_AVAILABLE");
 
       /// <summary>
       /// The maximum number of active usernames was reached.
       /// <code>
       /// account.toggleUsername
       /// channels.toggleUsername
       /// </code>
       /// </summary>
       public static readonly RpcError UsernamesActiveTooMuch = new(ErrorCode, "USERNAMES_ACTIVE_TOO_MUCH");
 
       /// <summary>
       /// You must have a profile picture to publish your geolocation.
       /// <code>
       /// contacts.getLocated
       /// </code>
       /// </summary>
       public static readonly RpcError UserpicUploadRequired = new(ErrorCode, "USERPIC_UPLOAD_REQUIRED");
 
       /// <summary>
       /// Not enough users (to create a chat, for example).
       /// <code>
       /// messages.createChat
       /// </code>
       /// </summary>
       public static readonly RpcError UsersTooFew = new(ErrorCode, "USERS_TOO_FEW");
 
       /// <summary>
       /// The maximum number of users has been exceeded (to create a chat, for example).
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// channels.joinChannel
       /// messages.addChatUser
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError UsersTooMuch = new(ErrorCode, "USERS_TOO_MUCH");
 
       /// <summary>
       /// The video's content type is invalid.
       /// <code>
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError VideoContentTypeInvalid = new(ErrorCode, "VIDEO_CONTENT_TYPE_INVALID");
 
       /// <summary>
       /// The specified video file is invalid.
       /// <code>
       /// photos.uploadProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError VideoFileInvalid = new(ErrorCode, "VIDEO_FILE_INVALID");
 
       /// <summary>
       /// The specified video title is empty.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError VideoTitleEmpty = new(ErrorCode, "VIDEO_TITLE_EMPTY");
 
       /// <summary>
       /// This user's privacy settings forbid you from sending voice messages.
       /// <code>
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError VoiceMessagesForbidden = new(ErrorCode, "VOICE_MESSAGES_FORBIDDEN");
 
       /// <summary>
       /// The specified wallpaper file is invalid.
       /// <code>
       /// account.uploadWallPaper
       /// </code>
       /// </summary>
       public static readonly RpcError WallpaperFileInvalid = new(ErrorCode, "WALLPAPER_FILE_INVALID");
 
       /// <summary>
       /// The specified wallpaper is invalid.
       /// <code>
       /// account.getMultiWallPapers
       /// account.getWallPaper
       /// account.installWallPaper
       /// account.saveWallPaper
       /// messages.setChatWallPaper
       /// </code>
       /// </summary>
       public static readonly RpcError WallpaperInvalid = new(ErrorCode, "WALLPAPER_INVALID");
 
       /// <summary>
       /// The specified wallpaper MIME type is invalid.
       /// <code>
       /// account.uploadWallPaper
       /// </code>
       /// </summary>
       public static readonly RpcError WallpaperMimeInvalid = new(ErrorCode, "WALLPAPER_MIME_INVALID");
 
       /// <summary>
       /// WC convert URL invalid.
       /// <code>
       /// messages.getWebPage
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError WcConvertUrlInvalid = new(ErrorCode, "WC_CONVERT_URL_INVALID");
 
       /// <summary>
       /// Invalid webdocument URL provided.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError WebDocumentInvalid = new(ErrorCode, "WEBDOCUMENT_INVALID");
 
       /// <summary>
       /// Invalid webdocument mime type provided.
       /// <code>
       /// messages.sendMedia
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError WebDocumentMimeInvalid = new(ErrorCode, "WEBDOCUMENT_MIME_INVALID");
 
       /// <summary>
       /// WebDocument is too big!
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError WebDocumentSizeTooBig = new(ErrorCode, "WEBDOCUMENT_SIZE_TOO_BIG");
 
       /// <summary>
       /// The specified webdocument URL is invalid.
       /// <code>
       /// messages.setInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError WebDocumentUrlInvalid = new(ErrorCode, "WEBDOCUMENT_URL_INVALID");
 
       /// <summary>
       /// Failure while fetching the webpage with cURL.
       /// <code>
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.uploadMedia
       /// </code>
       /// </summary>
       public static readonly RpcError WebpageCurlFailed = new(ErrorCode, "WEBPAGE_CURL_FAILED");
 
       /// <summary>
       /// Webpage media empty.
       /// <code>
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError WebpageMediaEmpty = new(ErrorCode, "WEBPAGE_MEDIA_EMPTY");
 
       /// <summary>
       /// The specified web push authentication secret is invalid.
       /// <code>
       /// account.registerDevice
       /// </code>
       /// </summary>
       public static readonly RpcError WebpushAuthInvalid = new(ErrorCode, "WEBPUSH_AUTH_INVALID");
 
       /// <summary>
       /// The specified web push elliptic curve Diffie-Hellman public key is invalid.
       /// <code>
       /// account.registerDevice
       /// </code>
       /// </summary>
       public static readonly RpcError WebpushKeyInvalid = new(ErrorCode, "WEBPUSH_KEY_INVALID");
 
       /// <summary>
       /// The specified web push token is invalid.
       /// <code>
       /// account.registerDevice
       /// </code>
       /// </summary>
       public static readonly RpcError WebpushTokenInvalid = new(ErrorCode, "WEBPUSH_TOKEN_INVALID");
 
       /// <summary>
       /// You blocked this user.
       /// <code>
       /// messages.addChatUser
       /// messages.forwardMessage
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendScreenshotNotification
       /// </code>
       /// </summary>
       public static readonly RpcError YouBlockedUser = new(ErrorCode, "YOU_BLOCKED_USER");
     }

    /// <summary>
    /// Rpc 401 errors
    /// </summary>
    public static class RpcErrors401
    {
       public const int ErrorCode = 401;
       /// <summary>
       /// The key is not registered in the system
       /// </summary>
       public static readonly RpcError AuthKeyUnregistered = new(ErrorCode, "AUTH_KEY_UNREGISTERED");
 
       /// <summary>
       /// The key is invalid
       /// </summary>
       public static readonly RpcError AuthKeyInvalid = new(ErrorCode, "AUTH_KEY_INVALID");
 
       /// <summary>
       /// The user has been deleted/deactivated
       /// </summary>
       public static readonly RpcError UserDeactivated = new(ErrorCode, "USER_DEACTIVATED");
 
       /// <summary>
       /// The authorization has been invalidated, because of the user terminating all sessions
       /// </summary>
       public static readonly RpcError SessionRevoked = new(ErrorCode, "SESSION_REVOKED");
 
       /// <summary>
       /// The authorization has expired
       /// </summary>
       public static readonly RpcError SessionExpired = new(ErrorCode, "SESSION_EXPIRED");
 
       /// <summary>
       /// The method is unavailable for temporary authorization key, not bound to permanent
       /// </summary>
       public static readonly RpcError AuthKeyPermEmpty = new(ErrorCode, "AUTH_KEY_PERM_EMPTY");
 
       /// <summary>
       /// 2FA is enabled, use a password to login.
       /// </summary>
       public static readonly RpcError SessionPasswordNeeded = new(ErrorCode, "SESSION_PASSWORD_NEEDED");
     }

    /// <summary>
    /// Rpc 403 errors
    /// </summary>
    public static class RpcErrors403
    {
       public const int ErrorCode = 403;
       /// <summary>
       /// 
       /// <code>
       /// messages.sendReaction
       /// </code>
       /// </summary>
       public static readonly RpcError AnonymousReactionsDisabled = new(ErrorCode, "ANONYMOUS_REACTIONS_DISABLED");
 
       /// <summary>
       /// Channel poll voters and reactions cannot be fetched to prevent deanonymization.
       /// <code>
       /// messages.getMessageReactionsList
       /// messages.getPollVotes
       /// </code>
       /// </summary>
       public static readonly RpcError BroadcastForbidden = new(ErrorCode, "BROADCAST_FORBIDDEN");
 
       /// <summary>
       /// channel/supergroup not available.
       /// <code>
       /// channels.getFullChannel
       /// channels.leaveChannel
       /// updates.getChannelDifference
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelPublicGroupNa = new(ErrorCode, "CHANNEL_PUBLIC_GROUP_NA");
 
       /// <summary>
       /// You do not have the rights to do this.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError ChatAdminInviteRequired = new(ErrorCode, "CHAT_ADMIN_INVITE_REQUIRED");
 
       /// <summary>
       /// You must be an admin in this chat to do this.
       /// <code>
       /// channels.deleteUserHistory
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.editPhoto
       /// channels.editTitle
       /// channels.getAdminLog
       /// channels.getParticipant
       /// channels.getParticipants
       /// channels.inviteToChannel
       /// channels.updateUsername
       /// messages.addChatUser
       /// messages.editMessage
       /// messages.forwardMessages
       /// messages.migrateChat
       /// messages.search
       /// messages.sendMedia
       /// messages.sendMessage
       /// stats.getBroadcastStats
       /// stats.getMegagroupStats
       /// </code>
       /// </summary>
       public static readonly RpcError ChatAdminRequired = new(ErrorCode, "CHAT_ADMIN_REQUIRED");
 
       /// <summary>
       /// You join the discussion group before commenting, see [here ](/api/discussion#requiring-users-to-join-the-group) for more info.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ChatGuestSendForbidden = new(ErrorCode, "CHAT_GUEST_SEND_FORBIDDEN");
 
       /// <summary>
       /// You can't send audio messages in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendAudiosForbidden = new(ErrorCode, "CHAT_SEND_AUDIOS_FORBIDDEN");
 
       /// <summary>
       /// You can't send documents in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendDocsForbidden = new(ErrorCode, "CHAT_SEND_DOCS_FORBIDDEN");
 
       /// <summary>
       /// You can't send a game to this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendGameForbidden = new(ErrorCode, "CHAT_SEND_GAME_FORBIDDEN");
 
       /// <summary>
       /// You can't send gifs in this chat.
       /// <code>
       /// messages.editMessage
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendGifsForbidden = new(ErrorCode, "CHAT_SEND_GIFS_FORBIDDEN");
 
       /// <summary>
       /// You can't send inline messages in this group.
       /// <code>
       /// messages.sendInlineBotResult
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendInlineForbidden = new(ErrorCode, "CHAT_SEND_INLINE_FORBIDDEN");
 
       /// <summary>
       /// You can't send media in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendMediaForbidden = new(ErrorCode, "CHAT_SEND_MEDIA_FORBIDDEN");
 
       /// <summary>
       /// You can't send photos in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendPhotosForbidden = new(ErrorCode, "CHAT_SEND_PHOTOS_FORBIDDEN");
 
       /// <summary>
       /// You can't send non-media (text) messages in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendPlainForbidden = new(ErrorCode, "CHAT_SEND_PLAIN_FORBIDDEN");
 
       /// <summary>
       /// You can't send polls in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendPollForbidden = new(ErrorCode, "CHAT_SEND_POLL_FORBIDDEN");
 
       /// <summary>
       /// You can't send stickers in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendStickersForbidden = new(ErrorCode, "CHAT_SEND_STICKERS_FORBIDDEN");
 
       /// <summary>
       /// You can't send videos in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendVideosForbidden = new(ErrorCode, "CHAT_SEND_VIDEOS_FORBIDDEN");
 
       /// <summary>
       /// You can't send voice recordings in this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// </code>
       /// </summary>
       public static readonly RpcError ChatSendVoicesForbidden = new(ErrorCode, "CHAT_SEND_VOICES_FORBIDDEN");
 
       /// <summary>
       /// You can't write in this chat.
       /// <code>
       /// account.updateProfile
       /// account.updateStatus
       /// channels.convertToGigagroup
       /// channels.createForumTopic
       /// channels.deleteChannel
       /// channels.deleteParticipantHistory
       /// channels.deleteUserHistory
       /// channels.editAdmin
       /// channels.editBanned
       /// channels.editCreator
       /// channels.editPhoto
       /// channels.editTitle
       /// channels.getAdminLog
       /// channels.inviteToChannel
       /// channels.setDiscussionGroup
       /// channels.updateUsername
       /// invokeWithLayer
       /// messages.addChatUser
       /// messages.editChatAbout
       /// messages.editChatDefaultBannedRights
       /// messages.editExportedChatInvite
       /// messages.editMessage
       /// messages.exportChatInvite
       /// messages.forwardMessages
       /// messages.getAdminsWithInvites
       /// messages.getChatInviteImporters
       /// messages.getDialogs
       /// messages.getExportedChatInvite
       /// messages.getExportedChatInvites
       /// messages.getMessageEditData
       /// messages.hideAllChatJoinRequests
       /// messages.hideChatJoinRequest
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// messages.sendReaction
       /// messages.setTyping
       /// messages.startBot
       /// messages.updatePinnedMessage
       /// messages.uploadMedia
       /// updates.getChannelDifference
       /// updates.getDifference
       /// </code>
       /// </summary>
       public static readonly RpcError ChatWriteForbidden = new(ErrorCode, "CHAT_WRITE_FORBIDDEN");
 
       /// <summary>
       /// Normal users can't edit invites that were created by bots.
       /// <code>
       /// messages.editExportedChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError EditBotInviteForbidden = new(ErrorCode, "EDIT_BOT_INVITE_FORBIDDEN");
 
       /// <summary>
       /// The groupcall has already started, you can join directly using [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).
       /// <code>
       /// phone.toggleGroupCallStartSubscription
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallAlreadyStarted = new(ErrorCode, "GROUPCALL_ALREADY_STARTED");
 
       /// <summary>
       /// The group call has already ended.
       /// <code>
       /// messages.setTyping
       /// phone.discardGroupCall
       /// phone.editGroupCallParticipant
       /// phone.editGroupCallTitle
       /// phone.getGroupCall
       /// phone.inviteToGroupCall
       /// phone.joinGroupCall
       /// phone.toggleGroupCallRecord
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallForbidden = new(ErrorCode, "GROUPCALL_FORBIDDEN");
 
       /// <summary>
       /// Only the inline bot can edit message.
       /// <code>
       /// messages.editMessage
       /// </code>
       /// </summary>
       public static readonly RpcError InlineBotRequired = new(ErrorCode, "INLINE_BOT_REQUIRED");
 
       /// <summary>
       /// Message author required.
       /// <code>
       /// messages.editMessage
       /// messages.getMessageEditData
       /// </code>
       /// </summary>
       public static readonly RpcError MessageAuthorRequired = new(ErrorCode, "MESSAGE_AUTHOR_REQUIRED");
 
       /// <summary>
       /// You can't delete one of the messages you tried to delete, most likely because it is a service message.
       /// <code>
       /// channels.deleteMessages
       /// messages.deleteMessages
       /// </code>
       /// </summary>
       public static readonly RpcError MessageDeleteForbidden = new(ErrorCode, "MESSAGE_DELETE_FORBIDDEN");
 
       /// <summary>
       /// Trying to enable a presentation, when the user hasn't joined the Video Chat with [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).
       /// <code>
       /// phone.joinGroupCallPresentation
       /// </code>
       /// </summary>
       public static readonly RpcError ParticipantJoinMissing = new(ErrorCode, "PARTICIPANT_JOIN_MISSING");
 
       /// <summary>
       /// Cast a vote in the poll before calling this method.
       /// <code>
       /// messages.getPollVotes
       /// </code>
       /// </summary>
       public static readonly RpcError PollVoteRequired = new(ErrorCode, "POLL_VOTE_REQUIRED");
 
       /// <summary>
       /// A premium account is required to execute this action.
       /// <code>
       /// messages.sendMedia
       /// messages.sendReaction
       /// messages.transcribeAudio
       /// </code>
       /// </summary>
       public static readonly RpcError PremiumAccountRequired = new(ErrorCode, "PREMIUM_ACCOUNT_REQUIRED");
 
       /// <summary>
       /// You can only export group call invite links for public chats or channels.
       /// <code>
       /// phone.exportGroupCallInvite
       /// </code>
       /// </summary>
       public static readonly RpcError PublicChannelMissing = new(ErrorCode, "PUBLIC_CHANNEL_MISSING");
 
       /// <summary>
       /// Your admin rights do not allow you to do this.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError RightForbidden = new(ErrorCode, "RIGHT_FORBIDDEN");
 
       /// <summary>
       /// You can't change your sensitive content settings.
       /// <code>
       /// account.setContentSettings
       /// </code>
       /// </summary>
       public static readonly RpcError SensitiveChangeForbidden = new(ErrorCode, "SENSITIVE_CHANGE_FORBIDDEN");
 
       /// <summary>
       /// A takeout session has to be initialized, first.
       /// <code>
       /// account.finishTakeoutSession
       /// channels.getLeftChannels
       /// contacts.getSaved
       /// </code>
       /// </summary>
       public static readonly RpcError TakeoutRequired = new(ErrorCode, "TAKEOUT_REQUIRED");
 
       /// <summary>
       /// User accounts must provide the `bot` method parameter when calling this method. If there is no such method parameter, this method can only be invoked by bot accounts.
       /// <code>
       /// bots.answerWebhookJSONQuery
       /// bots.sendCustomRequest
       /// messages.setInlineBotResults
       /// users.setSecureValueErrors
       /// </code>
       /// </summary>
       public static readonly RpcError UserBotInvalid = new(ErrorCode, "USER_BOT_INVALID");
 
       /// <summary>
       /// One of the users you tried to add is already in too many channels/supergroups.
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// messages.hideChatJoinRequest
       /// </code>
       /// </summary>
       public static readonly RpcError UserChannelsTooMuch = new(ErrorCode, "USER_CHANNELS_TOO_MUCH");
 
       /// <summary>
       /// You can't send this secret message because the other participant deleted their account.
       /// <code>
       /// messages.sendEncryptedService
       /// </code>
       /// </summary>
       public static readonly RpcError UserDeleted = new(ErrorCode, "USER_DELETED");
 
       /// <summary>
       /// Invalid user provided.
       /// <code>
       /// help.editUserInfo
       /// help.getSupportName
       /// help.getUserInfo
       /// </code>
       /// </summary>
       public static readonly RpcError UserInvalid = new(ErrorCode, "USER_INVALID");
 
       /// <summary>
       /// You were blocked by this user.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendEncrypted
       /// messages.sendEncryptedService
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setTyping
       /// phone.requestCall
       /// </code>
       /// </summary>
       public static readonly RpcError UserIsBlocked = new(ErrorCode, "USER_IS_BLOCKED");
 
       /// <summary>
       /// The provided user is not a mutual contact.
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// messages.addChatUser
       /// </code>
       /// </summary>
       public static readonly RpcError UserNotMutualContact = new(ErrorCode, "USER_NOT_MUTUAL_CONTACT");
 
       /// <summary>
       /// The user's privacy settings do not allow you to do this.
       /// <code>
       /// channels.editAdmin
       /// channels.inviteToChannel
       /// help.getConfig
       /// messages.addChatUser
       /// phone.requestCall
       /// </code>
       /// </summary>
       public static readonly RpcError UserPrivacyRestricted = new(ErrorCode, "USER_PRIVACY_RESTRICTED");
 
       /// <summary>
       /// You're spamreported, you can't create channels or chats.
       /// <code>
       /// channels.createChannel
       /// channels.editAdmin
       /// messages.createChat
       /// </code>
       /// </summary>
       public static readonly RpcError UserRestricted = new(ErrorCode, "USER_RESTRICTED");
 
       /// <summary>
       /// This user's privacy settings forbid you from sending voice messages.
       /// <code>
       /// messages.forwardMessages
       /// </code>
       /// </summary>
       public static readonly RpcError VoiceMessagesForbidden = new(ErrorCode, "VOICE_MESSAGES_FORBIDDEN");
 
       /// <summary>
       /// YOUR_PRIVACY_RESTRICTED
       /// <code>
       
       /// </code>
       /// </summary>
       public static readonly RpcError YourPrivacyRestricted = new(ErrorCode, "YOUR_PRIVACY_RESTRICTED");
 
       /// <summary>
       /// MESSAGE_TOO_OLD
       /// <code>
       
       /// </code>
       /// </summary>
       public static readonly RpcError MessageTooOld = new(ErrorCode, "MESSAGE_TOO_OLD");
     }

    /// <summary>
    /// Rpc 406 errors
    /// </summary>
    public static class RpcErrors406
    {
       public const int ErrorCode = 406;
       /// <summary>
       /// The other side of the call does not support any of the VoIP protocols supported by the local client, as specified by the `protocol.layer` and `protocol.library_versions` fields.
       /// <code>
       /// phone.acceptCall
       /// </code>
       /// </summary>
       public static readonly RpcError CallProtocolCompatLayerInvalid = new(ErrorCode, "CALL_PROTOCOL_COMPAT_LAYER_INVALID");
 
       /// <summary>
       /// You haven't joined this channel/supergroup.
       /// <code>
       /// channels.deleteChannel
       /// channels.deleteMessages
       /// channels.editBanned
       /// channels.getAdminLog
       /// channels.getChannels
       /// channels.getFullChannel
       /// channels.getMessages
       /// channels.getParticipant
       /// channels.getParticipants
       /// channels.inviteToChannel
       /// channels.joinChannel
       /// channels.leaveChannel
       /// channels.readHistory
       /// channels.readMessageContents
       /// messages.checkChatInvite
       /// messages.editMessage
       /// messages.forwardMessages
       /// messages.getHistory
       /// messages.getInlineBotResults
       /// messages.getMessagesViews
       /// messages.getPeerDialogs
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.setTyping
       /// updates.getChannelDifference
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelPrivate = new(ErrorCode, "CHANNEL_PRIVATE");
 
       /// <summary>
       /// Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).
       /// <code>
       /// channels.deleteChannel
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelTooLarge = new(ErrorCode, "CHANNEL_TOO_LARGE");
 
       /// <summary>
       /// You can't forward messages from a protected chat.
       /// <code>
       /// messages.forwardMessages
       /// </code>
       /// </summary>
       public static readonly RpcError ChatForwardsRestricted = new(ErrorCode, "CHAT_FORWARDS_RESTRICTED");
 
       /// <summary>
       /// The client has to be updated in order to support [file references](https://core.telegram.org/api/file_reference).
       /// <code>
       /// upload.getFile
       /// </code>
       /// </summary>
       public static readonly RpcError FilerefUpgradeNeeded = new(ErrorCode, "FILEREF_UPGRADE_NEEDED");
 
       /// <summary>
       /// You were just elected admin, you can't add or modify other admins yet.
       /// <code>
       /// channels.editAdmin
       /// </code>
       /// </summary>
       public static readonly RpcError FreshChangeAdminsForbidden = new(ErrorCode, "FRESH_CHANGE_ADMINS_FORBIDDEN");
 
       /// <summary>
       /// You can't change phone number right after logging in, please wait at least 24 hours.
       /// <code>
       /// account.sendChangePhoneCode
       /// </code>
       /// </summary>
       public static readonly RpcError FreshChangePhoneForbidden = new(ErrorCode, "FRESH_CHANGE_PHONE_FORBIDDEN");
 
       /// <summary>
       /// You can't logout other sessions if less than 24 hours have passed since you logged on the current session.
       /// <code>
       /// account.resetAuthorization
       /// account.setAuthorizationTTL
       /// auth.resetAuthorizations
       /// </code>
       /// </summary>
       public static readonly RpcError FreshResetAuthorisationForbidden = new(ErrorCode, "FRESH_RESET_AUTHORISATION_FORBIDDEN");
 
       /// <summary>
       /// The invite link has expired.
       /// <code>
       /// channels.joinChannel
       /// invokeWithLayer
       /// messages.checkChatInvite
       /// messages.importChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError InviteHashExpired = new(ErrorCode, "INVITE_HASH_EXPIRED");
 
       /// <summary>
       /// A detailed description of the error will be received separately as described [here ](https://core.telegram.org/api/errors#406-not-acceptable).
       /// <code>
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError PaymentUnsupported = new(ErrorCode, "PAYMENT_UNSUPPORTED");
 
       /// <summary>
       /// The phone number is invalid.
       /// <code>
       /// account.changePhone
       /// account.sendChangePhoneCode
       /// auth.cancelCode
       /// auth.checkPhone
       /// auth.resendCode
       /// auth.sendCode
       /// auth.signIn
       /// auth.signUp
       /// </code>
       /// </summary>
       public static readonly RpcError PhoneNumberInvalid = new(ErrorCode, "PHONE_NUMBER_INVALID");
 
       /// <summary>
       /// You have tried logging in too many times.
       /// <code>
       /// auth.sendCode
       /// </code>
       /// </summary>
       public static readonly RpcError PhonePasswordFlood = new(ErrorCode, "PHONE_PASSWORD_FLOOD");
 
       /// <summary>
       /// Import for this chat is already in progress, wait <c>{0}</c> minutes before starting a new one.
       /// <code>
       /// messages.initHistoryImport
       /// </code>
       /// </summary>
       public static readonly RpcError PreviousChatImportActiveWaitXmin = new(ErrorCode, "PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_{0}MIN");
 
       /// <summary>
       /// Returned when all available options for this type of number were already used (e.g. flash-call, then SMS, then this error might be returned to trigger a second resend).
       /// <code>
       /// auth.resendCode
       /// </code>
       /// </summary>
       public static readonly RpcError SendCodeUnavailable = new(ErrorCode, "SEND_CODE_UNAVAILABLE");
 
       /// <summary>
       /// The provided sticker set is invalid.
       /// <code>
       /// messages.getStickerSet
       /// messages.installStickerSet
       /// messages.uninstallStickerSet
       /// stickers.addStickerToSet
       /// </code>
       /// </summary>
       public static readonly RpcError StickersetInvalid = new(ErrorCode, "STICKERSET_INVALID");
 
       /// <summary>
       /// Provided stickerset can't be installed as group stickerset to prevent admin deanonymization.
       /// <code>
       /// channels.setStickers
       /// </code>
       /// </summary>
       public static readonly RpcError StickersetOwnerAnonymous = new(ErrorCode, "STICKERSET_OWNER_ANONYMOUS");
 
       /// <summary>
       /// This topic was closed, you can't send messages to it anymore.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError TopicClosed = new(ErrorCode, "TOPIC_CLOSED");
 
       /// <summary>
       /// The specified topic was deleted.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendMedia
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError TopicDeleted = new(ErrorCode, "TOPIC_DELETED");
 
       /// <summary>
       /// You're spamreported, you can't create channels or chats.
       /// <code>
       /// channels.createChannel
       /// messages.createChat
       /// </code>
       /// </summary>
       public static readonly RpcError UserRestricted = new(ErrorCode, "USER_RESTRICTED");
 
       /// <summary>
       /// You need to disable privacy settings for your profile picture in order to make your geolocation public.
       /// <code>
       /// contacts.getLocated
       /// </code>
       /// </summary>
       public static readonly RpcError UserpicPrivacyRequired = new(ErrorCode, "USERPIC_PRIVACY_REQUIRED");
 
       /// <summary>
       /// You must have a profile picture to publish your geolocation.
       /// <code>
       /// contacts.getLocated
       /// </code>
       /// </summary>
       public static readonly RpcError UserpicUploadRequired = new(ErrorCode, "USERPIC_UPLOAD_REQUIRED");
     }

    /// <summary>
    /// Rpc 420 errors
    /// </summary>
    public static class RpcErrors420
    {
       public const int ErrorCode = 420;
       /// <summary>
       /// Since this account is active and protected by a 2FA password, we will delete it in 1 week for security purposes. You can cancel this process at any time, you'll be able to reset your account in <c>{0}</c> seconds.
       /// <code>
       /// account.deleteAccount
       /// </code>
       /// </summary>
       public static readonly RpcError _2faConfirmWaitX = new(ErrorCode, "2FA_CONFIRM_WAIT_{0}");
 
       /// <summary>
       /// SlowMode is enabled in this chat: wait <c>{0}</c> seconds before sending another message to this chat.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// </code>
       /// </summary>
       public static readonly RpcError SlowModeWaitX = new(ErrorCode, "SLOWMODE_WAIT_{0}");
 
       /// <summary>
       /// Wait <c>{0}</c> seconds before initializing takeout.
       /// <code>
       /// account.initTakeoutSession
       /// </code>
       /// </summary>
       public static readonly RpcError TakeoutInitDelayX = new(ErrorCode, "TAKEOUT_INIT_DELAY_{0}");
     }

    /// <summary>
    /// Rpc 500 errors
    /// </summary>
    public static class RpcErrors500
    {
       public const int ErrorCode = 500;
       /// <summary>
       /// Restart the authorization process.
       /// <code>
       /// auth.sendCode
       /// auth.signIn
       /// </code>
       /// </summary>
       public static readonly RpcError AuthRestart = new(ErrorCode, "AUTH_RESTART");
 
       /// <summary>
       /// The call failed because the user is already making another call.
       /// <code>
       /// phone.acceptCall
       /// phone.discardCall
       /// </code>
       /// </summary>
       public static readonly RpcError CallOccupyFailed = new(ErrorCode, "CALL_OCCUPY_FAILED");
 
       /// <summary>
       /// A server-side timeout occurred while reuploading the file to the CDN DC.
       /// <code>
       /// upload.reuploadCdnFile
       /// </code>
       /// </summary>
       public static readonly RpcError CdnUploadTimeout = new(ErrorCode, "CDN_UPLOAD_TIMEOUT");
 
       /// <summary>
       /// 
       /// <code>
       /// channels.createChannel
       /// messages.migrateChat
       /// </code>
       /// </summary>
       public static readonly RpcError ChannelIdGenerateFailed = new(ErrorCode, "CHANNEL_ID_GENERATE_FAILED");
 
       /// <summary>
       /// Failure while generating the chat ID.
       /// <code>
       /// messages.createChat
       /// </code>
       /// </summary>
       public static readonly RpcError ChatIdGenerateFailed = new(ErrorCode, "CHAT_ID_GENERATE_FAILED");
 
       /// <summary>
       /// 
       /// <code>
       /// messages.checkChatInvite
       /// </code>
       /// </summary>
       public static readonly RpcError ChatMembersChannel = new(ErrorCode, "CHAT_MEMBERS_CHANNEL");
 
       /// <summary>
       /// 
       /// <code>
       /// messages.uploadMedia
       /// photos.updateProfilePhoto
       /// </code>
       /// </summary>
       public static readonly RpcError FileWriteEmpty = new(ErrorCode, "FILE_WRITE_EMPTY");
 
       /// <summary>
       /// 
       /// <code>
       /// phone.joinGroupCall
       /// </code>
       /// </summary>
       public static readonly RpcError GroupcallAddParticipantsFailed = new(ErrorCode, "GROUPCALL_ADD_PARTICIPANTS_FAILED");
 
       /// <summary>
       /// 
       /// <code>
       /// channels.joinChannel
       /// </code>
       /// </summary>
       public static readonly RpcError MemberChatAddFailed = new(ErrorCode, "MEMBER_CHAT_ADD_FAILED");
 
       /// <summary>
       /// 
       /// <code>
       /// auth.importLoginToken
       /// </code>
       /// </summary>
       public static readonly RpcError MemberNotFound = new(ErrorCode, "MEMBER_NOT_FOUND");
 
       /// <summary>
       /// A waiting call returned an error.
       /// <code>
       /// messages.editMessage
       /// messages.receivedQueue
       /// messages.sendEncrypted
       /// messages.sendEncryptedService
       /// messages.sendMessage
       /// </code>
       /// </summary>
       public static readonly RpcError MsgWaitFailed = new(ErrorCode, "MSG_WAIT_FAILED");
 
       /// <summary>
       /// Channel internal replication issues, try again later (treat this like an RPC_CALL_FAIL).
       /// <code>
       /// updates.getChannelDifference
       /// </code>
       /// </summary>
       public static readonly RpcError PersistentTimestampOutdated = new(ErrorCode, "PERSISTENT_TIMESTAMP_OUTDATED");
 
       /// <summary>
       /// You provided a random ID that was already used.
       /// <code>
       /// messages.forwardMessages
       /// messages.sendInlineBotResult
       /// messages.sendMedia
       /// messages.sendMessage
       /// messages.sendMultiMedia
       /// messages.startBot
       /// updates.getDifference
       /// </code>
       /// </summary>
       public static readonly RpcError RandomIdDuplicate = new(ErrorCode, "RANDOM_ID_DUPLICATE");
 
       /// <summary>
       /// Failure while signing in.
       /// <code>
       /// auth.signIn
       /// </code>
       /// </summary>
       public static readonly RpcError SignInFailed = new(ErrorCode, "SIGN_IN_FAILED");
     }

    /// <summary>
    /// Rpc -500 errors
    /// </summary>
    public static class RpcErrors_500
    {
       public const int ErrorCode = -500;
       /// <summary>
       /// Invalid msg_resend_req query.
       /// <code>
       /// msg_resend_req
       /// </code>
       /// </summary>
       public static readonly RpcError InvalidMsgResendReqQuery = new(ErrorCode, "Invalid msg_resend_req query");
 
       /// <summary>
       /// Invalid msgs_ack query.
       /// <code>
       /// msgs_ack
       /// </code>
       /// </summary>
       public static readonly RpcError InvalidMsgsAckQuery = new(ErrorCode, "Invalid msgs_ack query");
 
       /// <summary>
       /// Invalid msgs_state_req query.
       /// <code>
       /// msg_resend_req
       /// msgs_state_req
       /// req_pq_multi
       /// </code>
       /// </summary>
       public static readonly RpcError InvalidMsgsStateReqQuery = new(ErrorCode, "Invalid msgs_state_req query");
     }

    /// <summary>
    /// Rpc -503 errors
    /// </summary>
    public static class RpcErrors_503
    {
       public const int ErrorCode = -503;
       /// <summary>
       /// Timeout while fetching data.
       /// <code>
       /// messages.getBotCallbackAnswer
       /// messages.getInlineBotResults
       /// </code>
       /// </summary>
       public static readonly RpcError Timeout = new(ErrorCode, "Timeout");
     }
}
