// <auto-generated/>

using System;

namespace MyTelegram.Schema;

[TlObject(0x3072cfa1)]
public class TGzipPacked : IRequest<IObject>
{
    public uint ConstructorId => 0x3072cfa1;
    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write((uint)ConstructorId);
        writer.Write(PackedData);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        PackedData = reader.ReadBytes();
    }

    //public void Serialize(BinaryWriter bw)
    //{
    //    ComputeFlag();
    //    bw.Write(ConstructorId);
    //    bw.Serialize(PackedData);
    //}

    //public void Deserialize(BinaryReader br)
    //{
    //    PackedData = br.Deserialize<byte[]>();
    //}

    //public void Serialize(IBufferWriter<byte> writer)
    //{
    //    ComputeFlag();
    //    writer.Write(ConstructorId);
    //    writer.Serialize(PackedData);
    //}

    //public void Deserialize(ref ReadOnlySequence<byte> buffer)
    //{
    //    PackedData = buffer.Deserialize<byte[]>();
    //}

    public byte[] PackedData { get; set; }

    public void ComputeFlag()
    {

    }
}

public sealed class TContainerMessage : IObject
{
    public uint ConstructorId => 0x73f1f8dc;
   
    public void Deserialize(ref SequenceReader<byte> reader)
    {
        MsgId = reader.ReadInt64();
        SeqNo = reader.ReadInt32();
        Bytes = reader.ReadInt32();
        Body = reader.Read<IObject>();
    }

    //public void Serialize(BinaryWriter bw)
    //{
    //    //bw.Write(ConstructorId);

    //    bw.Write(MsgId);
    //    bw.Write(SeqNo);
    //    bw.Write(Bytes);
    //    Body.Serialize(bw);
    //}

    //public void Deserialize(BinaryReader br)
    //{
    //    MsgId = br.ReadInt64();
    //    SeqNo = br.ReadInt32();
    //    Bytes = br.ReadInt32();
    //    var objectSerializer = SerializerFactory.CreateSerializer<IObject>();
    //    Body = objectSerializer.Deserialize(br);
    //}

    public void Serialize(IBufferWriter<byte> writer)
    {
        writer.Write(MsgId);
        writer.Write(SeqNo);
        writer.Write(Bytes);
        Body.Serialize(writer);
    }

    //public void Deserialize(ref ReadOnlySequence<byte> buffer)
    //{
    //    MsgId = buffer.Deserialize<long>();
    //    SeqNo=buffer.Deserialize<int>();
    //    Bytes=buffer.Deserialize<int>();
    //    Body = buffer.Deserialize<IObject>();
    //}

    public long MsgId { get; set; }

    public int SeqNo { get; set; }

    public int Bytes { get; set; }

    public IObject Body { get; set; }
}