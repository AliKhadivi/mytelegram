// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Updates;

///<summary>
/// There are no new updates
/// See <a href="https://corefork.telegram.org/constructor/updates.channelDifferenceEmpty" />
///</summary>
[TlObject(0x3e11affb)]
public sealed class TChannelDifferenceEmpty : IChannelDifference,IEmpty
{
    public uint ConstructorId => 0x3e11affb;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether there are more updates that must be fetched (always false)
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Final { get; set; }

    ///<summary>
    /// The latest <a href="https://corefork.telegram.org/api/updates">PTS</a>
    ///</summary>
    public int Pts { get; set; }

    ///<summary>
    /// Clients are supposed to refetch the channel difference after timeout seconds have elapsed
    ///</summary>
    public int? Timeout { get; set; }

    public void ComputeFlag()
    {
        if (Final) { Flags[0] = true; }
        if (/*Timeout != 0 && */Timeout.HasValue) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Pts);
        if (Flags[1]) { writer.Write(Timeout.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Final = true; }
        Pts = reader.ReadInt32();
        if (Flags[1]) { Timeout = reader.ReadInt32(); }
    }
}