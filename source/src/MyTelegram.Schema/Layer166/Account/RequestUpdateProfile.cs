// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// Updates user profile.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 ABOUT_TOO_LONG About string too long.
/// 403 CHAT_WRITE_FORBIDDEN You can't write in this chat.
/// 400 FIRSTNAME_INVALID The first name is invalid.
/// See <a href="https://corefork.telegram.org/method/account.updateProfile" />
///</summary>
[TlObject(0x78515775)]
public sealed class RequestUpdateProfile : IRequest<MyTelegram.Schema.IUser>
{
    public uint ConstructorId => 0x78515775;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// New user first name
    ///</summary>
    public string? FirstName { get; set; }

    ///<summary>
    /// New user last name
    ///</summary>
    public string? LastName { get; set; }

    ///<summary>
    /// New bio
    ///</summary>
    public string? About { get; set; }

    public void ComputeFlag()
    {
        if (FirstName != null) { Flags[0] = true; }
        if (LastName != null) { Flags[1] = true; }
        if (About != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(FirstName); }
        if (Flags[1]) { writer.Write(LastName); }
        if (Flags[2]) { writer.Write(About); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { FirstName = reader.ReadString(); }
        if (Flags[1]) { LastName = reader.ReadString(); }
        if (Flags[2]) { About = reader.ReadString(); }
    }
}
