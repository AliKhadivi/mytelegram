// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// Private info associated to the password info (recovery email, telegram <a href="https://corefork.telegram.org/passport">passport</a> info &amp; so on)
/// See <a href="https://corefork.telegram.org/constructor/account.passwordSettings" />
///</summary>
[TlObject(0x9a5c33e5)]
public sealed class TPasswordSettings : IPasswordSettings
{
    public uint ConstructorId => 0x9a5c33e5;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/srp#email-verification">2FA Recovery email</a>
    ///</summary>
    public string? Email { get; set; }

    ///<summary>
    /// Telegram <a href="https://corefork.telegram.org/passport">passport</a> settings
    /// See <a href="https://corefork.telegram.org/type/SecureSecretSettings" />
    ///</summary>
    public MyTelegram.Schema.ISecureSecretSettings? SecureSettings { get; set; }

    public void ComputeFlag()
    {
        if (Email != null) { Flags[0] = true; }
        if (SecureSettings != null) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(Email); }
        if (Flags[1]) { writer.Write(SecureSettings); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Email = reader.ReadString(); }
        if (Flags[1]) { SecureSettings = reader.Read<MyTelegram.Schema.ISecureSecretSettings>(); }
    }
}