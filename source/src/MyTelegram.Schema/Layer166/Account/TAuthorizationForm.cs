// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// <a href="https://corefork.telegram.org/passport">Telegram Passport</a> authorization form
/// See <a href="https://corefork.telegram.org/constructor/account.authorizationForm" />
///</summary>
[TlObject(0xad2e1cd8)]
public sealed class TAuthorizationForm : IAuthorizationForm
{
    public uint ConstructorId => 0xad2e1cd8;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Required <a href="https://corefork.telegram.org/passport">Telegram Passport</a> documents
    ///</summary>
    public TVector<MyTelegram.Schema.ISecureRequiredType> RequiredTypes { get; set; }

    ///<summary>
    /// Already submitted <a href="https://corefork.telegram.org/passport">Telegram Passport</a> documents
    ///</summary>
    public TVector<MyTelegram.Schema.ISecureValue> Values { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/passport">Telegram Passport</a> errors
    ///</summary>
    public TVector<MyTelegram.Schema.ISecureValueError> Errors { get; set; }

    ///<summary>
    /// Info about the bot to which the form will be submitted
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    ///<summary>
    /// URL of the service's privacy policy
    ///</summary>
    public string? PrivacyPolicyUrl { get; set; }

    public void ComputeFlag()
    {
        if (PrivacyPolicyUrl != null) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(RequiredTypes);
        writer.Write(Values);
        writer.Write(Errors);
        writer.Write(Users);
        if (Flags[0]) { writer.Write(PrivacyPolicyUrl); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        RequiredTypes = reader.Read<TVector<MyTelegram.Schema.ISecureRequiredType>>();
        Values = reader.Read<TVector<MyTelegram.Schema.ISecureValue>>();
        Errors = reader.Read<TVector<MyTelegram.Schema.ISecureValueError>>();
        Users = reader.Read<TVector<MyTelegram.Schema.IUser>>();
        if (Flags[0]) { PrivacyPolicyUrl = reader.ReadString(); }
    }
}