// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Channel/supergroup info
/// See <a href="https://corefork.telegram.org/constructor/channel" />
///</summary>
[TlObject(0x1981ea7e)]
public sealed class TChannel : MyTelegram.Schema.IChat, ILayeredChannel
{
    public uint ConstructorId => 0x1981ea7e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the current user is the creator of this channel
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Creator { get; set; }

    ///<summary>
    /// Whether the current user has left this channel
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Left { get; set; }

    ///<summary>
    /// Is this a channel?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Broadcast { get; set; }

    ///<summary>
    /// Is this channel verified by telegram?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Verified { get; set; }

    ///<summary>
    /// Is this a supergroup?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Megagroup { get; set; }

    ///<summary>
    /// Whether viewing/writing in this channel for a reason (see <code>restriction_reason</code>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Restricted { get; set; }

    ///<summary>
    /// Whether signatures are enabled (channels)
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Signatures { get; set; }

    ///<summary>
    /// See <a href="https://corefork.telegram.org/api/min">min</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Min { get; set; }

    ///<summary>
    /// This channel/supergroup is probably a scam
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Scam { get; set; }

    ///<summary>
    /// Whether this channel has a private join link
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasLink { get; set; }

    ///<summary>
    /// Whether this chanel has a geoposition
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasGeo { get; set; }

    ///<summary>
    /// Whether slow mode is enabled for groups to prevent flood in chat
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool SlowmodeEnabled { get; set; }

    ///<summary>
    /// Whether a group call or livestream is currently active
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CallActive { get; set; }

    ///<summary>
    /// Whether there's anyone in the group call or livestream
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CallNotEmpty { get; set; }

    ///<summary>
    /// If set, this <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a> was reported by many users as a fake or scam: be careful when interacting with it.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Fake { get; set; }

    ///<summary>
    /// Whether this <a href="https://corefork.telegram.org/api/channel">supergroup</a> is a gigagroup
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Gigagroup { get; set; }

    ///<summary>
    /// Whether this channel or group is <a href="https://telegram.org/blog/protected-content-delete-by-date-and-more">protected</a>, thus does not allow forwarding messages from it
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Noforwards { get; set; }

    ///<summary>
    /// Whether a user needs to join the supergroup before they can send messages: can be false only for <a href="https://corefork.telegram.org/api/discussion">discussion groups »</a>, toggle using <a href="https://corefork.telegram.org/method/channels.toggleJoinToSend">channels.toggleJoinToSend</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool JoinToSend { get; set; }

    ///<summary>
    /// Whether a user's join request will have to be <a href="https://corefork.telegram.org/api/invites#join-requests">approved by administrators</a>, toggle using <a href="https://corefork.telegram.org/method/channels.toggleJoinRequest">channels.toggleJoinToSend</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool JoinRequest { get; set; }

    ///<summary>
    /// Whether this supergroup is a <a href="https://corefork.telegram.org/api/forum">forum</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Forum { get; set; }

    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags2 { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesHidden { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesHiddenMin { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesUnavailable { get; set; }

    ///<summary>
    /// ID of the channel
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Access hash
    ///</summary>
    public long? AccessHash { get; set; }

    ///<summary>
    /// Title
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Username
    ///</summary>
    public string? Username { get; set; }

    ///<summary>
    /// Profile photo
    /// See <a href="https://corefork.telegram.org/type/ChatPhoto" />
    ///</summary>
    public MyTelegram.Schema.IChatPhoto Photo { get; set; }

    ///<summary>
    /// Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// Contains the reason why access to this channel must be restricted.
    ///</summary>
    public TVector<MyTelegram.Schema.IRestrictionReason>? RestrictionReason { get; set; }

    ///<summary>
    /// Admin rights of the user in this channel (see <a href="https://corefork.telegram.org/api/rights">rights</a>)
    /// See <a href="https://corefork.telegram.org/type/ChatAdminRights" />
    ///</summary>
    public MyTelegram.Schema.IChatAdminRights? AdminRights { get; set; }

    ///<summary>
    /// Banned rights of the user in this channel (see <a href="https://corefork.telegram.org/api/rights">rights</a>)
    /// See <a href="https://corefork.telegram.org/type/ChatBannedRights" />
    ///</summary>
    public MyTelegram.Schema.IChatBannedRights? BannedRights { get; set; }

    ///<summary>
    /// Default chat rights (see <a href="https://corefork.telegram.org/api/rights">rights</a>)
    /// See <a href="https://corefork.telegram.org/type/ChatBannedRights" />
    ///</summary>
    public MyTelegram.Schema.IChatBannedRights? DefaultBannedRights { get; set; }

    ///<summary>
    /// Participant count
    ///</summary>
    public int? ParticipantsCount { get; set; }

    ///<summary>
    /// Additional usernames
    ///</summary>
    public TVector<MyTelegram.Schema.IUsername>? Usernames { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? StoriesMaxId { get; set; }
    public int? Color { get; set; }
    public long? BackgroundEmojiId { get; set; }

    public void ComputeFlag()
    {
        if (Creator) { Flags[0] = true; }
        if (Left) { Flags[2] = true; }
        if (Broadcast) { Flags[5] = true; }
        if (Verified) { Flags[7] = true; }
        if (Megagroup) { Flags[8] = true; }
        if (Restricted) { Flags[9] = true; }
        if (Signatures) { Flags[11] = true; }
        if (Min) { Flags[12] = true; }
        if (Scam) { Flags[19] = true; }
        if (HasLink) { Flags[20] = true; }
        if (HasGeo) { Flags[21] = true; }
        if (SlowmodeEnabled) { Flags[22] = true; }
        if (CallActive) { Flags[23] = true; }
        if (CallNotEmpty) { Flags[24] = true; }
        if (Fake) { Flags[25] = true; }
        if (Gigagroup) { Flags[26] = true; }
        if (Noforwards) { Flags[27] = true; }
        if (JoinToSend) { Flags[28] = true; }
        if (JoinRequest) { Flags[29] = true; }
        if (Forum) { Flags[30] = true; }
        if (StoriesHidden) { Flags2[1] = true; }
        if (StoriesHiddenMin) { Flags2[2] = true; }
        if (StoriesUnavailable) { Flags2[3] = true; }
        if (/*AccessHash != 0 &&*/ AccessHash.HasValue) { Flags[13] = true; }
        if (Username != null) { Flags[6] = true; }
        if (RestrictionReason?.Count > 0) { Flags[9] = true; }
        if (AdminRights != null) { Flags[14] = true; }
        if (BannedRights != null) { Flags[15] = true; }
        if (DefaultBannedRights != null) { Flags[18] = true; }
        if (/*ParticipantsCount != 0 && */ParticipantsCount.HasValue) { Flags[17] = true; }
        if (Usernames?.Count > 0) { Flags2[0] = true; }
        if (/*StoriesMaxId != 0 && */StoriesMaxId.HasValue) { Flags2[4] = true; }
        if (/*Color != 0 && */Color.HasValue) { Flags2[6] = true; }
        if (/*BackgroundEmojiId != 0 &&*/ BackgroundEmojiId.HasValue) { Flags2[5] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Flags2);
        writer.Write(Id);
        if (Flags[13]) { writer.Write(AccessHash.Value); }
        writer.Write(Title);
        if (Flags[6]) { writer.Write(Username); }
        writer.Write(Photo);
        writer.Write(Date);
        if (Flags[9]) { writer.Write(RestrictionReason); }
        if (Flags[14]) { writer.Write(AdminRights); }
        if (Flags[15]) { writer.Write(BannedRights); }
        if (Flags[18]) { writer.Write(DefaultBannedRights); }
        if (Flags[17]) { writer.Write(ParticipantsCount.Value); }
        if (Flags2[0]) { writer.Write(Usernames); }
        if (Flags2[4]) { writer.Write(StoriesMaxId.Value); }
        if (Flags2[6]) { writer.Write(Color.Value); }
        if (Flags2[5]) { writer.Write(BackgroundEmojiId.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Creator = true; }
        if (Flags[2]) { Left = true; }
        if (Flags[5]) { Broadcast = true; }
        if (Flags[7]) { Verified = true; }
        if (Flags[8]) { Megagroup = true; }
        if (Flags[9]) { Restricted = true; }
        if (Flags[11]) { Signatures = true; }
        if (Flags[12]) { Min = true; }
        if (Flags[19]) { Scam = true; }
        if (Flags[20]) { HasLink = true; }
        if (Flags[21]) { HasGeo = true; }
        if (Flags[22]) { SlowmodeEnabled = true; }
        if (Flags[23]) { CallActive = true; }
        if (Flags[24]) { CallNotEmpty = true; }
        if (Flags[25]) { Fake = true; }
        if (Flags[26]) { Gigagroup = true; }
        if (Flags[27]) { Noforwards = true; }
        if (Flags[28]) { JoinToSend = true; }
        if (Flags[29]) { JoinRequest = true; }
        if (Flags[30]) { Forum = true; }
        Flags2 = reader.ReadBitArray();
        if (Flags2[1]) { StoriesHidden = true; }
        if (Flags2[2]) { StoriesHiddenMin = true; }
        if (Flags2[3]) { StoriesUnavailable = true; }
        Id = reader.ReadInt64();
        if (Flags[13]) { AccessHash = reader.ReadInt64(); }
        Title = reader.ReadString();
        if (Flags[6]) { Username = reader.ReadString(); }
        Photo = reader.Read<MyTelegram.Schema.IChatPhoto>();
        Date = reader.ReadInt32();
        if (Flags[9]) { RestrictionReason = reader.Read<TVector<MyTelegram.Schema.IRestrictionReason>>(); }
        if (Flags[14]) { AdminRights = reader.Read<MyTelegram.Schema.IChatAdminRights>(); }
        if (Flags[15]) { BannedRights = reader.Read<MyTelegram.Schema.IChatBannedRights>(); }
        if (Flags[18]) { DefaultBannedRights = reader.Read<MyTelegram.Schema.IChatBannedRights>(); }
        if (Flags[17]) { ParticipantsCount = reader.ReadInt32(); }
        if (Flags2[0]) { Usernames = reader.Read<TVector<MyTelegram.Schema.IUsername>>(); }
        if (Flags2[4]) { StoriesMaxId = reader.ReadInt32(); }
        if (Flags2[6]) { Color = reader.ReadInt32(); }
        if (Flags2[5]) { BackgroundEmojiId = reader.ReadInt64(); }
    }
}