// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/inputReplyToMessage" />
///</summary>
[TlObject(0x73ec805)]
public sealed class TInputReplyToMessage : IInputReplyTo
{
    public uint ConstructorId => 0x73ec805;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int ReplyToMsgId { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? TopMsgId { get; set; }
    public MyTelegram.Schema.IInputPeer? ReplyToPeerId { get; set; }
    public string? QuoteText { get; set; }
    public TVector<MyTelegram.Schema.IMessageEntity>? QuoteEntities { get; set; }

    public void ComputeFlag()
    {
        if (/*TopMsgId != 0 && */TopMsgId.HasValue) { Flags[0] = true; }
        if (ReplyToPeerId != null) { Flags[1] = true; }
        if (QuoteText != null) { Flags[2] = true; }
        if (QuoteEntities?.Count > 0) { Flags[3] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ReplyToMsgId);
        if (Flags[0]) { writer.Write(TopMsgId.Value); }
        if (Flags[1]) { writer.Write(ReplyToPeerId); }
        if (Flags[2]) { writer.Write(QuoteText); }
        if (Flags[3]) { writer.Write(QuoteEntities); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        ReplyToMsgId = reader.ReadInt32();
        if (Flags[0]) { TopMsgId = reader.ReadInt32(); }
        if (Flags[1]) { ReplyToPeerId = reader.Read<MyTelegram.Schema.IInputPeer>(); }
        if (Flags[2]) { QuoteText = reader.ReadString(); }
        if (Flags[3]) { QuoteEntities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
    }
}