// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/storyItem" />
///</summary>
[TlObject(0x44c457ce)]
public sealed class TStoryItem : IStoryItem
{
    public uint ConstructorId => 0x44c457ce;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Pinned { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Public { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CloseFriends { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Min { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Noforwards { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Edited { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Contacts { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool SelectedContacts { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Out { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int ExpireDate { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string? Caption { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a>
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/MessageMedia" />
    ///</summary>
    public MyTelegram.Schema.IMessageMedia Media { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public TVector<MyTelegram.Schema.IMediaArea>? MediaAreas { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public TVector<MyTelegram.Schema.IPrivacyRule>? Privacy { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/StoryViews" />
    ///</summary>
    public MyTelegram.Schema.IStoryViews? Views { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/Reaction" />
    ///</summary>
    public MyTelegram.Schema.IReaction? SentReaction { get; set; }

    public void ComputeFlag()
    {
        if (Pinned) { Flags[5] = true; }
        if (Public) { Flags[7] = true; }
        if (CloseFriends) { Flags[8] = true; }
        if (Min) { Flags[9] = true; }
        if (Noforwards) { Flags[10] = true; }
        if (Edited) { Flags[11] = true; }
        if (Contacts) { Flags[12] = true; }
        if (SelectedContacts) { Flags[13] = true; }
        if (Out) { Flags[16] = true; }
        if (Caption != null) { Flags[0] = true; }
        if (Entities?.Count > 0) { Flags[1] = true; }
        if (MediaAreas?.Count > 0) { Flags[14] = true; }
        if (Privacy?.Count > 0) { Flags[2] = true; }
        if (Views != null) { Flags[3] = true; }
        if (SentReaction != null) { Flags[15] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Date);
        writer.Write(ExpireDate);
        if (Flags[0]) { writer.Write(Caption); }
        if (Flags[1]) { writer.Write(Entities); }
        writer.Write(Media);
        if (Flags[14]) { writer.Write(MediaAreas); }
        if (Flags[2]) { writer.Write(Privacy); }
        if (Flags[3]) { writer.Write(Views); }
        if (Flags[15]) { writer.Write(SentReaction); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[5]) { Pinned = true; }
        if (Flags[7]) { Public = true; }
        if (Flags[8]) { CloseFriends = true; }
        if (Flags[9]) { Min = true; }
        if (Flags[10]) { Noforwards = true; }
        if (Flags[11]) { Edited = true; }
        if (Flags[12]) { Contacts = true; }
        if (Flags[13]) { SelectedContacts = true; }
        if (Flags[16]) { Out = true; }
        Id = reader.ReadInt32();
        Date = reader.ReadInt32();
        ExpireDate = reader.ReadInt32();
        if (Flags[0]) { Caption = reader.ReadString(); }
        if (Flags[1]) { Entities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        Media = reader.Read<MyTelegram.Schema.IMessageMedia>();
        if (Flags[14]) { MediaAreas = reader.Read<TVector<MyTelegram.Schema.IMediaArea>>(); }
        if (Flags[2]) { Privacy = reader.Read<TVector<MyTelegram.Schema.IPrivacyRule>>(); }
        if (Flags[3]) { Views = reader.Read<MyTelegram.Schema.IStoryViews>(); }
        if (Flags[15]) { SentReaction = reader.Read<MyTelegram.Schema.IReaction>(); }
    }
}