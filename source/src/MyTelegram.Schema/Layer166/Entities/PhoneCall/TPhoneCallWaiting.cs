// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Incoming phone call
/// See <a href="https://corefork.telegram.org/constructor/phoneCallWaiting" />
///</summary>
[TlObject(0xc5226f17)]
public sealed class TPhoneCallWaiting : IPhoneCall
{
    public uint ConstructorId => 0xc5226f17;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Is this a video call
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Video { get; set; }

    ///<summary>
    /// Call ID
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Access hash
    ///</summary>
    public long AccessHash { get; set; }

    ///<summary>
    /// Date
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// Admin ID
    ///</summary>
    public long AdminId { get; set; }

    ///<summary>
    /// Participant ID
    ///</summary>
    public long ParticipantId { get; set; }

    ///<summary>
    /// Phone call protocol info
    /// See <a href="https://corefork.telegram.org/type/PhoneCallProtocol" />
    ///</summary>
    public MyTelegram.Schema.IPhoneCallProtocol Protocol { get; set; }

    ///<summary>
    /// When was the phone call received
    ///</summary>
    public int? ReceiveDate { get; set; }

    public void ComputeFlag()
    {
        if (Video) { Flags[6] = true; }
        if (/*ReceiveDate != 0 && */ReceiveDate.HasValue) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(AccessHash);
        writer.Write(Date);
        writer.Write(AdminId);
        writer.Write(ParticipantId);
        writer.Write(Protocol);
        if (Flags[0]) { writer.Write(ReceiveDate.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[6]) { Video = true; }
        Id = reader.ReadInt64();
        AccessHash = reader.ReadInt64();
        Date = reader.ReadInt32();
        AdminId = reader.ReadInt64();
        ParticipantId = reader.ReadInt64();
        Protocol = reader.Read<MyTelegram.Schema.IPhoneCallProtocol>();
        if (Flags[0]) { ReceiveDate = reader.ReadInt32(); }
    }
}