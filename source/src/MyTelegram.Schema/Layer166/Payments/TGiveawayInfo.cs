// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Payments;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/payments.giveawayInfo" />
///</summary>
[TlObject(0x4367daa0)]
public sealed class TGiveawayInfo : IGiveawayInfo
{
    public uint ConstructorId => 0x4367daa0;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Participating { get; set; }
    public bool PreparingResults { get; set; }
    public int StartDate { get; set; }
    public int? JoinedTooEarlyDate { get; set; }
    public long? AdminDisallowedChatId { get; set; }
    public string? DisallowedCountry { get; set; }

    public void ComputeFlag()
    {
        if (Participating) { Flags[0] = true; }
        if (PreparingResults) { Flags[3] = true; }
        if (/*JoinedTooEarlyDate != 0 && */JoinedTooEarlyDate.HasValue) { Flags[1] = true; }
        if (/*AdminDisallowedChatId != 0 &&*/ AdminDisallowedChatId.HasValue) { Flags[2] = true; }
        if (DisallowedCountry != null) { Flags[4] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(StartDate);
        if (Flags[1]) { writer.Write(JoinedTooEarlyDate.Value); }
        if (Flags[2]) { writer.Write(AdminDisallowedChatId.Value); }
        if (Flags[4]) { writer.Write(DisallowedCountry); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Participating = true; }
        if (Flags[3]) { PreparingResults = true; }
        StartDate = reader.ReadInt32();
        if (Flags[1]) { JoinedTooEarlyDate = reader.ReadInt32(); }
        if (Flags[2]) { AdminDisallowedChatId = reader.ReadInt64(); }
        if (Flags[4]) { DisallowedCountry = reader.ReadString(); }
    }
}