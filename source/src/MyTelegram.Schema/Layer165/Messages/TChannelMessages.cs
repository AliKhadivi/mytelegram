// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Channel messages
/// See <a href="https://corefork.telegram.org/constructor/messages.channelMessages" />
///</summary>
[TlObject(0xc776ba4e)]
public sealed class TChannelMessages : IMessages
{
    public uint ConstructorId => 0xc776ba4e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, returned results may be inexact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Inexact { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/updates">Event count after generation</a>
    ///</summary>
    public int Pts { get; set; }

    ///<summary>
    /// Total number of results were found server-side (may not be all included here)
    ///</summary>
    public int Count { get; set; }

    ///<summary>
    /// Indicates the absolute position of <code>messages[0]</code> within the total result set with count <code>count</code>. <br>This is useful, for example, if the result was fetched using <code>offset_id</code>, and we need to display a <code>progress/total</code> counter (like <code>photo 134 of 200</code>, for all media in a chat, we could simply use <code>photo ${offset_id_offset} of ${count}</code>.
    ///</summary>
    public int? OffsetIdOffset { get; set; }

    ///<summary>
    /// Found messages
    ///</summary>
    public TVector<MyTelegram.Schema.IMessage> Messages { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/forum#forum-topics">Forum topic</a> information
    ///</summary>
    public TVector<MyTelegram.Schema.IForumTopic> Topics { get; set; }

    ///<summary>
    /// Chats
    ///</summary>
    public TVector<MyTelegram.Schema.IChat> Chats { get; set; }

    ///<summary>
    /// Users
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (Inexact) { Flags[1] = true; }
        if (/*OffsetIdOffset != 0 && */OffsetIdOffset.HasValue) { Flags[2] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Pts);
        writer.Write(Count);
        if (Flags[2]) { writer.Write(OffsetIdOffset.Value); }
        writer.Write(Messages);
        writer.Write(Topics);
        writer.Write(Chats);
        writer.Write(Users);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[1]) { Inexact = true; }
        Pts = reader.ReadInt32();
        Count = reader.ReadInt32();
        if (Flags[2]) { OffsetIdOffset = reader.ReadInt32(); }
        Messages = reader.Read<TVector<MyTelegram.Schema.IMessage>>();
        Topics = reader.Read<TVector<MyTelegram.Schema.IForumTopic>>();
        Chats = reader.Read<TVector<MyTelegram.Schema.IChat>>();
        Users = reader.Read<TVector<MyTelegram.Schema.IUser>>();
    }
}