// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Indicates how many results would be found by a <a href="https://corefork.telegram.org/method/messages.search">messages.search</a> call with the same parameters
/// See <a href="https://corefork.telegram.org/constructor/messages.searchCounter" />
///</summary>
[TlObject(0xe844ebff)]
public sealed class TSearchCounter : ISearchCounter
{
    public uint ConstructorId => 0xe844ebff;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, the results may be inexact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Inexact { get; set; }

    ///<summary>
    /// Provided message filter
    /// See <a href="https://corefork.telegram.org/type/MessagesFilter" />
    ///</summary>
    public MyTelegram.Schema.IMessagesFilter Filter { get; set; }

    ///<summary>
    /// Number of results that were found server-side
    ///</summary>
    public int Count { get; set; }

    public void ComputeFlag()
    {
        if (Inexact) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Filter);
        writer.Write(Count);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[1]) { Inexact = true; }
        Filter = reader.Read<MyTelegram.Schema.IMessagesFilter>();
        Count = reader.ReadInt32();
    }
}