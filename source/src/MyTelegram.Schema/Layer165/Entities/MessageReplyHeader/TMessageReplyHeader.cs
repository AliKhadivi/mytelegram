// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Message replies and <a href="https://corefork.telegram.org/api/threads">thread</a> information
/// See <a href="https://corefork.telegram.org/constructor/messageReplyHeader" />
///</summary>
[TlObject(0xa6d57763)]
public sealed class TMessageReplyHeader : IMessageReplyHeader
{
    public uint ConstructorId => 0xa6d57763;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// This is a reply to a scheduled message.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReplyToScheduled { get; set; }

    ///<summary>
    /// Whether this message was sent in a <a href="https://corefork.telegram.org/api/forum#forum-topics">forum topic</a> (except for the General topic).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ForumTopic { get; set; }

    ///<summary>
    /// ID of message to which this message is replying
    ///</summary>
    public int ReplyToMsgId { get; set; }

    ///<summary>
    /// For replies sent in <a href="https://corefork.telegram.org/api/threads">channel discussion threads</a> of which the current user is not a member, the discussion group ID
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? ReplyToPeerId { get; set; }

    ///<summary>
    /// ID of the message that started this <a href="https://corefork.telegram.org/api/threads">message thread</a>
    ///</summary>
    public int? ReplyToTopId { get; set; }

    public void ComputeFlag()
    {
        if (ReplyToScheduled) { Flags[2] = true; }
        if (ForumTopic) { Flags[3] = true; }
        if (ReplyToPeerId != null) { Flags[0] = true; }
        if (/*ReplyToTopId != 0 && */ReplyToTopId.HasValue) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ReplyToMsgId);
        if (Flags[0]) { writer.Write(ReplyToPeerId); }
        if (Flags[1]) { writer.Write(ReplyToTopId.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[2]) { ReplyToScheduled = true; }
        if (Flags[3]) { ForumTopic = true; }
        ReplyToMsgId = reader.ReadInt32();
        if (Flags[0]) { ReplyToPeerId = reader.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags[1]) { ReplyToTopId = reader.ReadInt32(); }
    }
}