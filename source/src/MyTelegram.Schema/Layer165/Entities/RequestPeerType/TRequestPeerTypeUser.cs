// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Choose a user.
/// See <a href="https://corefork.telegram.org/constructor/requestPeerTypeUser" />
///</summary>
[TlObject(0x5f3b8a00)]
public sealed class TRequestPeerTypeUser : IRequestPeerType
{
    public uint ConstructorId => 0x5f3b8a00;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether to allow choosing only bots.
    /// See <a href="https://corefork.telegram.org/type/Bool" />
    ///</summary>
    public bool? Bot { get; set; }

    ///<summary>
    /// Whether to allow choosing only <a href="https://corefork.telegram.org/api/premium">Premium</a> users.
    /// See <a href="https://corefork.telegram.org/type/Bool" />
    ///</summary>
    public bool? Premium { get; set; }

    public void ComputeFlag()
    {
        if (Bot !=null) { Flags[0] = true; }
        if (Premium !=null) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(Bot.Value); }
        if (Flags[1]) { writer.Write(Premium.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Bot = reader.Read(); }
        if (Flags[1]) { Premium = reader.Read(); }
    }
}