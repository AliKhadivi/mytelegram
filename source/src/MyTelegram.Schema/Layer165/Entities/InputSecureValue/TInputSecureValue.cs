// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Secure value, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a>
/// See <a href="https://corefork.telegram.org/constructor/inputSecureValue" />
///</summary>
[TlObject(0xdb21d0a7)]
public sealed class TInputSecureValue : IInputSecureValue
{
    public uint ConstructorId => 0xdb21d0a7;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Secure <a href="https://corefork.telegram.org/passport">passport</a> value type
    /// See <a href="https://corefork.telegram.org/type/SecureValueType" />
    ///</summary>
    public MyTelegram.Schema.ISecureValueType Type { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">Telegram Passport</a> element data
    /// See <a href="https://corefork.telegram.org/type/SecureData" />
    ///</summary>
    public MyTelegram.Schema.ISecureData? Data { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the front side of the document
    /// See <a href="https://corefork.telegram.org/type/InputSecureFile" />
    ///</summary>
    public MyTelegram.Schema.IInputSecureFile? FrontSide { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the reverse side of the document
    /// See <a href="https://corefork.telegram.org/type/InputSecureFile" />
    ///</summary>
    public MyTelegram.Schema.IInputSecureFile? ReverseSide { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with a selfie of the user holding the document
    /// See <a href="https://corefork.telegram.org/type/InputSecureFile" />
    ///</summary>
    public MyTelegram.Schema.IInputSecureFile? Selfie { get; set; }

    ///<summary>
    /// Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with translated versions of the provided documents
    ///</summary>
    public TVector<MyTelegram.Schema.IInputSecureFile>? Translation { get; set; }

    ///<summary>
    /// Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with photos the of the documents
    ///</summary>
    public TVector<MyTelegram.Schema.IInputSecureFile>? Files { get; set; }

    ///<summary>
    /// Plaintext verified <a href="https://corefork.telegram.org/passport">passport</a> data
    /// See <a href="https://corefork.telegram.org/type/SecurePlainData" />
    ///</summary>
    public MyTelegram.Schema.ISecurePlainData? PlainData { get; set; }

    public void ComputeFlag()
    {
        if (Data != null) { Flags[0] = true; }
        if (FrontSide != null) { Flags[1] = true; }
        if (ReverseSide != null) { Flags[2] = true; }
        if (Selfie != null) { Flags[3] = true; }
        if (Translation?.Count > 0) { Flags[6] = true; }
        if (Files?.Count > 0) { Flags[4] = true; }
        if (PlainData != null) { Flags[5] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Type);
        if (Flags[0]) { writer.Write(Data); }
        if (Flags[1]) { writer.Write(FrontSide); }
        if (Flags[2]) { writer.Write(ReverseSide); }
        if (Flags[3]) { writer.Write(Selfie); }
        if (Flags[6]) { writer.Write(Translation); }
        if (Flags[4]) { writer.Write(Files); }
        if (Flags[5]) { writer.Write(PlainData); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Type = reader.Read<MyTelegram.Schema.ISecureValueType>();
        if (Flags[0]) { Data = reader.Read<MyTelegram.Schema.ISecureData>(); }
        if (Flags[1]) { FrontSide = reader.Read<MyTelegram.Schema.IInputSecureFile>(); }
        if (Flags[2]) { ReverseSide = reader.Read<MyTelegram.Schema.IInputSecureFile>(); }
        if (Flags[3]) { Selfie = reader.Read<MyTelegram.Schema.IInputSecureFile>(); }
        if (Flags[6]) { Translation = reader.Read<TVector<MyTelegram.Schema.IInputSecureFile>>(); }
        if (Flags[4]) { Files = reader.Read<TVector<MyTelegram.Schema.IInputSecureFile>>(); }
        if (Flags[5]) { PlainData = reader.Read<MyTelegram.Schema.ISecurePlainData>(); }
    }
}