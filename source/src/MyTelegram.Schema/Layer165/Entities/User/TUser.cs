// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Indicates info about a certain user
/// See <a href="https://corefork.telegram.org/constructor/user" />
///</summary>
[TlObject(0xabb5f120)]
public sealed class TUser : IUser, ILayeredUser
{
    public uint ConstructorId => 0xabb5f120;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether this user indicates the currently logged in user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Self { get; set; }

    ///<summary>
    /// Whether this user is a contact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Contact { get; set; }

    ///<summary>
    /// Whether this user is a mutual contact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool MutualContact { get; set; }

    ///<summary>
    /// Whether the account of this user was deleted
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Deleted { get; set; }

    ///<summary>
    /// Is this user a bot?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Bot { get; set; }

    ///<summary>
    /// Can the bot see all messages in groups?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BotChatHistory { get; set; }

    ///<summary>
    /// Can the bot be added to groups?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BotNochats { get; set; }

    ///<summary>
    /// Whether this user is verified
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Verified { get; set; }

    ///<summary>
    /// Access to this user must be restricted for the reason specified in <code>restriction_reason</code>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Restricted { get; set; }

    ///<summary>
    /// See <a href="https://corefork.telegram.org/api/min">min</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Min { get; set; }

    ///<summary>
    /// Whether the bot can request our geolocation in inline mode
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BotInlineGeo { get; set; }

    ///<summary>
    /// Whether this is an official support user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Support { get; set; }

    ///<summary>
    /// This may be a scam user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Scam { get; set; }

    ///<summary>
    /// If set, the profile picture for this user should be refetched
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ApplyMinPhoto { get; set; }

    ///<summary>
    /// If set, this user was reported by many users as a fake or scam user: be careful when interacting with them.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Fake { get; set; }

    ///<summary>
    /// Whether this bot offers an <a href="https://corefork.telegram.org/api/bots/attach">attachment menu web app</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BotAttachMenu { get; set; }

    ///<summary>
    /// Whether this user is a Telegram Premium user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Premium { get; set; }

    ///<summary>
    /// Whether we installed the <a href="https://corefork.telegram.org/api/bots/attach">attachment menu web app</a> offered by this bot
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AttachMenuEnabled { get; set; }

    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags2 { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether we can edit the profile picture, name, about text and description of this bot because we own it.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BotCanEdit { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CloseFriend { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesHidden { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesUnavailable { get; set; }

    ///<summary>
    /// ID of the user
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Access hash of the user
    ///</summary>
    public long? AccessHash { get; set; }

    ///<summary>
    /// First name
    ///</summary>
    public string? FirstName { get; set; }

    ///<summary>
    /// Last name
    ///</summary>
    public string? LastName { get; set; }

    ///<summary>
    /// Username
    ///</summary>
    public string? Username { get; set; }

    ///<summary>
    /// Phone number
    ///</summary>
    public string? Phone { get; set; }

    ///<summary>
    /// Profile picture of user
    /// See <a href="https://corefork.telegram.org/type/UserProfilePhoto" />
    ///</summary>
    public MyTelegram.Schema.IUserProfilePhoto? Photo { get; set; }

    ///<summary>
    /// Online status of user
    /// See <a href="https://corefork.telegram.org/type/UserStatus" />
    ///</summary>
    public MyTelegram.Schema.IUserStatus? Status { get; set; }

    ///<summary>
    /// Version of the <a href="https://corefork.telegram.org/constructor/userFull">bot_info field in userFull</a>, incremented every time it changes
    ///</summary>
    public int? BotInfoVersion { get; set; }

    ///<summary>
    /// Contains the reason why access to this user must be restricted.
    ///</summary>
    public TVector<MyTelegram.Schema.IRestrictionReason>? RestrictionReason { get; set; }

    ///<summary>
    /// Inline placeholder for this inline bot
    ///</summary>
    public string? BotInlinePlaceholder { get; set; }

    ///<summary>
    /// Language code of the user
    ///</summary>
    public string? LangCode { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/emoji-status">Emoji status</a>
    /// See <a href="https://corefork.telegram.org/type/EmojiStatus" />
    ///</summary>
    public MyTelegram.Schema.IEmojiStatus? EmojiStatus { get; set; }

    ///<summary>
    /// Additional usernames
    ///</summary>
    public TVector<MyTelegram.Schema.IUsername>? Usernames { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? StoriesMaxId { get; set; }

    public void ComputeFlag()
    {
        if (Self) { Flags[10] = true; }
        if (Contact) { Flags[11] = true; }
        if (MutualContact) { Flags[12] = true; }
        if (Deleted) { Flags[13] = true; }
        if (Bot) { Flags[14] = true; }
        if (BotChatHistory) { Flags[15] = true; }
        if (BotNochats) { Flags[16] = true; }
        if (Verified) { Flags[17] = true; }
        if (Restricted) { Flags[18] = true; }
        if (Min) { Flags[20] = true; }
        if (BotInlineGeo) { Flags[21] = true; }
        if (Support) { Flags[23] = true; }
        if (Scam) { Flags[24] = true; }
        if (ApplyMinPhoto) { Flags[25] = true; }
        if (Fake) { Flags[26] = true; }
        if (BotAttachMenu) { Flags[27] = true; }
        if (Premium) { Flags[28] = true; }
        if (AttachMenuEnabled) { Flags[29] = true; }
        if (BotCanEdit) { Flags2[1] = true; }
        if (CloseFriend) { Flags2[2] = true; }
        if (StoriesHidden) { Flags2[3] = true; }
        if (StoriesUnavailable) { Flags2[4] = true; }
        if (/*AccessHash != 0 &&*/ AccessHash.HasValue) { Flags[0] = true; }
        if (FirstName != null) { Flags[1] = true; }
        if (LastName != null) { Flags[2] = true; }
        if (Username != null) { Flags[3] = true; }
        if (Phone != null) { Flags[4] = true; }
        if (Photo != null) { Flags[5] = true; }
        if (Status != null) { Flags[6] = true; }
        if (/*BotInfoVersion != 0 && */BotInfoVersion.HasValue) { Flags[14] = true; }
        if (RestrictionReason?.Count > 0) { Flags[18] = true; }
        if (BotInlinePlaceholder != null) { Flags[19] = true; }
        if (LangCode != null) { Flags[22] = true; }
        if (EmojiStatus != null) { Flags[30] = true; }
        if (Usernames?.Count > 0) { Flags2[0] = true; }
        if (/*StoriesMaxId != 0 && */StoriesMaxId.HasValue) { Flags2[5] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Flags2);
        writer.Write(Id);
        if (Flags[0]) { writer.Write(AccessHash.Value); }
        if (Flags[1]) { writer.Write(FirstName); }
        if (Flags[2]) { writer.Write(LastName); }
        if (Flags[3]) { writer.Write(Username); }
        if (Flags[4]) { writer.Write(Phone); }
        if (Flags[5]) { writer.Write(Photo); }
        if (Flags[6]) { writer.Write(Status); }
        if (Flags[14]) { writer.Write(BotInfoVersion.Value); }
        if (Flags[18]) { writer.Write(RestrictionReason); }
        if (Flags[19]) { writer.Write(BotInlinePlaceholder); }
        if (Flags[22]) { writer.Write(LangCode); }
        if (Flags[30]) { writer.Write(EmojiStatus); }
        if (Flags2[0]) { writer.Write(Usernames); }
        if (Flags2[5]) { writer.Write(StoriesMaxId.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[10]) { Self = true; }
        if (Flags[11]) { Contact = true; }
        if (Flags[12]) { MutualContact = true; }
        if (Flags[13]) { Deleted = true; }
        if (Flags[14]) { Bot = true; }
        if (Flags[15]) { BotChatHistory = true; }
        if (Flags[16]) { BotNochats = true; }
        if (Flags[17]) { Verified = true; }
        if (Flags[18]) { Restricted = true; }
        if (Flags[20]) { Min = true; }
        if (Flags[21]) { BotInlineGeo = true; }
        if (Flags[23]) { Support = true; }
        if (Flags[24]) { Scam = true; }
        if (Flags[25]) { ApplyMinPhoto = true; }
        if (Flags[26]) { Fake = true; }
        if (Flags[27]) { BotAttachMenu = true; }
        if (Flags[28]) { Premium = true; }
        if (Flags[29]) { AttachMenuEnabled = true; }
        Flags2 = reader.ReadBitArray();
        if (Flags2[1]) { BotCanEdit = true; }
        if (Flags2[2]) { CloseFriend = true; }
        if (Flags2[3]) { StoriesHidden = true; }
        if (Flags2[4]) { StoriesUnavailable = true; }
        Id = reader.ReadInt64();
        if (Flags[0]) { AccessHash = reader.ReadInt64(); }
        if (Flags[1]) { FirstName = reader.ReadString(); }
        if (Flags[2]) { LastName = reader.ReadString(); }
        if (Flags[3]) { Username = reader.ReadString(); }
        if (Flags[4]) { Phone = reader.ReadString(); }
        if (Flags[5]) { Photo = reader.Read<MyTelegram.Schema.IUserProfilePhoto>(); }
        if (Flags[6]) { Status = reader.Read<MyTelegram.Schema.IUserStatus>(); }
        if (Flags[14]) { BotInfoVersion = reader.ReadInt32(); }
        if (Flags[18]) { RestrictionReason = reader.Read<TVector<MyTelegram.Schema.IRestrictionReason>>(); }
        if (Flags[19]) { BotInlinePlaceholder = reader.ReadString(); }
        if (Flags[22]) { LangCode = reader.ReadString(); }
        if (Flags[30]) { EmojiStatus = reader.Read<MyTelegram.Schema.IEmojiStatus>(); }
        if (Flags2[0]) { Usernames = reader.Read<TVector<MyTelegram.Schema.IUsername>>(); }
        if (Flags2[5]) { StoriesMaxId = reader.ReadInt32(); }
    }
}