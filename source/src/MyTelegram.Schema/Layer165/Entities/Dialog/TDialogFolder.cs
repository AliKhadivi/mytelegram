// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Dialog in folder
/// See <a href="https://corefork.telegram.org/constructor/dialogFolder" />
///</summary>
[TlObject(0x71bd134c)]
public sealed class TDialogFolder : IDialog
{
    public uint ConstructorId => 0x71bd134c;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Is this folder pinned
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Pinned { get; set; }

    ///<summary>
    /// The folder
    /// See <a href="https://corefork.telegram.org/type/Folder" />
    ///</summary>
    public MyTelegram.Schema.IFolder Folder { get; set; }

    ///<summary>
    /// Peer in folder
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer Peer { get; set; }

    ///<summary>
    /// Latest message ID of dialog
    ///</summary>
    public int TopMessage { get; set; }

    ///<summary>
    /// Number of unread muted peers in folder
    ///</summary>
    public int UnreadMutedPeersCount { get; set; }

    ///<summary>
    /// Number of unread unmuted peers in folder
    ///</summary>
    public int UnreadUnmutedPeersCount { get; set; }

    ///<summary>
    /// Number of unread messages from muted peers in folder
    ///</summary>
    public int UnreadMutedMessagesCount { get; set; }

    ///<summary>
    /// Number of unread messages from unmuted peers in folder
    ///</summary>
    public int UnreadUnmutedMessagesCount { get; set; }

    public void ComputeFlag()
    {
        if (Pinned) { Flags[2] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Folder);
        writer.Write(Peer);
        writer.Write(TopMessage);
        writer.Write(UnreadMutedPeersCount);
        writer.Write(UnreadUnmutedPeersCount);
        writer.Write(UnreadMutedMessagesCount);
        writer.Write(UnreadUnmutedMessagesCount);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[2]) { Pinned = true; }
        Folder = reader.Read<MyTelegram.Schema.IFolder>();
        Peer = reader.Read<MyTelegram.Schema.IPeer>();
        TopMessage = reader.ReadInt32();
        UnreadMutedPeersCount = reader.ReadInt32();
        UnreadUnmutedPeersCount = reader.ReadInt32();
        UnreadMutedMessagesCount = reader.ReadInt32();
        UnreadUnmutedMessagesCount = reader.ReadInt32();
    }
}