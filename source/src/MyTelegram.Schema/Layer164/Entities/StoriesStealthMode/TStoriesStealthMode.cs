// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/storiesStealthMode" />
///</summary>
[TlObject(0x712e27fd)]
public sealed class TStoriesStealthMode : IStoriesStealthMode
{
    public uint ConstructorId => 0x712e27fd;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? ActiveUntilDate { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? CooldownUntilDate { get; set; }

    public void ComputeFlag()
    {
        if (/*ActiveUntilDate != 0 && */ActiveUntilDate.HasValue) { Flags[0] = true; }
        if (/*CooldownUntilDate != 0 && */CooldownUntilDate.HasValue) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(ActiveUntilDate.Value); }
        if (Flags[1]) { writer.Write(CooldownUntilDate.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { ActiveUntilDate = reader.ReadInt32(); }
        if (Flags[1]) { CooldownUntilDate = reader.ReadInt32(); }
    }
}