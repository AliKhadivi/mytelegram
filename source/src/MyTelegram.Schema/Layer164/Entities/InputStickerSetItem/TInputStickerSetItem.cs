// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Sticker in a stickerset
/// See <a href="https://corefork.telegram.org/constructor/inputStickerSetItem" />
///</summary>
[TlObject(0x32da9e9c)]
public sealed class TInputStickerSetItem : IInputStickerSetItem
{
    public uint ConstructorId => 0x32da9e9c;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// The sticker
    /// See <a href="https://corefork.telegram.org/type/InputDocument" />
    ///</summary>
    public MyTelegram.Schema.IInputDocument Document { get; set; }

    ///<summary>
    /// Associated emoji
    ///</summary>
    public string Emoji { get; set; }

    ///<summary>
    /// Coordinates for mask sticker
    /// See <a href="https://corefork.telegram.org/type/MaskCoords" />
    ///</summary>
    public MyTelegram.Schema.IMaskCoords? MaskCoords { get; set; }

    ///<summary>
    /// Set of keywords, separated by commas (can't be provided for mask stickers)
    ///</summary>
    public string? Keywords { get; set; }

    public void ComputeFlag()
    {
        if (MaskCoords != null) { Flags[0] = true; }
        if (Keywords != null) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Document);
        writer.Write(Emoji);
        if (Flags[0]) { writer.Write(MaskCoords); }
        if (Flags[1]) { writer.Write(Keywords); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Document = reader.Read<MyTelegram.Schema.IInputDocument>();
        Emoji = reader.ReadString();
        if (Flags[0]) { MaskCoords = reader.Read<MyTelegram.Schema.IMaskCoords>(); }
        if (Flags[1]) { Keywords = reader.ReadString(); }
    }
}