// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/wallpapers">wallpaper</a> based on an image.
/// See <a href="https://corefork.telegram.org/constructor/wallPaper" />
///</summary>
[TlObject(0xa437c3ed)]
public sealed class TWallPaper : IWallPaper
{
    public uint ConstructorId => 0xa437c3ed;
    ///<summary>
    /// Identifier
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether we created this wallpaper
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Creator { get; set; }

    ///<summary>
    /// Whether this is the default wallpaper
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Default { get; set; }

    ///<summary>
    /// Whether this is a <a href="https://corefork.telegram.org/api/wallpapers#pattern-wallpapers">pattern wallpaper »</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Pattern { get; set; }

    ///<summary>
    /// Whether this wallpaper should be used in dark mode.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Dark { get; set; }

    ///<summary>
    /// Access hash
    ///</summary>
    public long AccessHash { get; set; }

    ///<summary>
    /// Unique wallpaper ID, used when generating <a href="https://corefork.telegram.org/api/links#wallpaper-links">wallpaper links</a> or <a href="https://corefork.telegram.org/api/wallpapers">importing wallpaper links</a>.
    ///</summary>
    public string Slug { get; set; }

    ///<summary>
    /// The actual wallpaper
    /// See <a href="https://corefork.telegram.org/type/Document" />
    ///</summary>
    public MyTelegram.Schema.IDocument Document { get; set; }

    ///<summary>
    /// Info on how to generate the wallpaper, according to <a href="https://corefork.telegram.org/api/wallpapers">these instructions »</a>.
    /// See <a href="https://corefork.telegram.org/type/WallPaperSettings" />
    ///</summary>
    public MyTelegram.Schema.IWallPaperSettings? Settings { get; set; }

    public void ComputeFlag()
    {
        if (Creator) { Flags[0] = true; }
        if (Default) { Flags[1] = true; }
        if (Pattern) { Flags[3] = true; }
        if (Dark) { Flags[4] = true; }
        if (Settings != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Id);
        writer.Write(Flags);
        writer.Write(AccessHash);
        writer.Write(Slug);
        writer.Write(Document);
        if (Flags[2]) { writer.Write(Settings); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Id = reader.ReadInt64();
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Creator = true; }
        if (Flags[1]) { Default = true; }
        if (Flags[3]) { Pattern = true; }
        if (Flags[4]) { Dark = true; }
        AccessHash = reader.ReadInt64();
        Slug = reader.ReadString();
        Document = reader.Read<MyTelegram.Schema.IDocument>();
        if (Flags[2]) { Settings = reader.Read<MyTelegram.Schema.IWallPaperSettings>(); }
    }
}