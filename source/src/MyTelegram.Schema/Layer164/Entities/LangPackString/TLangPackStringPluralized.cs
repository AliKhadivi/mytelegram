// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A language pack string which has different forms based on the number of some object it mentions. See <a href="https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html">https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html</a> for more info
/// See <a href="https://corefork.telegram.org/constructor/langPackStringPluralized" />
///</summary>
[TlObject(0x6c47ac9f)]
public sealed class TLangPackStringPluralized : ILangPackString
{
    public uint ConstructorId => 0x6c47ac9f;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Localization key
    ///</summary>
    public string Key { get; set; }

    ///<summary>
    /// Value for zero objects
    ///</summary>
    public string? ZeroValue { get; set; }

    ///<summary>
    /// Value for one object
    ///</summary>
    public string? OneValue { get; set; }

    ///<summary>
    /// Value for two objects
    ///</summary>
    public string? TwoValue { get; set; }

    ///<summary>
    /// Value for a few objects
    ///</summary>
    public string? FewValue { get; set; }

    ///<summary>
    /// Value for many objects
    ///</summary>
    public string? ManyValue { get; set; }

    ///<summary>
    /// Default value
    ///</summary>
    public string OtherValue { get; set; }

    public void ComputeFlag()
    {
        if (ZeroValue != null) { Flags[0] = true; }
        if (OneValue != null) { Flags[1] = true; }
        if (TwoValue != null) { Flags[2] = true; }
        if (FewValue != null) { Flags[3] = true; }
        if (ManyValue != null) { Flags[4] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Key);
        if (Flags[0]) { writer.Write(ZeroValue); }
        if (Flags[1]) { writer.Write(OneValue); }
        if (Flags[2]) { writer.Write(TwoValue); }
        if (Flags[3]) { writer.Write(FewValue); }
        if (Flags[4]) { writer.Write(ManyValue); }
        writer.Write(OtherValue);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Key = reader.ReadString();
        if (Flags[0]) { ZeroValue = reader.ReadString(); }
        if (Flags[1]) { OneValue = reader.ReadString(); }
        if (Flags[2]) { TwoValue = reader.ReadString(); }
        if (Flags[3]) { FewValue = reader.ReadString(); }
        if (Flags[4]) { ManyValue = reader.ReadString(); }
        OtherValue = reader.ReadString();
    }
}