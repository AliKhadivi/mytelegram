// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Theme
/// See <a href="https://corefork.telegram.org/constructor/theme" />
///</summary>
[TlObject(0xa00e67d6)]
public sealed class TTheme : ITheme
{
    public uint ConstructorId => 0xa00e67d6;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the current user is the creator of this theme
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Creator { get; set; }

    ///<summary>
    /// Whether this is the default theme
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Default { get; set; }

    ///<summary>
    /// Whether this theme is meant to be used as a <a href="https://telegram.org/blog/chat-themes-interactive-emoji-read-receipts">chat theme</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ForChat { get; set; }

    ///<summary>
    /// Theme ID
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Theme access hash
    ///</summary>
    public long AccessHash { get; set; }

    ///<summary>
    /// Unique theme ID
    ///</summary>
    public string Slug { get; set; }

    ///<summary>
    /// Theme name
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Theme
    /// See <a href="https://corefork.telegram.org/type/Document" />
    ///</summary>
    public MyTelegram.Schema.IDocument? Document { get; set; }

    ///<summary>
    /// Theme settings
    ///</summary>
    public TVector<MyTelegram.Schema.IThemeSettings>? Settings { get; set; }

    ///<summary>
    /// Theme emoji
    ///</summary>
    public string? Emoticon { get; set; }

    ///<summary>
    /// Installation count
    ///</summary>
    public int? InstallsCount { get; set; }

    public void ComputeFlag()
    {
        if (Creator) { Flags[0] = true; }
        if (Default) { Flags[1] = true; }
        if (ForChat) { Flags[5] = true; }
        if (Document != null) { Flags[2] = true; }
        if (Settings?.Count > 0) { Flags[3] = true; }
        if (Emoticon != null) { Flags[6] = true; }
        if (/*InstallsCount != 0 && */InstallsCount.HasValue) { Flags[4] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(AccessHash);
        writer.Write(Slug);
        writer.Write(Title);
        if (Flags[2]) { writer.Write(Document); }
        if (Flags[3]) { writer.Write(Settings); }
        if (Flags[6]) { writer.Write(Emoticon); }
        if (Flags[4]) { writer.Write(InstallsCount.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Creator = true; }
        if (Flags[1]) { Default = true; }
        if (Flags[5]) { ForChat = true; }
        Id = reader.ReadInt64();
        AccessHash = reader.ReadInt64();
        Slug = reader.ReadString();
        Title = reader.ReadString();
        if (Flags[2]) { Document = reader.Read<MyTelegram.Schema.IDocument>(); }
        if (Flags[3]) { Settings = reader.Read<TVector<MyTelegram.Schema.IThemeSettings>>(); }
        if (Flags[6]) { Emoticon = reader.ReadString(); }
        if (Flags[4]) { InstallsCount = reader.ReadInt32(); }
    }
}