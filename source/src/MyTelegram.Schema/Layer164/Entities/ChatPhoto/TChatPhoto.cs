// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Group profile photo.
/// See <a href="https://corefork.telegram.org/constructor/chatPhoto" />
///</summary>
[TlObject(0x1c6e1c11)]
public sealed class TChatPhoto : IChatPhoto
{
    public uint ConstructorId => 0x1c6e1c11;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the user has an animated profile picture
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasVideo { get; set; }

    ///<summary>
    /// Photo ID
    ///</summary>
    public long PhotoId { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/files#stripped-thumbnails">Stripped thumbnail</a>
    ///</summary>
    public byte[]? StrippedThumb { get; set; }

    ///<summary>
    /// DC where this photo is stored
    ///</summary>
    public int DcId { get; set; }

    public void ComputeFlag()
    {
        if (HasVideo) { Flags[0] = true; }
        if (StrippedThumb != null) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(PhotoId);
        if (Flags[1]) { writer.Write(StrippedThumb); }
        writer.Write(DcId);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { HasVideo = true; }
        PhotoId = reader.ReadInt64();
        if (Flags[1]) { StrippedThumb = reader.ReadBytes(); }
        DcId = reader.ReadInt32();
    }
}