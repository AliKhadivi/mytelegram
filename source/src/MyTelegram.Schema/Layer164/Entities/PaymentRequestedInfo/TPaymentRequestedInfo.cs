// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Order info provided by the user
/// See <a href="https://corefork.telegram.org/constructor/paymentRequestedInfo" />
///</summary>
[TlObject(0x909c3f94)]
public sealed class TPaymentRequestedInfo : IPaymentRequestedInfo
{
    public uint ConstructorId => 0x909c3f94;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// User's full name
    ///</summary>
    public string? Name { get; set; }

    ///<summary>
    /// User's phone number
    ///</summary>
    public string? Phone { get; set; }

    ///<summary>
    /// User's email address
    ///</summary>
    public string? Email { get; set; }

    ///<summary>
    /// User's shipping address
    /// See <a href="https://corefork.telegram.org/type/PostAddress" />
    ///</summary>
    public MyTelegram.Schema.IPostAddress? ShippingAddress { get; set; }

    public void ComputeFlag()
    {
        if (Name != null) { Flags[0] = true; }
        if (Phone != null) { Flags[1] = true; }
        if (Email != null) { Flags[2] = true; }
        if (ShippingAddress != null) { Flags[3] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(Name); }
        if (Flags[1]) { writer.Write(Phone); }
        if (Flags[2]) { writer.Write(Email); }
        if (Flags[3]) { writer.Write(ShippingAddress); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Name = reader.ReadString(); }
        if (Flags[1]) { Phone = reader.ReadString(); }
        if (Flags[2]) { Email = reader.ReadString(); }
        if (Flags[3]) { ShippingAddress = reader.Read<MyTelegram.Schema.IPostAddress>(); }
    }
}