// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Info about a forwarded message
/// See <a href="https://corefork.telegram.org/constructor/messageFwdHeader" />
///</summary>
[TlObject(0x5f777dce)]
public sealed class TMessageFwdHeader : IMessageFwdHeader
{
    public uint ConstructorId => 0x5f777dce;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether this message was <a href="https://corefork.telegram.org/api/import">imported from a foreign chat service, click here for more info »</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Imported { get; set; }

    ///<summary>
    /// The ID of the user that originally sent the message
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? FromId { get; set; }

    ///<summary>
    /// The name of the user that originally sent the message
    ///</summary>
    public string? FromName { get; set; }

    ///<summary>
    /// When was the message originally sent
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// ID of the channel message that was forwarded
    ///</summary>
    public int? ChannelPost { get; set; }

    ///<summary>
    /// For channels and if signatures are enabled, author of the channel message
    ///</summary>
    public string? PostAuthor { get; set; }

    ///<summary>
    /// Only for messages forwarded to the current user (inputPeerSelf), full info about the user/channel that originally sent the message
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? SavedFromPeer { get; set; }

    ///<summary>
    /// Only for messages forwarded to the current user (inputPeerSelf), ID of the message that was forwarded from the original user/channel
    ///</summary>
    public int? SavedFromMsgId { get; set; }

    ///<summary>
    /// PSA type
    ///</summary>
    public string? PsaType { get; set; }

    public void ComputeFlag()
    {
        if (Imported) { Flags[7] = true; }
        if (FromId != null) { Flags[0] = true; }
        if (FromName != null) { Flags[5] = true; }
        if (/*ChannelPost != 0 && */ChannelPost.HasValue) { Flags[2] = true; }
        if (PostAuthor != null) { Flags[3] = true; }
        if (SavedFromPeer != null) { Flags[4] = true; }
        if (/*SavedFromMsgId != 0 && */SavedFromMsgId.HasValue) { Flags[4] = true; }
        if (PsaType != null) { Flags[6] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(FromId); }
        if (Flags[5]) { writer.Write(FromName); }
        writer.Write(Date);
        if (Flags[2]) { writer.Write(ChannelPost.Value); }
        if (Flags[3]) { writer.Write(PostAuthor); }
        if (Flags[4]) { writer.Write(SavedFromPeer); }
        if (Flags[4]) { writer.Write(SavedFromMsgId.Value); }
        if (Flags[6]) { writer.Write(PsaType); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[7]) { Imported = true; }
        if (Flags[0]) { FromId = reader.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags[5]) { FromName = reader.ReadString(); }
        Date = reader.ReadInt32();
        if (Flags[2]) { ChannelPost = reader.ReadInt32(); }
        if (Flags[3]) { PostAuthor = reader.ReadString(); }
        if (Flags[4]) { SavedFromPeer = reader.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags[4]) { SavedFromMsgId = reader.ReadInt32(); }
        if (Flags[6]) { PsaType = reader.ReadString(); }
    }
}