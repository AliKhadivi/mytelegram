// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Stats;

///<summary>
/// Obtains a list of messages, indicating to which other public channels was a channel message forwarded.<br>
/// Will return a list of <a href="https://corefork.telegram.org/constructor/message">messages</a> with <code>peer_id</code> equal to the public channel to which this message was forwarded.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CHANNEL_INVALID The provided channel is invalid.
/// 400 CHAT_ADMIN_REQUIRED You must be an admin in this chat to do this.
/// 400 MESSAGE_ID_INVALID The provided message id is invalid.
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// See <a href="https://corefork.telegram.org/method/stats.getMessagePublicForwards" />
///</summary>
[TlObject(0x5630281b)]
public sealed class RequestGetMessagePublicForwards : IRequest<MyTelegram.Schema.Messages.IMessages>
{
    public uint ConstructorId => 0x5630281b;
    ///<summary>
    /// Source channel
    /// See <a href="https://corefork.telegram.org/type/InputChannel" />
    ///</summary>
    public MyTelegram.Schema.IInputChannel Channel { get; set; }

    ///<summary>
    /// Source message ID
    ///</summary>
    public int MsgId { get; set; }

    ///<summary>
    /// Initially 0, then set to the <code>next_rate</code> parameter of <a href="https://corefork.telegram.org/constructor/messages.messagesSlice">messages.messagesSlice</a>
    ///</summary>
    public int OffsetRate { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a>
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer OffsetPeer { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a>
    ///</summary>
    public int OffsetId { get; set; }

    ///<summary>
    /// Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a>
    ///</summary>
    public int Limit { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Channel);
        writer.Write(MsgId);
        writer.Write(OffsetRate);
        writer.Write(OffsetPeer);
        writer.Write(OffsetId);
        writer.Write(Limit);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Channel = reader.Read<MyTelegram.Schema.IInputChannel>();
        MsgId = reader.ReadInt32();
        OffsetRate = reader.ReadInt32();
        OffsetPeer = reader.Read<MyTelegram.Schema.IInputPeer>();
        OffsetId = reader.ReadInt32();
        Limit = reader.ReadInt32();
    }
}
