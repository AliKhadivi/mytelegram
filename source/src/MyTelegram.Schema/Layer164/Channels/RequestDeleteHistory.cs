// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Channels;

///<summary>
/// Delete the history of a <a href="https://corefork.telegram.org/api/channel">supergroup</a>
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CHANNEL_INVALID The provided channel is invalid.
/// 400 CHANNEL_PARICIPANT_MISSING The current user is not in the channel.
/// 400 CHANNEL_PRIVATE You haven't joined this channel/supergroup.
/// 400 CHANNEL_TOO_BIG This channel has too many participants (&gt;1000) to be deleted.
/// 400 CHAT_ADMIN_REQUIRED You must be an admin in this chat to do this.
/// See <a href="https://corefork.telegram.org/method/channels.deleteHistory" />
///</summary>
[TlObject(0x9baa9647)]
public sealed class RequestDeleteHistory : IRequest<IBool>
{
    public uint ConstructorId => 0x9baa9647;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the history should be deleted for everyone
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ForEveryone { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/channel">Supergroup</a> whose history must be deleted
    /// See <a href="https://corefork.telegram.org/type/InputChannel" />
    ///</summary>
    public MyTelegram.Schema.IInputChannel Channel { get; set; }

    ///<summary>
    /// ID of message <strong>up to which</strong> the history must be deleted
    ///</summary>
    public int MaxId { get; set; }

    public void ComputeFlag()
    {
        if (ForEveryone) { Flags[0] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Channel);
        writer.Write(MaxId);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { ForEveryone = true; }
        Channel = reader.Read<MyTelegram.Schema.IInputChannel>();
        MaxId = reader.ReadInt32();
    }
}
