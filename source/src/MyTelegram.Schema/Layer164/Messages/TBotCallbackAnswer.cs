// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Callback answer sent by the bot in response to a button press
/// See <a href="https://corefork.telegram.org/constructor/messages.botCallbackAnswer" />
///</summary>
[TlObject(0x36585ea4)]
public sealed class TBotCallbackAnswer : IBotCallbackAnswer
{
    public uint ConstructorId => 0x36585ea4;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether an alert should be shown to the user instead of a toast notification
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Alert { get; set; }

    ///<summary>
    /// Whether an URL is present
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasUrl { get; set; }

    ///<summary>
    /// Whether to show games in WebView or in native UI.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NativeUi { get; set; }

    ///<summary>
    /// Alert to show
    ///</summary>
    public string? Message { get; set; }

    ///<summary>
    /// URL to open
    ///</summary>
    public string? Url { get; set; }

    ///<summary>
    /// For how long should this answer be cached
    ///</summary>
    public int CacheTime { get; set; }

    public void ComputeFlag()
    {
        if (Alert) { Flags[1] = true; }
        if (HasUrl) { Flags[3] = true; }
        if (NativeUi) { Flags[4] = true; }
        if (Message != null) { Flags[0] = true; }
        if (Url != null) { Flags[2] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(Message); }
        if (Flags[2]) { writer.Write(Url); }
        writer.Write(CacheTime);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[1]) { Alert = true; }
        if (Flags[3]) { HasUrl = true; }
        if (Flags[4]) { NativeUi = true; }
        if (Flags[0]) { Message = reader.ReadString(); }
        if (Flags[2]) { Url = reader.ReadString(); }
        CacheTime = reader.ReadInt32();
    }
}