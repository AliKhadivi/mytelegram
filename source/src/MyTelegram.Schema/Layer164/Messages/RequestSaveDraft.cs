// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Save a message <a href="https://corefork.telegram.org/api/drafts">draft</a> associated to a chat.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 ENTITY_BOUNDS_INVALID A specified <a href="https://corefork.telegram.org/api/entities#entity-length">entity offset or length</a> is invalid, see <a href="https://corefork.telegram.org/api/entities#entity-length">here »</a> for info on how to properly compute the entity offset/length.
/// 400 MSG_ID_INVALID Invalid message ID provided.
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.saveDraft" />
///</summary>
[TlObject(0xb4331e3f)]
public sealed class RequestSaveDraft : IRequest<IBool>
{
    public uint ConstructorId => 0xb4331e3f;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Disable generation of the webpage preview
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NoWebpage { get; set; }

    ///<summary>
    /// Message ID the message should reply to
    ///</summary>
    public int? ReplyToMsgId { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/forum#forum-topics">Forum topic</a> where the message will be sent
    ///</summary>
    public int? TopMsgId { get; set; }

    ///<summary>
    /// Destination of the message that should be sent
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// The draft
    ///</summary>
    public string Message { get; set; }

    ///<summary>
    /// Message <a href="https://corefork.telegram.org/api/entities">entities</a> for styled text
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    public void ComputeFlag()
    {
        if (NoWebpage) { Flags[1] = true; }
        if (/*ReplyToMsgId != 0 && */ReplyToMsgId.HasValue) { Flags[0] = true; }
        if (/*TopMsgId != 0 && */TopMsgId.HasValue) { Flags[2] = true; }
        if (Entities?.Count > 0) { Flags[3] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(ReplyToMsgId.Value); }
        if (Flags[2]) { writer.Write(TopMsgId.Value); }
        writer.Write(Peer);
        writer.Write(Message);
        if (Flags[3]) { writer.Write(Entities); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[1]) { NoWebpage = true; }
        if (Flags[0]) { ReplyToMsgId = reader.ReadInt32(); }
        if (Flags[2]) { TopMsgId = reader.ReadInt32(); }
        Peer = reader.Read<MyTelegram.Schema.IInputPeer>();
        Message = reader.ReadString();
        if (Flags[3]) { Entities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
    }
}
