// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// Configuration for two-factor authorization
/// See <a href="https://corefork.telegram.org/constructor/account.password" />
///</summary>
[TlObject(0x957b50fb)]
public sealed class TPassword : IPassword
{
    public uint ConstructorId => 0x957b50fb;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the user has a recovery method configured
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasRecovery { get; set; }

    ///<summary>
    /// Whether telegram <a href="https://corefork.telegram.org/passport">passport</a> is enabled
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasSecureValues { get; set; }

    ///<summary>
    /// Whether the user has a password
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasPassword { get; set; }

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/srp">KDF algorithm for SRP two-factor authentication</a> of the current password
    /// See <a href="https://corefork.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo? CurrentAlgo { get; set; }

    ///<summary>
    /// Srp B param for <a href="https://corefork.telegram.org/api/srp">SRP authorization</a>
    ///</summary>
    public byte[]? SrpB { get; set; }

    ///<summary>
    /// Srp ID param for <a href="https://corefork.telegram.org/api/srp">SRP authorization</a>
    ///</summary>
    public long? SrpId { get; set; }

    ///<summary>
    /// Text hint for the password
    ///</summary>
    public string? Hint { get; set; }

    ///<summary>
    /// A <a href="https://corefork.telegram.org/api/srp#email-verification">password recovery email</a> with the specified <a href="https://corefork.telegram.org/api/pattern">pattern</a> is still awaiting verification
    ///</summary>
    public string? EmailUnconfirmedPattern { get; set; }

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/srp">KDF algorithm for SRP two-factor authentication</a> to use when creating new passwords
    /// See <a href="https://corefork.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo NewAlgo { get; set; }

    ///<summary>
    /// The KDF algorithm for telegram <a href="https://corefork.telegram.org/passport">passport</a>
    /// See <a href="https://corefork.telegram.org/type/SecurePasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.ISecurePasswordKdfAlgo NewSecureAlgo { get; set; }

    ///<summary>
    /// Secure random string
    ///</summary>
    public byte[] SecureRandom { get; set; }

    ///<summary>
    /// The 2FA password will be automatically removed at this date, unless the user cancels the operation
    ///</summary>
    public int? PendingResetDate { get; set; }

    ///<summary>
    /// A verified login email with the specified <a href="https://corefork.telegram.org/api/pattern">pattern</a> is configured
    ///</summary>
    public string? LoginEmailPattern { get; set; }

    public void ComputeFlag()
    {
        if (HasRecovery) { Flags[0] = true; }
        if (HasSecureValues) { Flags[1] = true; }
        if (HasPassword) { Flags[2] = true; }
        if (CurrentAlgo != null) { Flags[2] = true; }
        if (SrpB != null) { Flags[2] = true; }
        if (/*SrpId != 0 &&*/ SrpId.HasValue) { Flags[2] = true; }
        if (Hint != null) { Flags[3] = true; }
        if (EmailUnconfirmedPattern != null) { Flags[4] = true; }
        if (/*PendingResetDate != 0 && */PendingResetDate.HasValue) { Flags[5] = true; }
        if (LoginEmailPattern != null) { Flags[6] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[2]) { writer.Write(CurrentAlgo); }
        if (Flags[2]) { writer.Write(SrpB); }
        if (Flags[2]) { writer.Write(SrpId.Value); }
        if (Flags[3]) { writer.Write(Hint); }
        if (Flags[4]) { writer.Write(EmailUnconfirmedPattern); }
        writer.Write(NewAlgo);
        writer.Write(NewSecureAlgo);
        writer.Write(SecureRandom);
        if (Flags[5]) { writer.Write(PendingResetDate.Value); }
        if (Flags[6]) { writer.Write(LoginEmailPattern); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { HasRecovery = true; }
        if (Flags[1]) { HasSecureValues = true; }
        if (Flags[2]) { HasPassword = true; }
        if (Flags[2]) { CurrentAlgo = reader.Read<MyTelegram.Schema.IPasswordKdfAlgo>(); }
        if (Flags[2]) { SrpB = reader.ReadBytes(); }
        if (Flags[2]) { SrpId = reader.ReadInt64(); }
        if (Flags[3]) { Hint = reader.ReadString(); }
        if (Flags[4]) { EmailUnconfirmedPattern = reader.ReadString(); }
        NewAlgo = reader.Read<MyTelegram.Schema.IPasswordKdfAlgo>();
        NewSecureAlgo = reader.Read<MyTelegram.Schema.ISecurePasswordKdfAlgo>();
        SecureRandom = reader.ReadBytes();
        if (Flags[5]) { PendingResetDate = reader.ReadInt32(); }
        if (Flags[6]) { LoginEmailPattern = reader.ReadString(); }
    }
}