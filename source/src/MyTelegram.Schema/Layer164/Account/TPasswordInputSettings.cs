// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// Settings for setting up a new password
/// See <a href="https://corefork.telegram.org/constructor/account.passwordInputSettings" />
///</summary>
[TlObject(0xc23727c9)]
public sealed class TPasswordInputSettings : IPasswordInputSettings
{
    public uint ConstructorId => 0xc23727c9;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/srp">SRP algorithm</a> to use
    /// See <a href="https://corefork.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo? NewAlgo { get; set; }

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/srp">computed password hash</a>
    ///</summary>
    public byte[]? NewPasswordHash { get; set; }

    ///<summary>
    /// Text hint for the password
    ///</summary>
    public string? Hint { get; set; }

    ///<summary>
    /// Password recovery email
    ///</summary>
    public string? Email { get; set; }

    ///<summary>
    /// Telegram <a href="https://corefork.telegram.org/passport">passport</a> settings
    /// See <a href="https://corefork.telegram.org/type/SecureSecretSettings" />
    ///</summary>
    public MyTelegram.Schema.ISecureSecretSettings? NewSecureSettings { get; set; }

    public void ComputeFlag()
    {
        if (NewAlgo != null) { Flags[0] = true; }
        if (NewPasswordHash != null) { Flags[0] = true; }
        if (Hint != null) { Flags[0] = true; }
        if (Email != null) { Flags[1] = true; }
        if (NewSecureSettings != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(NewAlgo); }
        if (Flags[0]) { writer.Write(NewPasswordHash); }
        if (Flags[0]) { writer.Write(Hint); }
        if (Flags[1]) { writer.Write(Email); }
        if (Flags[2]) { writer.Write(NewSecureSettings); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { NewAlgo = reader.Read<MyTelegram.Schema.IPasswordKdfAlgo>(); }
        if (Flags[0]) { NewPasswordHash = reader.ReadBytes(); }
        if (Flags[0]) { Hint = reader.ReadString(); }
        if (Flags[1]) { Email = reader.ReadString(); }
        if (Flags[2]) { NewSecureSettings = reader.Read<MyTelegram.Schema.ISecureSecretSettings>(); }
    }
}