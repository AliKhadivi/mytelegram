// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Help;

///<summary>
/// Deep link info, see <a href="https://corefork.telegram.org/api/links#unsupported-links">the here for more details</a>
/// See <a href="https://corefork.telegram.org/constructor/help.deepLinkInfo" />
///</summary>
[TlObject(0x6a4ee832)]
public sealed class TDeepLinkInfo : IDeepLinkInfo
{
    public uint ConstructorId => 0x6a4ee832;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// An update of the app is required to parse this link
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool UpdateApp { get; set; }

    ///<summary>
    /// Message to show to the user
    ///</summary>
    public string Message { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a>
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    public void ComputeFlag()
    {
        if (UpdateApp) { Flags[0] = true; }
        if (Entities?.Count > 0) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Message);
        if (Flags[1]) { writer.Write(Entities); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { UpdateApp = true; }
        Message = reader.ReadString();
        if (Flags[1]) { Entities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
    }
}