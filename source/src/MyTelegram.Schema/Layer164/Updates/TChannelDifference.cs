// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Updates;

///<summary>
/// The new updates
/// See <a href="https://corefork.telegram.org/constructor/updates.channelDifference" />
///</summary>
[TlObject(0x2064674e)]
public sealed class TChannelDifference : IChannelDifference
{
    public uint ConstructorId => 0x2064674e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether there are more updates to be fetched using getDifference, starting from the provided <code>pts</code>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Final { get; set; }

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/updates">PTS</a> from which to start getting updates the next time
    ///</summary>
    public int Pts { get; set; }

    ///<summary>
    /// Clients are supposed to refetch the channel difference after timeout seconds have elapsed
    ///</summary>
    public int? Timeout { get; set; }

    ///<summary>
    /// New messages
    ///</summary>
    public TVector<MyTelegram.Schema.IMessage> NewMessages { get; set; }

    ///<summary>
    /// Other updates
    ///</summary>
    public TVector<MyTelegram.Schema.IUpdate> OtherUpdates { get; set; }

    ///<summary>
    /// Chats
    ///</summary>
    public TVector<MyTelegram.Schema.IChat> Chats { get; set; }

    ///<summary>
    /// Users
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (Final) { Flags[0] = true; }
        if (/*Timeout != 0 && */Timeout.HasValue) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Pts);
        if (Flags[1]) { writer.Write(Timeout.Value); }
        writer.Write(NewMessages);
        writer.Write(OtherUpdates);
        writer.Write(Chats);
        writer.Write(Users);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Final = true; }
        Pts = reader.ReadInt32();
        if (Flags[1]) { Timeout = reader.ReadInt32(); }
        NewMessages = reader.Read<TVector<MyTelegram.Schema.IMessage>>();
        OtherUpdates = reader.Read<TVector<MyTelegram.Schema.IUpdate>>();
        Chats = reader.Read<TVector<MyTelegram.Schema.IChat>>();
        Users = reader.Read<TVector<MyTelegram.Schema.IUser>>();
    }
}