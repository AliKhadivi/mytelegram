// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Photos;

///<summary>
/// Upload a custom profile picture for a contact, or suggest a new profile picture to a contact.The <code>file</code>, <code>video</code> and <code>video_emoji_markup</code> flags are mutually exclusive.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CONTACT_MISSING The specified user is not a contact.
/// 400 USER_ID_INVALID The provided user ID is invalid.
/// See <a href="https://corefork.telegram.org/method/photos.uploadContactProfilePhoto" />
///</summary>
[TlObject(0xe14c4a71)]
public sealed class RequestUploadContactProfilePhoto : IRequest<MyTelegram.Schema.Photos.IPhoto>
{
    public uint ConstructorId => 0xe14c4a71;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, will send a <a href="https://corefork.telegram.org/constructor/messageActionSuggestProfilePhoto">messageActionSuggestProfilePhoto</a> service message to <code>user_id</code>, suggesting them to use the specified profile picture; otherwise, will set a personal profile picture for the user (only visible to the current user).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Suggest { get; set; }

    ///<summary>
    /// If set, removes a previously set personal profile picture (does not affect suggested profile pictures, to remove them simply deleted the <a href="https://corefork.telegram.org/constructor/messageActionSuggestProfilePhoto">messageActionSuggestProfilePhoto</a> service message with <a href="https://corefork.telegram.org/method/messages.deleteMessages">messages.deleteMessages</a>).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Save { get; set; }

    ///<summary>
    /// The contact
    /// See <a href="https://corefork.telegram.org/type/InputUser" />
    ///</summary>
    public MyTelegram.Schema.IInputUser UserId { get; set; }

    ///<summary>
    /// Profile photo
    /// See <a href="https://corefork.telegram.org/type/InputFile" />
    ///</summary>
    public MyTelegram.Schema.IInputFile? File { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">Animated profile picture</a> video
    /// See <a href="https://corefork.telegram.org/type/InputFile" />
    ///</summary>
    public MyTelegram.Schema.IInputFile? Video { get; set; }

    ///<summary>
    /// Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if <code>video</code> or <code>video_emoji_markup</code> is set.
    ///</summary>
    public double? VideoStartTs { get; set; }

    ///<summary>
    /// Animated sticker profile picture, must contain either a <a href="https://corefork.telegram.org/constructor/videoSizeEmojiMarkup">videoSizeEmojiMarkup</a> or a <a href="https://corefork.telegram.org/constructor/videoSizeStickerMarkup">videoSizeStickerMarkup</a> constructor.
    /// See <a href="https://corefork.telegram.org/type/VideoSize" />
    ///</summary>
    public MyTelegram.Schema.IVideoSize? VideoEmojiMarkup { get; set; }

    public void ComputeFlag()
    {
        if (Suggest) { Flags[3] = true; }
        if (Save) { Flags[4] = true; }
        if (File != null) { Flags[0] = true; }
        if (Video != null) { Flags[1] = true; }
        if (VideoStartTs>0) { Flags[2] = true; }
        if (VideoEmojiMarkup != null) { Flags[5] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(UserId);
        if (Flags[0]) { writer.Write(File); }
        if (Flags[1]) { writer.Write(Video); }
        if (Flags[2]) { writer.Write(VideoStartTs.Value); }
        if (Flags[5]) { writer.Write(VideoEmojiMarkup); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[3]) { Suggest = true; }
        if (Flags[4]) { Save = true; }
        UserId = reader.Read<MyTelegram.Schema.IInputUser>();
        if (Flags[0]) { File = reader.Read<MyTelegram.Schema.IInputFile>(); }
        if (Flags[1]) { Video = reader.Read<MyTelegram.Schema.IInputFile>(); }
        if (Flags[2]) { VideoStartTs = reader.ReadDouble(); }
        if (Flags[5]) { VideoEmojiMarkup = reader.Read<MyTelegram.Schema.IVideoSize>(); }
    }
}
