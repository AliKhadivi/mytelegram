// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Updates;

///<summary>
/// The provided <code>pts + limit &lt; remote pts</code>. Simply, there are too many updates to be fetched (more than <code>limit</code>), the client has to resolve the update gap in one of the following ways (assuming the existence of a persistent database to locally store messages):It should be also noted that some messages like live location messages shouldn't be deleted.
/// See <a href="https://corefork.telegram.org/constructor/updates.channelDifferenceTooLong" />
///</summary>
[TlObject(0xa4bcc6fe)]
public sealed class TChannelDifferenceTooLong : IChannelDifference
{
    public uint ConstructorId => 0xa4bcc6fe;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether there are more updates that must be fetched (always false)
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Final { get; set; }

    ///<summary>
    /// Clients are supposed to refetch the channel difference after timeout seconds have elapsed
    ///</summary>
    public int? Timeout { get; set; }

    ///<summary>
    /// Dialog containing the latest <a href="https://corefork.telegram.org/api/updates">PTS</a> that can be used to reset the channel state
    /// See <a href="https://corefork.telegram.org/type/Dialog" />
    ///</summary>
    public MyTelegram.Schema.IDialog Dialog { get; set; }

    ///<summary>
    /// The latest messages
    ///</summary>
    public TVector<MyTelegram.Schema.IMessage> Messages { get; set; }

    ///<summary>
    /// Chats from messages
    ///</summary>
    public TVector<MyTelegram.Schema.IChat> Chats { get; set; }

    ///<summary>
    /// Users from messages
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (Final) { Flags[0] = true; }
        if (/*Timeout != 0 && */Timeout.HasValue) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[1]) { writer.Write(Timeout.Value); }
        writer.Write(Dialog);
        writer.Write(Messages);
        writer.Write(Chats);
        writer.Write(Users);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Final = true; }
        if (Flags[1]) { Timeout = reader.ReadInt32(); }
        Dialog = reader.Read<MyTelegram.Schema.IDialog>();
        Messages = reader.Read<TVector<MyTelegram.Schema.IMessage>>();
        Chats = reader.Read<TVector<MyTelegram.Schema.IChat>>();
        Users = reader.Read<TVector<MyTelegram.Schema.IUser>>();
    }
}