// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Channels;

///<summary>
/// Report a <a href="https://corefork.telegram.org/api/sponsored-messages">sponsored message »</a>, see <a href="https://corefork.telegram.org/api/sponsored-messages#reporting-sponsored-messages">here »</a> for more info on the full flow.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 AD_EXPIRED The ad has expired (too old or not found).
/// 400 CHANNEL_INVALID The provided channel is invalid.
/// 400 PREMIUM_ACCOUNT_REQUIRED A premium account is required to execute this action.
/// See <a href="https://corefork.telegram.org/method/channels.reportSponsoredMessage" />
///</summary>
[TlObject(0xaf8ff6b9)]
public sealed class RequestReportSponsoredMessage : IRequest<MyTelegram.Schema.Channels.ISponsoredMessageReportResult>
{
    public uint ConstructorId => 0xaf8ff6b9;
    ///<summary>
    /// The channel where the sponsored message can be seen.
    /// See <a href="https://corefork.telegram.org/type/InputChannel" />
    ///</summary>
    public MyTelegram.Schema.IInputChannel Channel { get; set; }

    ///<summary>
    /// ID of the sponsored message.
    ///</summary>
    public byte[] RandomId { get; set; }

    ///<summary>
    /// Chosen report option, initially an empty string, see <a href="https://corefork.telegram.org/api/sponsored-messages#reporting-sponsored-messages">here »</a> for more info on the full flow.
    ///</summary>
    public byte[] Option { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Channel);
        writer.Write(RandomId);
        writer.Write(Option);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Channel = reader.Read<MyTelegram.Schema.IInputChannel>();
        RandomId = reader.ReadBytes();
        Option = reader.ReadBytes();
    }
}
