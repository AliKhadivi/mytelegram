// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Help;

///<summary>
/// Contains info about a <a href="https://corefork.telegram.org/api/colors">color palette »</a>.
/// See <a href="https://corefork.telegram.org/constructor/help.peerColorOption" />
///</summary>
[TlObject(0xadec6ebe)]
public sealed class TPeerColorOption : IPeerColorOption
{
    public uint ConstructorId => 0xadec6ebe;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether this palette should not be displayed as an option to the user when choosing a palette to apply to profile pages or message accents.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Hidden { get; set; }

    ///<summary>
    /// Palette ID.
    ///</summary>
    public int ColorId { get; set; }

    ///<summary>
    /// Light mode palette. <br>Will be empty for IDs <code>0</code> to <code>6</code> inclusive, in which case a palette containing a single color from the following colors should be used: red, orange, violet, green, cyan, blue, pink for indexes 0 to 6 (i.e. the same colors used for randomized fallback <a href="https://corefork.telegram.org/api/colors">message accent colors</a>).
    /// See <a href="https://corefork.telegram.org/type/help.PeerColorSet" />
    ///</summary>
    public MyTelegram.Schema.Help.IPeerColorSet? Colors { get; set; }

    ///<summary>
    /// Dark mode palette. Optional, defaults to the palette in <code>colors</code> (or the autogenerated palette for IDs <code>0</code> to <code>6</code>) if absent.
    /// See <a href="https://corefork.telegram.org/type/help.PeerColorSet" />
    ///</summary>
    public MyTelegram.Schema.Help.IPeerColorSet? DarkColors { get; set; }

    ///<summary>
    /// Channels can use this palette only after reaching at least the <a href="https://corefork.telegram.org/api/boost">boost level</a> specified in this field.
    ///</summary>
    public int? ChannelMinLevel { get; set; }

    ///<summary>
    /// Supergroups can use this palette only after reaching at least the <a href="https://corefork.telegram.org/api/boost">boost level</a> specified in this field.
    ///</summary>
    public int? GroupMinLevel { get; set; }

    public void ComputeFlag()
    {
        if (Hidden) { Flags[0] = true; }
        if (Colors != null) { Flags[1] = true; }
        if (DarkColors != null) { Flags[2] = true; }
        if (/*ChannelMinLevel != 0 && */ChannelMinLevel.HasValue) { Flags[3] = true; }
        if (/*GroupMinLevel != 0 && */GroupMinLevel.HasValue) { Flags[4] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ColorId);
        if (Flags[1]) { writer.Write(Colors); }
        if (Flags[2]) { writer.Write(DarkColors); }
        if (Flags[3]) { writer.Write(ChannelMinLevel.Value); }
        if (Flags[4]) { writer.Write(GroupMinLevel.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Hidden = true; }
        ColorId = reader.ReadInt32();
        if (Flags[1]) { Colors = reader.Read<MyTelegram.Schema.Help.IPeerColorSet>(); }
        if (Flags[2]) { DarkColors = reader.Read<MyTelegram.Schema.Help.IPeerColorSet>(); }
        if (Flags[3]) { ChannelMinLevel = reader.ReadInt32(); }
        if (Flags[4]) { GroupMinLevel = reader.ReadInt32(); }
    }
}