// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Help;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/help.peerColorOption" />
///</summary>
[TlObject(0x135bd42f)]
public sealed class TPeerColorOption : IPeerColorOption
{
    public uint ConstructorId => 0x135bd42f;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Hidden { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int ColorId { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/help.PeerColorSet" />
    ///</summary>
    public MyTelegram.Schema.Help.IPeerColorSet? Colors { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/help.PeerColorSet" />
    ///</summary>
    public MyTelegram.Schema.Help.IPeerColorSet? DarkColors { get; set; }

    public void ComputeFlag()
    {
        if (Hidden) { Flags[0] = true; }
        if (Colors != null) { Flags[1] = true; }
        if (DarkColors != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ColorId);
        if (Flags[1]) { writer.Write(Colors); }
        if (Flags[2]) { writer.Write(DarkColors); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Hidden = true; }
        ColorId = reader.ReadInt32();
        if (Flags[1]) { Colors = reader.Read<MyTelegram.Schema.Help.IPeerColorSet>(); }
        if (Flags[2]) { DarkColors = reader.Read<MyTelegram.Schema.Help.IPeerColorSet>(); }
    }
}