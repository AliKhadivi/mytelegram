// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Payments;

///<summary>
/// A <a href="https://corefork.telegram.org/api/giveaways">giveaway</a> has ended.
/// See <a href="https://corefork.telegram.org/constructor/payments.giveawayInfoResults" />
///</summary>
[TlObject(0xcd5570)]
public sealed class TGiveawayInfoResults : IGiveawayInfo
{
    public uint ConstructorId => 0xcd5570;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether we're one of the winners of this giveaway.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Winner { get; set; }

    ///<summary>
    /// Whether the giveaway was canceled and was fully refunded.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Refunded { get; set; }

    ///<summary>
    /// Start date of the giveaway
    ///</summary>
    public int StartDate { get; set; }

    ///<summary>
    /// If we're one of the winners of this giveaway, contains the <a href="https://corefork.telegram.org/api/links#premium-giftcode-links">Premium gift code</a>, see <a href="https://corefork.telegram.org/api/giveaways">here »</a> for more info on the full giveaway flow.
    ///</summary>
    public string? GiftCodeSlug { get; set; }

    ///<summary>
    /// End date of the giveaway. May be bigger than the end date specified in parameters of the giveaway.
    ///</summary>
    public int FinishDate { get; set; }

    ///<summary>
    /// Number of winners in the giveaway
    ///</summary>
    public int WinnersCount { get; set; }

    ///<summary>
    /// Number of winners, which activated their <a href="https://corefork.telegram.org/api/links#premium-giftcode-links">gift codes</a>.
    ///</summary>
    public int ActivatedCount { get; set; }

    public void ComputeFlag()
    {
        if (Winner) { Flags[0] = true; }
        if (Refunded) { Flags[1] = true; }
        if (GiftCodeSlug != null) { Flags[0] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(StartDate);
        if (Flags[0]) { writer.Write(GiftCodeSlug); }
        writer.Write(FinishDate);
        writer.Write(WinnersCount);
        writer.Write(ActivatedCount);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Winner = true; }
        if (Flags[1]) { Refunded = true; }
        StartDate = reader.ReadInt32();
        if (Flags[0]) { GiftCodeSlug = reader.ReadString(); }
        FinishDate = reader.ReadInt32();
        WinnersCount = reader.ReadInt32();
        ActivatedCount = reader.ReadInt32();
    }
}