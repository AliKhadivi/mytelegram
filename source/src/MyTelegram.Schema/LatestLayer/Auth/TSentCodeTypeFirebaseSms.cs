// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Auth;

///<summary>
/// An authentication code should be delivered via SMS after Firebase attestation, as described in the <a href="https://corefork.telegram.org/api/auth">auth documentation »</a>.
/// See <a href="https://corefork.telegram.org/constructor/auth.sentCodeTypeFirebaseSms" />
///</summary>
[TlObject(0x9fd736)]
public sealed class TSentCodeTypeFirebaseSms : ISentCodeType
{
    public uint ConstructorId => 0x9fd736;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// On Android, the nonce to be used as described in the <a href="https://corefork.telegram.org/api/auth">auth documentation »</a>
    ///</summary>
    public byte[]? Nonce { get; set; }

    ///<summary>
    /// Google Play Integrity project ID
    ///</summary>
    public long? PlayIntegrityProjectId { get; set; }

    ///<summary>
    /// Play Integrity API nonce
    ///</summary>
    public byte[]? PlayIntegrityNonce { get; set; }

    ///<summary>
    /// On iOS, must be compared with the <code>receipt</code> extracted from the received push notification.
    ///</summary>
    public string? Receipt { get; set; }

    ///<summary>
    /// On iOS: if a push notification with the <code>ios_push_secret</code> isn't received within <code>push_timeout</code> seconds, the <code>next_type</code> authentication method must be used, with <a href="https://corefork.telegram.org/method/auth.resendCode">auth.resendCode</a>.
    ///</summary>
    public int? PushTimeout { get; set; }

    ///<summary>
    /// Length of the code that will be delivered.
    ///</summary>
    public int Length { get; set; }

    public void ComputeFlag()
    {
        if (Nonce != null) { Flags[0] = true; }
        if (/*PlayIntegrityProjectId != 0 &&*/ PlayIntegrityProjectId.HasValue) { Flags[2] = true; }
        if (PlayIntegrityNonce != null) { Flags[2] = true; }
        if (Receipt != null) { Flags[1] = true; }
        if (/*PushTimeout != 0 && */PushTimeout.HasValue) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(Nonce); }
        if (Flags[2]) { writer.Write(PlayIntegrityProjectId.Value); }
        if (Flags[2]) { writer.Write(PlayIntegrityNonce); }
        if (Flags[1]) { writer.Write(Receipt); }
        if (Flags[1]) { writer.Write(PushTimeout.Value); }
        writer.Write(Length);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Nonce = reader.ReadBytes(); }
        if (Flags[2]) { PlayIntegrityProjectId = reader.ReadInt64(); }
        if (Flags[2]) { PlayIntegrityNonce = reader.ReadBytes(); }
        if (Flags[1]) { Receipt = reader.ReadString(); }
        if (Flags[1]) { PushTimeout = reader.ReadInt32(); }
        Length = reader.ReadInt32();
    }
}