// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Information about found messages sent on a specific day
/// See <a href="https://corefork.telegram.org/constructor/messages.searchResultsCalendar" />
///</summary>
[TlObject(0x147ee23c)]
public sealed class TSearchResultsCalendar : ISearchResultsCalendar
{
    public uint ConstructorId => 0x147ee23c;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, indicates that the results may be inexact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Inexact { get; set; }

    ///<summary>
    /// Total number of results matching query
    ///</summary>
    public int Count { get; set; }

    ///<summary>
    /// Starting timestamp of attached messages
    ///</summary>
    public int MinDate { get; set; }

    ///<summary>
    /// Ending timestamp of attached messages
    ///</summary>
    public int MinMsgId { get; set; }

    ///<summary>
    /// Indicates the absolute position of <code>messages[0]</code> within the total result set with count <code>count</code>. <br>This is useful, for example, if we need to display a <code>progress/total</code> counter (like <code>photo 134 of 200</code>, for all media in a chat, we could simply use <code>photo ${offset_id_offset} of ${count}</code>.
    ///</summary>
    public int? OffsetIdOffset { get; set; }

    ///<summary>
    /// Used to split the <code>messages</code> by days: multiple <a href="https://corefork.telegram.org/type/SearchResultsCalendarPeriod">SearchResultsCalendarPeriod</a> constructors are returned, each containing information about the first, last and total number of messages matching the filter that were sent on a specific day.  <br>This information can be easily used to split the returned <code>messages</code> by day.
    ///</summary>
    public TVector<MyTelegram.Schema.ISearchResultsCalendarPeriod> Periods { get; set; }

    ///<summary>
    /// Messages
    ///</summary>
    public TVector<MyTelegram.Schema.IMessage> Messages { get; set; }

    ///<summary>
    /// Mentioned chats
    ///</summary>
    public TVector<MyTelegram.Schema.IChat> Chats { get; set; }

    ///<summary>
    /// Mentioned users
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (Inexact) { Flags[0] = true; }
        if (/*OffsetIdOffset != 0 && */OffsetIdOffset.HasValue) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Count);
        writer.Write(MinDate);
        writer.Write(MinMsgId);
        if (Flags[1]) { writer.Write(OffsetIdOffset.Value); }
        writer.Write(Periods);
        writer.Write(Messages);
        writer.Write(Chats);
        writer.Write(Users);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Inexact = true; }
        Count = reader.ReadInt32();
        MinDate = reader.ReadInt32();
        MinMsgId = reader.ReadInt32();
        if (Flags[1]) { OffsetIdOffset = reader.ReadInt32(); }
        Periods = reader.Read<TVector<MyTelegram.Schema.ISearchResultsCalendarPeriod>>();
        Messages = reader.Read<TVector<MyTelegram.Schema.IMessage>>();
        Chats = reader.Read<TVector<MyTelegram.Schema.IChat>>();
        Users = reader.Read<TVector<MyTelegram.Schema.IUser>>();
    }
}