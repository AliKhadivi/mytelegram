// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Returns information about the next messages of the specified type in the chat split by days.Returns the results in reverse chronological order.<br>
/// Can return partial results for the last returned day.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 FILTER_NOT_SUPPORTED The specified filter cannot be used in this context.
/// See <a href="https://corefork.telegram.org/method/messages.getSearchResultsCalendar" />
///</summary>
[TlObject(0x6aa3f6bd)]
public sealed class RequestGetSearchResultsCalendar : IRequest<MyTelegram.Schema.Messages.ISearchResultsCalendar>
{
    public uint ConstructorId => 0x6aa3f6bd;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Peer where to search
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }
    public MyTelegram.Schema.IInputPeer? SavedPeerId { get; set; }

    ///<summary>
    /// Message filter, <a href="https://corefork.telegram.org/constructor/inputMessagesFilterEmpty">inputMessagesFilterEmpty</a>, <a href="https://corefork.telegram.org/constructor/inputMessagesFilterMyMentions">inputMessagesFilterMyMentions</a> filters are not supported by this method.
    /// See <a href="https://corefork.telegram.org/type/MessagesFilter" />
    ///</summary>
    public MyTelegram.Schema.IMessagesFilter Filter { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a>
    ///</summary>
    public int OffsetId { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a>
    ///</summary>
    public int OffsetDate { get; set; }

    public void ComputeFlag()
    {
        if (SavedPeerId != null) { Flags[2] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        if (Flags[2]) { writer.Write(SavedPeerId); }
        writer.Write(Filter);
        writer.Write(OffsetId);
        writer.Write(OffsetDate);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Peer = reader.Read<MyTelegram.Schema.IInputPeer>();
        if (Flags[2]) { SavedPeerId = reader.Read<MyTelegram.Schema.IInputPeer>(); }
        Filter = reader.Read<MyTelegram.Schema.IMessagesFilter>();
        OffsetId = reader.ReadInt32();
        OffsetDate = reader.ReadInt32();
    }
}
