// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Get poll results for non-anonymous polls
/// <para>Possible errors</para>
/// Code Type Description
/// 403 BROADCAST_FORBIDDEN Participants of polls in channels should stay anonymous.
/// 400 MSG_ID_INVALID Invalid message ID provided.
/// 403 POLL_VOTE_REQUIRED Cast a vote in the poll before calling this method.
/// See <a href="https://corefork.telegram.org/method/messages.getPollVotes" />
///</summary>
[TlObject(0xb86e380e)]
public sealed class RequestGetPollVotes : IRequest<MyTelegram.Schema.Messages.IVotesList>
{
    public uint ConstructorId => 0xb86e380e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Chat where the poll was sent
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// Message ID
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// Get only results for the specified poll <code>option</code>
    ///</summary>
    public byte[]? Option { get; set; }

    ///<summary>
    /// Offset for results, taken from the <code>next_offset</code> field of <a href="https://corefork.telegram.org/constructor/messages.votesList">messages.votesList</a>, initially an empty string. <br>Note: if no more results are available, the method call will return an empty <code>next_offset</code>; thus, avoid providing the <code>next_offset</code> returned in <a href="https://corefork.telegram.org/constructor/messages.votesList">messages.votesList</a> if it is empty, to avoid an infinite loop.
    ///</summary>
    public string? Offset { get; set; }

    ///<summary>
    /// Number of results to return
    ///</summary>
    public int Limit { get; set; }

    public void ComputeFlag()
    {
        if (Option != null) { Flags[0] = true; }
        if (Offset != null) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        writer.Write(Id);
        if (Flags[0]) { writer.Write(Option); }
        if (Flags[1]) { writer.Write(Offset); }
        writer.Write(Limit);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Peer = reader.Read<MyTelegram.Schema.IInputPeer>();
        Id = reader.ReadInt32();
        if (Flags[0]) { Option = reader.ReadBytes(); }
        if (Flags[1]) { Offset = reader.ReadString(); }
        Limit = reader.ReadInt32();
    }
}
