// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Set a custom <a href="https://corefork.telegram.org/api/wallpapers">wallpaper »</a> in a specific private chat with another user.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// 400 WALLPAPER_INVALID The specified wallpaper is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.setChatWallPaper" />
///</summary>
[TlObject(0x8ffacae1)]
public sealed class RequestSetChatWallPaper : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0x8ffacae1;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool ForBoth { get; set; }
    public bool Revert { get; set; }

    ///<summary>
    /// The private chat where the wallpaper will be set
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/wallpapers">wallpaper »</a>, obtained as described in the <a href="https://corefork.telegram.org/api/wallpapers#uploading-wallpapers">wallpaper documentation »</a>; must <strong>not</strong> be provided when installing a wallpaper obtained from a <a href="https://corefork.telegram.org/constructor/messageActionSetChatWallPaper">messageActionSetChatWallPaper</a> service message (<code>id</code> must be provided, instead).
    /// See <a href="https://corefork.telegram.org/type/InputWallPaper" />
    ///</summary>
    public MyTelegram.Schema.IInputWallPaper? Wallpaper { get; set; }

    ///<summary>
    /// Wallpaper settings, obtained as described in the <a href="https://corefork.telegram.org/api/wallpapers#uploading-wallpapers">wallpaper documentation »</a> or from <a href="https://corefork.telegram.org/constructor/messageActionSetChatWallPaper">messageActionSetChatWallPaper</a>.<code>wallpaper</code>.<code>settings</code>.
    /// See <a href="https://corefork.telegram.org/type/WallPaperSettings" />
    ///</summary>
    public MyTelegram.Schema.IWallPaperSettings? Settings { get; set; }

    ///<summary>
    /// If the wallpaper was obtained from a <a href="https://corefork.telegram.org/constructor/messageActionSetChatWallPaper">messageActionSetChatWallPaper</a> service message, must contain the ID of that message.
    ///</summary>
    public int? Id { get; set; }

    public void ComputeFlag()
    {
        if (ForBoth) { Flags[3] = true; }
        if (Revert) { Flags[4] = true; }
        if (Wallpaper != null) { Flags[0] = true; }
        if (Settings != null) { Flags[2] = true; }
        if (/*Id != 0 && */Id.HasValue) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        if (Flags[0]) { writer.Write(Wallpaper); }
        if (Flags[2]) { writer.Write(Settings); }
        if (Flags[1]) { writer.Write(Id.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[3]) { ForBoth = true; }
        if (Flags[4]) { Revert = true; }
        Peer = reader.Read<MyTelegram.Schema.IInputPeer>();
        if (Flags[0]) { Wallpaper = reader.Read<MyTelegram.Schema.IInputWallPaper>(); }
        if (Flags[2]) { Settings = reader.Read<MyTelegram.Schema.IWallPaperSettings>(); }
        if (Flags[1]) { Id = reader.ReadInt32(); }
    }
}
