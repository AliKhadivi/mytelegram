// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Specifies the chats that <strong>can</strong> receive Telegram Business <a href="https://corefork.telegram.org/api/business#away-messages">away »</a> and <a href="https://corefork.telegram.org/api/business#greeting-messages">greeting »</a> messages.If <code>exclude_selected</code> is set, specifies all chats that <strong>cannot</strong> receive Telegram Business <a href="https://corefork.telegram.org/api/business#away-messages">away »</a> and <a href="https://corefork.telegram.org/api/business#greeting-messages">greeting »</a> messages.
/// See <a href="https://corefork.telegram.org/constructor/inputBusinessRecipients" />
///</summary>
[TlObject(0x6f8b32aa)]
public sealed class TInputBusinessRecipients : IInputBusinessRecipients
{
    public uint ConstructorId => 0x6f8b32aa;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// All existing private chats.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExistingChats { get; set; }

    ///<summary>
    /// All new private chats.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NewChats { get; set; }

    ///<summary>
    /// All private chats with contacts.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Contacts { get; set; }

    ///<summary>
    /// All private chats with non-contacts.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NonContacts { get; set; }

    ///<summary>
    /// If set, inverts the selection.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeSelected { get; set; }

    ///<summary>
    /// Only private chats with the specified users.
    ///</summary>
    public TVector<MyTelegram.Schema.IInputUser>? Users { get; set; }

    public void ComputeFlag()
    {
        if (ExistingChats) { Flags[0] = true; }
        if (NewChats) { Flags[1] = true; }
        if (Contacts) { Flags[2] = true; }
        if (NonContacts) { Flags[3] = true; }
        if (ExcludeSelected) { Flags[5] = true; }
        if (Users?.Count > 0) { Flags[4] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[4]) { writer.Write(Users); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { ExistingChats = true; }
        if (Flags[1]) { NewChats = true; }
        if (Flags[2]) { Contacts = true; }
        if (Flags[3]) { NonContacts = true; }
        if (Flags[5]) { ExcludeSelected = true; }
        if (Flags[4]) { Users = reader.Read<TVector<MyTelegram.Schema.IInputUser>>(); }
    }
}