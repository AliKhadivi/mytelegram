// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Specifies the private chats that a <a href="https://corefork.telegram.org/api/business#connected-bots">connected business bot »</a> may receive messages and interact with.
/// See <a href="https://corefork.telegram.org/constructor/businessBotRecipients" />
///</summary>
[TlObject(0xb88cf373)]
public sealed class TBusinessBotRecipients : IBusinessBotRecipients
{
    public uint ConstructorId => 0xb88cf373;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Selects all existing private chats.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExistingChats { get; set; }

    ///<summary>
    /// Selects all new private chats.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NewChats { get; set; }

    ///<summary>
    /// Selects all private chats with contacts.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Contacts { get; set; }

    ///<summary>
    /// Selects all private chats with non-contacts.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NonContacts { get; set; }

    ///<summary>
    /// If set, then all private chats <em>except</em> the ones selected by <code>existing_chats</code>, <code>new_chats</code>, <code>contacts</code>, <code>non_contacts</code> and <code>users</code> are chosen. <br>Note that if this flag is set, any values passed in <code>exclude_users</code> will be merged and moved into <code>users</code> by the server, thus <code>exclude_users</code> will always be empty.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeSelected { get; set; }

    ///<summary>
    /// Explicitly selected private chats.
    ///</summary>
    public TVector<long>? Users { get; set; }

    ///<summary>
    /// Identifiers of private chats that are always excluded.
    ///</summary>
    public TVector<long>? ExcludeUsers { get; set; }

    public void ComputeFlag()
    {
        if (ExistingChats) { Flags[0] = true; }
        if (NewChats) { Flags[1] = true; }
        if (Contacts) { Flags[2] = true; }
        if (NonContacts) { Flags[3] = true; }
        if (ExcludeSelected) { Flags[5] = true; }
        if (Users?.Count > 0) { Flags[4] = true; }
        if (ExcludeUsers?.Count > 0) { Flags[6] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[4]) { writer.Write(Users); }
        if (Flags[6]) { writer.Write(ExcludeUsers); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { ExistingChats = true; }
        if (Flags[1]) { NewChats = true; }
        if (Flags[2]) { Contacts = true; }
        if (Flags[3]) { NonContacts = true; }
        if (Flags[5]) { ExcludeSelected = true; }
        if (Flags[4]) { Users = reader.Read<TVector<long>>(); }
        if (Flags[6]) { ExcludeUsers = reader.Read<TVector<long>>(); }
    }
}