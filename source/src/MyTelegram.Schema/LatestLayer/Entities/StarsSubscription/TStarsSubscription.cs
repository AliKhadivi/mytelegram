// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/starsSubscription" />
///</summary>
[TlObject(0x538ecf18)]
public sealed class TStarsSubscription : IStarsSubscription
{
    public uint ConstructorId => 0x538ecf18;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Canceled { get; set; }
    public bool CanRefulfill { get; set; }
    public bool MissingBalance { get; set; }
    public string Id { get; set; }
    public MyTelegram.Schema.IPeer Peer { get; set; }
    public int UntilDate { get; set; }
    public MyTelegram.Schema.IStarsSubscriptionPricing Pricing { get; set; }
    public string? ChatInviteHash { get; set; }

    public void ComputeFlag()
    {
        if (Canceled) { Flags[0] = true; }
        if (CanRefulfill) { Flags[1] = true; }
        if (MissingBalance) { Flags[2] = true; }
        if (ChatInviteHash != null) { Flags[3] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Peer);
        writer.Write(UntilDate);
        writer.Write(Pricing);
        if (Flags[3]) { writer.Write(ChatInviteHash); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Canceled = true; }
        if (Flags[1]) { CanRefulfill = true; }
        if (Flags[2]) { MissingBalance = true; }
        Id = reader.ReadString();
        Peer = reader.Read<MyTelegram.Schema.IPeer>();
        UntilDate = reader.ReadInt32();
        Pricing = reader.Read<MyTelegram.Schema.IStarsSubscriptionPricing>();
        if (Flags[3]) { ChatInviteHash = reader.ReadString(); }
    }
}