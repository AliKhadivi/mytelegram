// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/factCheck" />
///</summary>
[TlObject(0xb89bfccf)]
public sealed class TFactCheck : IFactCheck
{
    public uint ConstructorId => 0xb89bfccf;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NeedCheck { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string? Country { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/TextWithEntities" />
    ///</summary>
    public MyTelegram.Schema.ITextWithEntities? Text { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a>
    ///</summary>
    public long Hash { get; set; }

    public void ComputeFlag()
    {
        if (NeedCheck) { Flags[0] = true; }
        if (Country != null) { Flags[1] = true; }
        if (Text != null) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[1]) { writer.Write(Country); }
        if (Flags[1]) { writer.Write(Text); }
        writer.Write(Hash);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { NeedCheck = true; }
        if (Flags[1]) { Country = reader.ReadString(); }
        if (Flags[1]) { Text = reader.Read<MyTelegram.Schema.ITextWithEntities>(); }
        Hash = reader.ReadInt64();
    }
}