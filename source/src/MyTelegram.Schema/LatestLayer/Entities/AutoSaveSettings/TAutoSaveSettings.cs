// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Media autosave settings
/// See <a href="https://corefork.telegram.org/constructor/autoSaveSettings" />
///</summary>
[TlObject(0xc84834ce)]
public sealed class TAutoSaveSettings : IAutoSaveSettings
{
    public uint ConstructorId => 0xc84834ce;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether photos should be autosaved to the gallery.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Photos { get; set; }

    ///<summary>
    /// Whether videos should be autosaved to the gallery.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Videos { get; set; }

    ///<summary>
    /// If set, specifies a size limit for autosavable videos
    ///</summary>
    public long? VideoMaxSize { get; set; }

    public void ComputeFlag()
    {
        if (Photos) { Flags[0] = true; }
        if (Videos) { Flags[1] = true; }
        if (/*VideoMaxSize != 0 &&*/ VideoMaxSize.HasValue) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[2]) { writer.Write(VideoMaxSize.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Photos = true; }
        if (Flags[1]) { Videos = true; }
        if (Flags[2]) { VideoMaxSize = reader.ReadInt64(); }
    }
}