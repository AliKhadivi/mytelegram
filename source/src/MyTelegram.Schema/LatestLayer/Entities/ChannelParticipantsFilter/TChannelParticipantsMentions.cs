// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// This filter is used when looking for supergroup members to mention.<br>
/// This filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific <a href="https://corefork.telegram.org/api/threads">thread</a> through the <a href="https://corefork.telegram.org/api/threads#channel-comments">comment section</a> of a channel.
/// See <a href="https://corefork.telegram.org/constructor/channelParticipantsMentions" />
///</summary>
[TlObject(0xe04b5ceb)]
public sealed class TChannelParticipantsMentions : IChannelParticipantsFilter
{
    public uint ConstructorId => 0xe04b5ceb;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Filter by user name or username
    ///</summary>
    public string? Q { get; set; }

    ///<summary>
    /// Look only for users that posted in this <a href="https://corefork.telegram.org/api/threads">thread</a>
    ///</summary>
    public int? TopMsgId { get; set; }

    public void ComputeFlag()
    {
        if (Q != null) { Flags[0] = true; }
        if (/*TopMsgId != 0 && */TopMsgId.HasValue) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(Q); }
        if (Flags[1]) { writer.Write(TopMsgId.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Q = reader.ReadString(); }
        if (Flags[1]) { TopMsgId = reader.ReadInt32(); }
    }
}