// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// An embedded webpage
/// See <a href="https://corefork.telegram.org/constructor/pageBlockEmbed" />
///</summary>
[TlObject(0xa8718dc5)]
public sealed class TPageBlockEmbed : IPageBlock
{
    public uint ConstructorId => 0xa8718dc5;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the block should be full width
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool FullWidth { get; set; }

    ///<summary>
    /// Whether scrolling should be allowed
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AllowScrolling { get; set; }

    ///<summary>
    /// Web page URL, if available
    ///</summary>
    public string? Url { get; set; }

    ///<summary>
    /// HTML-markup of the embedded page
    ///</summary>
    public string? Html { get; set; }

    ///<summary>
    /// Poster photo, if available
    ///</summary>
    public long? PosterPhotoId { get; set; }

    ///<summary>
    /// Block width, if known
    ///</summary>
    public int? W { get; set; }

    ///<summary>
    /// Block height, if known
    ///</summary>
    public int? H { get; set; }

    ///<summary>
    /// Caption
    /// See <a href="https://corefork.telegram.org/type/PageCaption" />
    ///</summary>
    public MyTelegram.Schema.IPageCaption Caption { get; set; }

    public void ComputeFlag()
    {
        if (FullWidth) { Flags[0] = true; }
        if (AllowScrolling) { Flags[3] = true; }
        if (Url != null) { Flags[1] = true; }
        if (Html != null) { Flags[2] = true; }
        if (/*PosterPhotoId != 0 &&*/ PosterPhotoId.HasValue) { Flags[4] = true; }
        if (/*W != 0 && */W.HasValue) { Flags[5] = true; }
        if (/*H != 0 && */H.HasValue) { Flags[5] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[1]) { writer.Write(Url); }
        if (Flags[2]) { writer.Write(Html); }
        if (Flags[4]) { writer.Write(PosterPhotoId.Value); }
        if (Flags[5]) { writer.Write(W.Value); }
        if (Flags[5]) { writer.Write(H.Value); }
        writer.Write(Caption);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { FullWidth = true; }
        if (Flags[3]) { AllowScrolling = true; }
        if (Flags[1]) { Url = reader.ReadString(); }
        if (Flags[2]) { Html = reader.ReadString(); }
        if (Flags[4]) { PosterPhotoId = reader.ReadInt64(); }
        if (Flags[5]) { W = reader.ReadInt32(); }
        if (Flags[5]) { H = reader.ReadInt32(); }
        Caption = reader.Read<MyTelegram.Schema.IPageCaption>();
    }
}