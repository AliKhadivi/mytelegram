// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Coordinates and size of a clicable rectangular area on top of a story.
/// See <a href="https://corefork.telegram.org/constructor/mediaAreaCoordinates" />
///</summary>
[TlObject(0x3d1ea4e)]
public sealed class TMediaAreaCoordinates : IMediaAreaCoordinates
{
    public uint ConstructorId => 0x3d1ea4e;
    ///<summary>
    /// The abscissa of the rectangle's center, as a percentage of the media width (0-100).
    ///</summary>
    public double X { get; set; }

    ///<summary>
    /// The ordinate of the rectangle's center, as a percentage of the media height (0-100).
    ///</summary>
    public double Y { get; set; }

    ///<summary>
    /// The width of the rectangle, as a percentage of the media width (0-100).
    ///</summary>
    public double W { get; set; }

    ///<summary>
    /// The height of the rectangle, as a percentage of the media height (0-100).
    ///</summary>
    public double H { get; set; }

    ///<summary>
    /// Clockwise rotation angle of the rectangle, in degrees (0-360).
    ///</summary>
    public double Rotation { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(X);
        writer.Write(Y);
        writer.Write(W);
        writer.Write(H);
        writer.Write(Rotation);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        X = reader.ReadDouble();
        Y = reader.ReadDouble();
        W = reader.ReadDouble();
        H = reader.ReadDouble();
        Rotation = reader.ReadDouble();
    }
}