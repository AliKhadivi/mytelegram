// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Describes <a href="https://corefork.telegram.org/api/stars">Telegram Star revenue balances »</a>.
/// See <a href="https://corefork.telegram.org/constructor/starsRevenueStatus" />
///</summary>
[TlObject(0x79342946)]
public sealed class TStarsRevenueStatus : IStarsRevenueStatus
{
    public uint ConstructorId => 0x79342946;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, the user may <a href="https://corefork.telegram.org/api/stars#withdrawing-revenue">withdraw</a> up to <code>available_balance</code> stars.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool WithdrawalEnabled { get; set; }

    ///<summary>
    /// Amount of not-yet-withdrawn Telegram Stars.
    ///</summary>
    public long CurrentBalance { get; set; }

    ///<summary>
    /// Amount of withdrawable Telegram Stars.
    ///</summary>
    public long AvailableBalance { get; set; }

    ///<summary>
    /// Total amount of earned Telegram Stars.
    ///</summary>
    public long OverallRevenue { get; set; }

    ///<summary>
    /// Unixtime indicating when will withdrawal be available to the user. If not set, withdrawal can be started now.
    ///</summary>
    public int? NextWithdrawalAt { get; set; }

    public void ComputeFlag()
    {
        if (WithdrawalEnabled) { Flags[0] = true; }
        if (/*NextWithdrawalAt != 0 && */NextWithdrawalAt.HasValue) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(CurrentBalance);
        writer.Write(AvailableBalance);
        writer.Write(OverallRevenue);
        if (Flags[1]) { writer.Write(NextWithdrawalAt.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { WithdrawalEnabled = true; }
        CurrentBalance = reader.ReadInt64();
        AvailableBalance = reader.ReadInt64();
        OverallRevenue = reader.ReadInt64();
        if (Flags[1]) { NextWithdrawalAt = reader.ReadInt32(); }
    }
}