// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/bots/attach">bot mini app that can be launched from the attachment/side menu »</a>At least one of the <code>show_in_attach_menu</code> or the <code>show_in_side_menu</code> flags will always be set.
/// See <a href="https://corefork.telegram.org/constructor/attachMenuBot" />
///</summary>
[TlObject(0xd90d8dfe)]
public sealed class TAttachMenuBot : IAttachMenuBot
{
    public uint ConstructorId => 0xd90d8dfe;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, before launching the mini app the client should ask the user to add the mini app to the attachment/side menu, and only if the user accepts, after invoking <a href="https://corefork.telegram.org/method/messages.toggleBotInAttachMenu">messages.toggleBotInAttachMenu</a> the app should be opened.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Inactive { get; set; }

    ///<summary>
    /// Deprecated flag, can be ignored.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasSettings { get; set; }

    ///<summary>
    /// Whether the bot would like to send messages to the user.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool RequestWriteAccess { get; set; }

    ///<summary>
    /// Whether, when installed, an attachment menu entry should be shown for the Mini App.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ShowInAttachMenu { get; set; }

    ///<summary>
    /// Whether, when installed, an entry in the main view side menu should be shown for the Mini App.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ShowInSideMenu { get; set; }

    ///<summary>
    /// If <code>inactive</code> if set and the user hasn't previously accepted the third-party mini apps <a href="https://telegram.org/tos/mini-apps">Terms of Service</a> for this bot, when showing the mini app installation prompt, an additional mandatory checkbox to accept the <a href="https://telegram.org/tos/mini-apps">mini apps TOS</a> and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool SideMenuDisclaimerNeeded { get; set; }

    ///<summary>
    /// Bot ID
    ///</summary>
    public long BotId { get; set; }

    ///<summary>
    /// Attachment menu item name
    ///</summary>
    public string ShortName { get; set; }

    ///<summary>
    /// List of dialog types where this attachment menu entry should be shown
    ///</summary>
    public TVector<MyTelegram.Schema.IAttachMenuPeerType>? PeerTypes { get; set; }

    ///<summary>
    /// List of platform-specific static icons and animations to use for the attachment menu button
    ///</summary>
    public TVector<MyTelegram.Schema.IAttachMenuBotIcon> Icons { get; set; }

    public void ComputeFlag()
    {
        if (Inactive) { Flags[0] = true; }
        if (HasSettings) { Flags[1] = true; }
        if (RequestWriteAccess) { Flags[2] = true; }
        if (ShowInAttachMenu) { Flags[3] = true; }
        if (ShowInSideMenu) { Flags[4] = true; }
        if (SideMenuDisclaimerNeeded) { Flags[5] = true; }
        if (PeerTypes?.Count > 0) { Flags[3] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(BotId);
        writer.Write(ShortName);
        if (Flags[3]) { writer.Write(PeerTypes); }
        writer.Write(Icons);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Inactive = true; }
        if (Flags[1]) { HasSettings = true; }
        if (Flags[2]) { RequestWriteAccess = true; }
        if (Flags[3]) { ShowInAttachMenu = true; }
        if (Flags[4]) { ShowInSideMenu = true; }
        if (Flags[5]) { SideMenuDisclaimerNeeded = true; }
        BotId = reader.ReadInt64();
        ShortName = reader.ReadString();
        if (Flags[3]) { PeerTypes = reader.Read<TVector<MyTelegram.Schema.IAttachMenuPeerType>>(); }
        Icons = reader.Read<TVector<MyTelegram.Schema.IAttachMenuBotIcon>>();
    }
}