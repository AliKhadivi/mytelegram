// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Data center
/// See <a href="https://corefork.telegram.org/constructor/dcOption" />
///</summary>
[TlObject(0x18b7a10d)]
public sealed class TDcOption : IDcOption
{
    public uint ConstructorId => 0x18b7a10d;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the specified IP is an IPv6 address
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Ipv6 { get; set; }

    ///<summary>
    /// Whether this DC should only be used to <a href="https://corefork.telegram.org/api/files">download or upload files</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool MediaOnly { get; set; }

    ///<summary>
    /// Whether this DC only supports connection with <a href="https://corefork.telegram.org/mtproto/mtproto-transports#transport-obfuscation">transport obfuscation</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool TcpoOnly { get; set; }

    ///<summary>
    /// Whether this is a <a href="https://corefork.telegram.org/cdn">CDN DC</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Cdn { get; set; }

    ///<summary>
    /// If set, this IP should be used when connecting through a proxy
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Static { get; set; }

    ///<summary>
    /// If set, clients must connect using only the specified port, without trying any other port.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ThisPortOnly { get; set; }

    ///<summary>
    /// DC ID
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// IP address of DC
    ///</summary>
    public string IpAddress { get; set; }

    ///<summary>
    /// Port
    ///</summary>
    public int Port { get; set; }

    ///<summary>
    /// If the <code>tcpo_only</code> flag is set, specifies the secret to use when connecting using <a href="https://corefork.telegram.org/mtproto/mtproto-transports#transport-obfuscation">transport obfuscation</a>
    ///</summary>
    public byte[]? Secret { get; set; }

    public void ComputeFlag()
    {
        if (Ipv6) { Flags[0] = true; }
        if (MediaOnly) { Flags[1] = true; }
        if (TcpoOnly) { Flags[2] = true; }
        if (Cdn) { Flags[3] = true; }
        if (Static) { Flags[4] = true; }
        if (ThisPortOnly) { Flags[5] = true; }
        if (Secret != null) { Flags[10] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(IpAddress);
        writer.Write(Port);
        if (Flags[10]) { writer.Write(Secret); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Ipv6 = true; }
        if (Flags[1]) { MediaOnly = true; }
        if (Flags[2]) { TcpoOnly = true; }
        if (Flags[3]) { Cdn = true; }
        if (Flags[4]) { Static = true; }
        if (Flags[5]) { ThisPortOnly = true; }
        Id = reader.ReadInt32();
        IpAddress = reader.ReadString();
        Port = reader.ReadInt32();
        if (Flags[10]) { Secret = reader.ReadBytes(); }
    }
}