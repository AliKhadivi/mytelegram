// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Choose a channel
/// See <a href="https://corefork.telegram.org/constructor/requestPeerTypeBroadcast" />
///</summary>
[TlObject(0x339bef6c)]
public sealed class TRequestPeerTypeBroadcast : IRequestPeerType
{
    public uint ConstructorId => 0x339bef6c;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether to allow only choosing channels that were created by the current user.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Creator { get; set; }

    ///<summary>
    /// If specified, allows only choosing channels with or without a username, according to the value of <a href="https://corefork.telegram.org/type/Bool">Bool</a>.
    /// See <a href="https://corefork.telegram.org/type/Bool" />
    ///</summary>
    public bool? HasUsername { get; set; }

    ///<summary>
    /// If specified, allows only choosing channels where the current user is an admin with at least the specified admin rights.
    /// See <a href="https://corefork.telegram.org/type/ChatAdminRights" />
    ///</summary>
    public MyTelegram.Schema.IChatAdminRights? UserAdminRights { get; set; }

    ///<summary>
    /// If specified, allows only choosing channels where the bot is an admin with at least the specified admin rights.
    /// See <a href="https://corefork.telegram.org/type/ChatAdminRights" />
    ///</summary>
    public MyTelegram.Schema.IChatAdminRights? BotAdminRights { get; set; }

    public void ComputeFlag()
    {
        if (Creator) { Flags[0] = true; }
        if (HasUsername !=null) { Flags[3] = true; }
        if (UserAdminRights != null) { Flags[1] = true; }
        if (BotAdminRights != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[3]) { writer.Write(HasUsername.Value); }
        if (Flags[1]) { writer.Write(UserAdminRights); }
        if (Flags[2]) { writer.Write(BotAdminRights); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Creator = true; }
        if (Flags[3]) { HasUsername = reader.Read(); }
        if (Flags[1]) { UserAdminRights = reader.Read<MyTelegram.Schema.IChatAdminRights>(); }
        if (Flags[2]) { BotAdminRights = reader.Read<MyTelegram.Schema.IChatAdminRights>(); }
    }
}