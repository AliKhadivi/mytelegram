// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Info about a message sent to (received from) another user
/// See <a href="https://corefork.telegram.org/constructor/updateShortMessage" />
///</summary>
[TlObject(0x313bc7f8)]
public sealed class TUpdateShortMessage : IUpdates
{
    public uint ConstructorId => 0x313bc7f8;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the message is outgoing
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Out { get; set; }

    ///<summary>
    /// Whether we were mentioned in the message
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Mentioned { get; set; }

    ///<summary>
    /// Whether there are some <strong>unread</strong> mentions in this message
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool MediaUnread { get; set; }

    ///<summary>
    /// If true, the message is a silent message, no notifications should be triggered
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Silent { get; set; }

    ///<summary>
    /// The message ID
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// The ID of the sender (if <code>outgoing</code> will be the ID of the destination) of the message
    ///</summary>
    public long UserId { get; set; }

    ///<summary>
    /// The message
    ///</summary>
    public string Message { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/updates">PTS</a>
    ///</summary>
    public int Pts { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/updates">PTS count</a>
    ///</summary>
    public int PtsCount { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/updates">date</a>
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// Info about a forwarded message
    /// See <a href="https://corefork.telegram.org/type/MessageFwdHeader" />
    ///</summary>
    public MyTelegram.Schema.IMessageFwdHeader? FwdFrom { get; set; }

    ///<summary>
    /// Info about the inline bot used to generate this message
    ///</summary>
    public long? ViaBotId { get; set; }

    ///<summary>
    /// Reply and <a href="https://corefork.telegram.org/api/threads">thread</a> information
    /// See <a href="https://corefork.telegram.org/type/MessageReplyHeader" />
    ///</summary>
    public MyTelegram.Schema.IMessageReplyHeader? ReplyTo { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/entities">Entities</a> for styled text
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    ///<summary>
    /// Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well.
    ///</summary>
    public int? TtlPeriod { get; set; }

    public void ComputeFlag()
    {
        if (Out) { Flags[1] = true; }
        if (Mentioned) { Flags[4] = true; }
        if (MediaUnread) { Flags[5] = true; }
        if (Silent) { Flags[13] = true; }
        if (FwdFrom != null) { Flags[2] = true; }
        if (/*ViaBotId != 0 &&*/ ViaBotId.HasValue) { Flags[11] = true; }
        if (ReplyTo != null) { Flags[3] = true; }
        if (Entities?.Count > 0) { Flags[7] = true; }
        if (/*TtlPeriod != 0 && */TtlPeriod.HasValue) { Flags[25] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(UserId);
        writer.Write(Message);
        writer.Write(Pts);
        writer.Write(PtsCount);
        writer.Write(Date);
        if (Flags[2]) { writer.Write(FwdFrom); }
        if (Flags[11]) { writer.Write(ViaBotId.Value); }
        if (Flags[3]) { writer.Write(ReplyTo); }
        if (Flags[7]) { writer.Write(Entities); }
        if (Flags[25]) { writer.Write(TtlPeriod.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[1]) { Out = true; }
        if (Flags[4]) { Mentioned = true; }
        if (Flags[5]) { MediaUnread = true; }
        if (Flags[13]) { Silent = true; }
        Id = reader.ReadInt32();
        UserId = reader.ReadInt64();
        Message = reader.ReadString();
        Pts = reader.ReadInt32();
        PtsCount = reader.ReadInt32();
        Date = reader.ReadInt32();
        if (Flags[2]) { FwdFrom = reader.Read<MyTelegram.Schema.IMessageFwdHeader>(); }
        if (Flags[11]) { ViaBotId = reader.ReadInt64(); }
        if (Flags[3]) { ReplyTo = reader.Read<MyTelegram.Schema.IMessageReplyHeader>(); }
        if (Flags[7]) { Entities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        if (Flags[25]) { TtlPeriod = reader.ReadInt32(); }
    }
}