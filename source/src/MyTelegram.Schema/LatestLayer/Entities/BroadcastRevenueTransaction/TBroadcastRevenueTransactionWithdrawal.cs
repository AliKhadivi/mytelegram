// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/broadcastRevenueTransactionWithdrawal" />
///</summary>
[TlObject(0x5a590978)]
public sealed class TBroadcastRevenueTransactionWithdrawal : IBroadcastRevenueTransaction
{
    public uint ConstructorId => 0x5a590978;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Pending { get; set; }
    public bool Failed { get; set; }
    public long Amount { get; set; }
    public int Date { get; set; }
    public string Provider { get; set; }
    public int? TransactionDate { get; set; }
    public string? TransactionUrl { get; set; }

    public void ComputeFlag()
    {
        if (Pending) { Flags[0] = true; }
        if (Failed) { Flags[2] = true; }
        if (/*TransactionDate != 0 && */TransactionDate.HasValue) { Flags[1] = true; }
        if (TransactionUrl != null) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Amount);
        writer.Write(Date);
        writer.Write(Provider);
        if (Flags[1]) { writer.Write(TransactionDate.Value); }
        if (Flags[1]) { writer.Write(TransactionUrl); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Pending = true; }
        if (Flags[2]) { Failed = true; }
        Amount = reader.ReadInt64();
        Date = reader.ReadInt32();
        Provider = reader.ReadString();
        if (Flags[1]) { TransactionDate = reader.ReadInt32(); }
        if (Flags[1]) { TransactionUrl = reader.ReadString(); }
    }
}