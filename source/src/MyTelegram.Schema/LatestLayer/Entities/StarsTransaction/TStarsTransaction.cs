// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/starsTransaction" />
///</summary>
[TlObject(0x2db5418f)]
public sealed class TStarsTransaction : IStarsTransaction
{
    public uint ConstructorId => 0x2db5418f;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Refund { get; set; }
    public bool Pending { get; set; }
    public bool Failed { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string Id { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public long Stars { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/StarsTransactionPeer" />
    ///</summary>
    public MyTelegram.Schema.IStarsTransactionPeer Peer { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string? Title { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string? Description { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/WebDocument" />
    ///</summary>
    public MyTelegram.Schema.IWebDocument? Photo { get; set; }
    public int? TransactionDate { get; set; }
    public string? TransactionUrl { get; set; }
    public byte[]? BotPayload { get; set; }
    public int? MsgId { get; set; }
    public TVector<MyTelegram.Schema.IMessageMedia>? ExtendedMedia { get; set; }

    public void ComputeFlag()
    {
        if (Refund) { Flags[3] = true; }
        if (Pending) { Flags[4] = true; }
        if (Failed) { Flags[6] = true; }
        if (Title != null) { Flags[0] = true; }
        if (Description != null) { Flags[1] = true; }
        if (Photo != null) { Flags[2] = true; }
        if (/*TransactionDate != 0 && */TransactionDate.HasValue) { Flags[5] = true; }
        if (TransactionUrl != null) { Flags[5] = true; }
        if (BotPayload != null) { Flags[7] = true; }
        if (/*MsgId != 0 && */MsgId.HasValue) { Flags[8] = true; }
        if (ExtendedMedia?.Count > 0) { Flags[9] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Stars);
        writer.Write(Date);
        writer.Write(Peer);
        if (Flags[0]) { writer.Write(Title); }
        if (Flags[1]) { writer.Write(Description); }
        if (Flags[2]) { writer.Write(Photo); }
        if (Flags[5]) { writer.Write(TransactionDate.Value); }
        if (Flags[5]) { writer.Write(TransactionUrl); }
        if (Flags[7]) { writer.Write(BotPayload); }
        if (Flags[8]) { writer.Write(MsgId.Value); }
        if (Flags[9]) { writer.Write(ExtendedMedia); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[3]) { Refund = true; }
        if (Flags[4]) { Pending = true; }
        if (Flags[6]) { Failed = true; }
        Id = reader.ReadString();
        Stars = reader.ReadInt64();
        Date = reader.ReadInt32();
        Peer = reader.Read<MyTelegram.Schema.IStarsTransactionPeer>();
        if (Flags[0]) { Title = reader.ReadString(); }
        if (Flags[1]) { Description = reader.ReadString(); }
        if (Flags[2]) { Photo = reader.Read<MyTelegram.Schema.IWebDocument>(); }
        if (Flags[5]) { TransactionDate = reader.ReadInt32(); }
        if (Flags[5]) { TransactionUrl = reader.ReadString(); }
        if (Flags[7]) { BotPayload = reader.ReadBytes(); }
        if (Flags[8]) { MsgId = reader.ReadInt32(); }
        if (Flags[9]) { ExtendedMedia = reader.Read<TVector<MyTelegram.Schema.IMessageMedia>>(); }
    }
}