// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A folder imported using a <a href="https://corefork.telegram.org/api/links#chat-folder-links">chat folder deep link »</a>.
/// See <a href="https://corefork.telegram.org/constructor/dialogFilterChatlist" />
///</summary>
[TlObject(0x9fe28ea4)]
public sealed class TDialogFilterChatlist : IDialogFilter
{
    public uint ConstructorId => 0x9fe28ea4;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the current user has created some <a href="https://corefork.telegram.org/api/links#chat-folder-links">chat folder deep links »</a> to share the folder as well.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasMyInvites { get; set; }

    ///<summary>
    /// ID of the folder
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// Name of the folder (max 12 UTF-8 chars)
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Emoji to use as icon for the folder.
    ///</summary>
    public string? Emoticon { get; set; }

    ///<summary>
    /// A color ID for the <a href="https://corefork.telegram.org/api/folders#folder-tags">folder tag associated to this folder, see here »</a> for more info.
    ///</summary>
    public int? Color { get; set; }

    ///<summary>
    /// Pinned chats, <a href="https://corefork.telegram.org/api/folders">folders</a> can have unlimited pinned chats
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> PinnedPeers { get; set; }

    ///<summary>
    /// Chats to include in the folder
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> IncludePeers { get; set; }

    public void ComputeFlag()
    {
        if (HasMyInvites) { Flags[26] = true; }
        if (Emoticon != null) { Flags[25] = true; }
        if (/*Color != 0 && */Color.HasValue) { Flags[27] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Title);
        if (Flags[25]) { writer.Write(Emoticon); }
        if (Flags[27]) { writer.Write(Color.Value); }
        writer.Write(PinnedPeers);
        writer.Write(IncludePeers);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[26]) { HasMyInvites = true; }
        Id = reader.ReadInt32();
        Title = reader.ReadString();
        if (Flags[25]) { Emoticon = reader.ReadString(); }
        if (Flags[27]) { Color = reader.ReadInt32(); }
        PinnedPeers = reader.Read<TVector<MyTelegram.Schema.IInputPeer>>();
        IncludePeers = reader.Read<TVector<MyTelegram.Schema.IInputPeer>>();
    }
}