// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Dialog filter AKA <a href="https://corefork.telegram.org/api/folders">folder</a>
/// See <a href="https://corefork.telegram.org/constructor/dialogFilter" />
///</summary>
[TlObject(0x5fb5523b)]
public sealed class TDialogFilter : IDialogFilter
{
    public uint ConstructorId => 0x5fb5523b;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether to include all contacts in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Contacts { get; set; }

    ///<summary>
    /// Whether to include all non-contacts in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NonContacts { get; set; }

    ///<summary>
    /// Whether to include all groups in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Groups { get; set; }

    ///<summary>
    /// Whether to include all channels in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Broadcasts { get; set; }

    ///<summary>
    /// Whether to include all bots in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Bots { get; set; }

    ///<summary>
    /// Whether to exclude muted chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeMuted { get; set; }

    ///<summary>
    /// Whether to exclude read chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeRead { get; set; }

    ///<summary>
    /// Whether to exclude archived chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeArchived { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/folders">Folder</a> ID
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/folders">Folder</a> name
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Emoji to use as icon for the folder.
    ///</summary>
    public string? Emoticon { get; set; }
    public int? Color { get; set; }

    ///<summary>
    /// Pinned chats, <a href="https://corefork.telegram.org/api/folders">folders</a> can have unlimited pinned chats
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> PinnedPeers { get; set; }

    ///<summary>
    /// Include the following chats in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> IncludePeers { get; set; }

    ///<summary>
    /// Exclude the following chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> ExcludePeers { get; set; }

    public void ComputeFlag()
    {
        if (Contacts) { Flags[0] = true; }
        if (NonContacts) { Flags[1] = true; }
        if (Groups) { Flags[2] = true; }
        if (Broadcasts) { Flags[3] = true; }
        if (Bots) { Flags[4] = true; }
        if (ExcludeMuted) { Flags[11] = true; }
        if (ExcludeRead) { Flags[12] = true; }
        if (ExcludeArchived) { Flags[13] = true; }
        if (Emoticon != null) { Flags[25] = true; }
        if (/*Color != 0 && */Color.HasValue) { Flags[27] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Title);
        if (Flags[25]) { writer.Write(Emoticon); }
        if (Flags[27]) { writer.Write(Color.Value); }
        writer.Write(PinnedPeers);
        writer.Write(IncludePeers);
        writer.Write(ExcludePeers);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Contacts = true; }
        if (Flags[1]) { NonContacts = true; }
        if (Flags[2]) { Groups = true; }
        if (Flags[3]) { Broadcasts = true; }
        if (Flags[4]) { Bots = true; }
        if (Flags[11]) { ExcludeMuted = true; }
        if (Flags[12]) { ExcludeRead = true; }
        if (Flags[13]) { ExcludeArchived = true; }
        Id = reader.ReadInt32();
        Title = reader.ReadString();
        if (Flags[25]) { Emoticon = reader.ReadString(); }
        if (Flags[27]) { Color = reader.ReadInt32(); }
        PinnedPeers = reader.Read<TVector<MyTelegram.Schema.IInputPeer>>();
        IncludePeers = reader.Read<TVector<MyTelegram.Schema.IInputPeer>>();
        ExcludePeers = reader.Read<TVector<MyTelegram.Schema.IInputPeer>>();
    }
}