// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Info about a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>, shared by a user with the currently logged in bot using <a href="https://corefork.telegram.org/method/messages.sendBotRequestedPeer">messages.sendBotRequestedPeer</a>.All fields except the ID are optional, and will be populated if present on the chosen channel/supergroup, according to the parameters of the requesting <a href="https://corefork.telegram.org/constructor/inputKeyboardButtonRequestPeer">inputKeyboardButtonRequestPeer</a>.
/// See <a href="https://corefork.telegram.org/constructor/requestedPeerChannel" />
///</summary>
[TlObject(0x8ba403e4)]
public sealed class TRequestedPeerChannel : IRequestedPeer
{
    public uint ConstructorId => 0x8ba403e4;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Channel/supergroup ID.
    ///</summary>
    public long ChannelId { get; set; }

    ///<summary>
    /// Channel/supergroup title.
    ///</summary>
    public string? Title { get; set; }

    ///<summary>
    /// Channel/supergroup username.
    ///</summary>
    public string? Username { get; set; }

    ///<summary>
    /// Channel/supergroup photo.
    /// See <a href="https://corefork.telegram.org/type/Photo" />
    ///</summary>
    public MyTelegram.Schema.IPhoto? Photo { get; set; }

    public void ComputeFlag()
    {
        if (Title != null) { Flags[0] = true; }
        if (Username != null) { Flags[1] = true; }
        if (Photo != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ChannelId);
        if (Flags[0]) { writer.Write(Title); }
        if (Flags[1]) { writer.Write(Username); }
        if (Flags[2]) { writer.Write(Photo); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        ChannelId = reader.ReadInt64();
        if (Flags[0]) { Title = reader.ReadString(); }
        if (Flags[1]) { Username = reader.ReadString(); }
        if (Flags[2]) { Photo = reader.Read<MyTelegram.Schema.IPhoto>(); }
    }
}