// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Document (media of any type except for photos)
/// See <a href="https://corefork.telegram.org/constructor/inputBotInlineResultDocument" />
///</summary>
[TlObject(0xfff8fdc4)]
public sealed class TInputBotInlineResultDocument : IInputBotInlineResult
{
    public uint ConstructorId => 0xfff8fdc4;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Result ID
    ///</summary>
    public string Id { get; set; }

    ///<summary>
    /// Result type (see <a href="https://corefork.telegram.org/bots/api#inlinequeryresult">bot API docs</a>)
    ///</summary>
    public string Type { get; set; }

    ///<summary>
    /// Result title
    ///</summary>
    public string? Title { get; set; }

    ///<summary>
    /// Result description
    ///</summary>
    public string? Description { get; set; }

    ///<summary>
    /// Document to send
    /// See <a href="https://corefork.telegram.org/type/InputDocument" />
    ///</summary>
    public MyTelegram.Schema.IInputDocument Document { get; set; }

    ///<summary>
    /// Message to send when the result is selected
    /// See <a href="https://corefork.telegram.org/type/InputBotInlineMessage" />
    ///</summary>
    public MyTelegram.Schema.IInputBotInlineMessage SendMessage { get; set; }

    public void ComputeFlag()
    {
        if (Title != null) { Flags[1] = true; }
        if (Description != null) { Flags[2] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Type);
        if (Flags[1]) { writer.Write(Title); }
        if (Flags[2]) { writer.Write(Description); }
        writer.Write(Document);
        writer.Write(SendMessage);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Id = reader.ReadString();
        Type = reader.ReadString();
        if (Flags[1]) { Title = reader.ReadString(); }
        if (Flags[2]) { Description = reader.ReadString(); }
        Document = reader.Read<MyTelegram.Schema.IInputDocument>();
        SendMessage = reader.Read<MyTelegram.Schema.IInputBotInlineMessage>();
    }
}