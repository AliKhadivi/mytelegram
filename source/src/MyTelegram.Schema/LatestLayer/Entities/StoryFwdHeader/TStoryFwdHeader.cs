// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/storyFwdHeader" />
///</summary>
[TlObject(0xb826e150)]
public sealed class TStoryFwdHeader : IStoryFwdHeader
{
    public uint ConstructorId => 0xb826e150;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Modified { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? From { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string? FromName { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? StoryId { get; set; }

    public void ComputeFlag()
    {
        if (Modified) { Flags[3] = true; }
        if (From != null) { Flags[0] = true; }
        if (FromName != null) { Flags[1] = true; }
        if (/*StoryId != 0 && */StoryId.HasValue) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(From); }
        if (Flags[1]) { writer.Write(FromName); }
        if (Flags[2]) { writer.Write(StoryId.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[3]) { Modified = true; }
        if (Flags[0]) { From = reader.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags[1]) { FromName = reader.ReadString(); }
        if (Flags[2]) { StoryId = reader.ReadInt32(); }
    }
}