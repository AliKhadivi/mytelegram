// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// List of actions that are possible when interacting with this user, to be shown as suggested actions in the <a href="https://corefork.telegram.org/api/action-bar">chat action bar »</a>, see <a href="https://corefork.telegram.org/api/action-bar">here »</a> for more info.
/// See <a href="https://corefork.telegram.org/constructor/peerSettings" />
///</summary>
[TlObject(0xacd66c5e)]
public sealed class TPeerSettings : IPeerSettings
{
    public uint ConstructorId => 0xacd66c5e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether we can still report the user for spam
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReportSpam { get; set; }

    ///<summary>
    /// Whether we can add the user as contact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AddContact { get; set; }

    ///<summary>
    /// Whether we can block the user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BlockContact { get; set; }

    ///<summary>
    /// Whether we can share the user's contact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ShareContact { get; set; }

    ///<summary>
    /// Whether a special exception for contacts is needed
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NeedContactsException { get; set; }

    ///<summary>
    /// Whether we can report a geogroup as irrelevant for this location
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReportGeo { get; set; }

    ///<summary>
    /// Whether this peer was automatically archived according to <a href="https://corefork.telegram.org/constructor/globalPrivacySettings">privacy settings</a> and can be unarchived
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Autoarchived { get; set; }

    ///<summary>
    /// If set, this is a recently created group chat to which new members can be invited
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool InviteMembers { get; set; }

    ///<summary>
    /// This flag is set if <code>request_chat_title</code> and <code>request_chat_date</code> fields are set and the <a href="https://corefork.telegram.org/api/invites#join-requests">join request »</a> is related to a channel (otherwise if only the request fields are set, the <a href="https://corefork.telegram.org/api/invites#join-requests">join request »</a> is related to a chat).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool RequestChatBroadcast { get; set; }
    public bool BusinessBotPaused { get; set; }
    public bool BusinessBotCanReply { get; set; }

    ///<summary>
    /// Distance in meters between us and this peer
    ///</summary>
    public int? GeoDistance { get; set; }

    ///<summary>
    /// If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat/channel's title.
    ///</summary>
    public string? RequestChatTitle { get; set; }

    ///<summary>
    /// If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the <a href="https://corefork.telegram.org/api/invites#join-requests">join request »</a> was sent.
    ///</summary>
    public int? RequestChatDate { get; set; }
    public long? BusinessBotId { get; set; }
    public string? BusinessBotManageUrl { get; set; }

    public void ComputeFlag()
    {
        if (ReportSpam) { Flags[0] = true; }
        if (AddContact) { Flags[1] = true; }
        if (BlockContact) { Flags[2] = true; }
        if (ShareContact) { Flags[3] = true; }
        if (NeedContactsException) { Flags[4] = true; }
        if (ReportGeo) { Flags[5] = true; }
        if (Autoarchived) { Flags[7] = true; }
        if (InviteMembers) { Flags[8] = true; }
        if (RequestChatBroadcast) { Flags[10] = true; }
        if (BusinessBotPaused) { Flags[11] = true; }
        if (BusinessBotCanReply) { Flags[12] = true; }
        if (/*GeoDistance != 0 && */GeoDistance.HasValue) { Flags[6] = true; }
        if (RequestChatTitle != null) { Flags[9] = true; }
        if (/*RequestChatDate != 0 && */RequestChatDate.HasValue) { Flags[9] = true; }
        if (/*BusinessBotId != 0 &&*/ BusinessBotId.HasValue) { Flags[13] = true; }
        if (BusinessBotManageUrl != null) { Flags[13] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[6]) { writer.Write(GeoDistance.Value); }
        if (Flags[9]) { writer.Write(RequestChatTitle); }
        if (Flags[9]) { writer.Write(RequestChatDate.Value); }
        if (Flags[13]) { writer.Write(BusinessBotId.Value); }
        if (Flags[13]) { writer.Write(BusinessBotManageUrl); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { ReportSpam = true; }
        if (Flags[1]) { AddContact = true; }
        if (Flags[2]) { BlockContact = true; }
        if (Flags[3]) { ShareContact = true; }
        if (Flags[4]) { NeedContactsException = true; }
        if (Flags[5]) { ReportGeo = true; }
        if (Flags[7]) { Autoarchived = true; }
        if (Flags[8]) { InviteMembers = true; }
        if (Flags[10]) { RequestChatBroadcast = true; }
        if (Flags[11]) { BusinessBotPaused = true; }
        if (Flags[12]) { BusinessBotCanReply = true; }
        if (Flags[6]) { GeoDistance = reader.ReadInt32(); }
        if (Flags[9]) { RequestChatTitle = reader.ReadString(); }
        if (Flags[9]) { RequestChatDate = reader.ReadInt32(); }
        if (Flags[13]) { BusinessBotId = reader.ReadInt64(); }
        if (Flags[13]) { BusinessBotManageUrl = reader.ReadString(); }
    }
}