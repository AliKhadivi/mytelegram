// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Message replies and <a href="https://corefork.telegram.org/api/threads">thread</a> information
/// See <a href="https://corefork.telegram.org/constructor/messageReplyHeader" />
///</summary>
[TlObject(0xafbc09db)]
public sealed class TMessageReplyHeader : IMessageReplyHeader
{
    public uint ConstructorId => 0xafbc09db;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// This is a reply to a scheduled message.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReplyToScheduled { get; set; }

    ///<summary>
    /// Whether this message was sent in a <a href="https://corefork.telegram.org/api/forum#forum-topics">forum topic</a> (except for the General topic).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ForumTopic { get; set; }
    public bool Quote { get; set; }

    ///<summary>
    /// ID of message to which this message is replying
    ///</summary>
    public int? ReplyToMsgId { get; set; }

    ///<summary>
    /// For replies sent in <a href="https://corefork.telegram.org/api/threads">channel discussion threads</a> of which the current user is not a member, the discussion group ID
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? ReplyToPeerId { get; set; }
    public MyTelegram.Schema.IMessageFwdHeader? ReplyFrom { get; set; }
    public MyTelegram.Schema.IMessageMedia? ReplyMedia { get; set; }

    ///<summary>
    /// ID of the message that started this <a href="https://corefork.telegram.org/api/threads">message thread</a>
    ///</summary>
    public int? ReplyToTopId { get; set; }
    public string? QuoteText { get; set; }
    public TVector<MyTelegram.Schema.IMessageEntity>? QuoteEntities { get; set; }
    public int? QuoteOffset { get; set; }

    public void ComputeFlag()
    {
        if (ReplyToScheduled) { Flags[2] = true; }
        if (ForumTopic) { Flags[3] = true; }
        if (Quote) { Flags[9] = true; }
        if (/*ReplyToMsgId != 0 && */ReplyToMsgId.HasValue) { Flags[4] = true; }
        if (ReplyToPeerId != null) { Flags[0] = true; }
        if (ReplyFrom != null) { Flags[5] = true; }
        if (ReplyMedia != null) { Flags[8] = true; }
        if (/*ReplyToTopId != 0 && */ReplyToTopId.HasValue) { Flags[1] = true; }
        if (QuoteText != null) { Flags[6] = true; }
        if (QuoteEntities?.Count > 0) { Flags[7] = true; }
        if (/*QuoteOffset != 0 && */QuoteOffset.HasValue) { Flags[10] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[4]) { writer.Write(ReplyToMsgId.Value); }
        if (Flags[0]) { writer.Write(ReplyToPeerId); }
        if (Flags[5]) { writer.Write(ReplyFrom); }
        if (Flags[8]) { writer.Write(ReplyMedia); }
        if (Flags[1]) { writer.Write(ReplyToTopId.Value); }
        if (Flags[6]) { writer.Write(QuoteText); }
        if (Flags[7]) { writer.Write(QuoteEntities); }
        if (Flags[10]) { writer.Write(QuoteOffset.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[2]) { ReplyToScheduled = true; }
        if (Flags[3]) { ForumTopic = true; }
        if (Flags[9]) { Quote = true; }
        if (Flags[4]) { ReplyToMsgId = reader.ReadInt32(); }
        if (Flags[0]) { ReplyToPeerId = reader.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags[5]) { ReplyFrom = reader.Read<MyTelegram.Schema.IMessageFwdHeader>(); }
        if (Flags[8]) { ReplyMedia = reader.Read<MyTelegram.Schema.IMessageMedia>(); }
        if (Flags[1]) { ReplyToTopId = reader.ReadInt32(); }
        if (Flags[6]) { QuoteText = reader.ReadString(); }
        if (Flags[7]) { QuoteEntities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        if (Flags[10]) { QuoteOffset = reader.ReadInt32(); }
    }
}