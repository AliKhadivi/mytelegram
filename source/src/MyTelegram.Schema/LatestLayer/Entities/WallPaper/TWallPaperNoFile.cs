// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/wallpapers">wallpaper</a> only based on colors/gradients.
/// See <a href="https://corefork.telegram.org/constructor/wallPaperNoFile" />
///</summary>
[TlObject(0xe0804116)]
public sealed class TWallPaperNoFile : IWallPaper
{
    public uint ConstructorId => 0xe0804116;
    ///<summary>
    /// Wallpaper ID
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether this is the default wallpaper
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Default { get; set; }

    ///<summary>
    /// Whether this wallpaper should be used in dark mode.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Dark { get; set; }

    ///<summary>
    /// Info on how to generate the wallpaper.
    /// See <a href="https://corefork.telegram.org/type/WallPaperSettings" />
    ///</summary>
    public MyTelegram.Schema.IWallPaperSettings? Settings { get; set; }

    public void ComputeFlag()
    {
        if (Default) { Flags[1] = true; }
        if (Dark) { Flags[4] = true; }
        if (Settings != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Id);
        writer.Write(Flags);
        if (Flags[2]) { writer.Write(Settings); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Id = reader.ReadInt64();
        Flags = reader.ReadBitArray();
        if (Flags[1]) { Default = true; }
        if (Flags[4]) { Dark = true; }
        if (Flags[2]) { Settings = reader.Read<MyTelegram.Schema.IWallPaperSettings>(); }
    }
}