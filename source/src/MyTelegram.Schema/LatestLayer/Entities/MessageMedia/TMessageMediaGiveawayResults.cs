// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/messageMediaGiveawayResults" />
///</summary>
[TlObject(0xc6991068)]
public sealed class TMessageMediaGiveawayResults : IMessageMedia
{
    public uint ConstructorId => 0xc6991068;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool OnlyNewSubscribers { get; set; }
    public bool Refunded { get; set; }
    public long ChannelId { get; set; }
    public int? AdditionalPeersCount { get; set; }
    public int LaunchMsgId { get; set; }
    public int WinnersCount { get; set; }
    public int UnclaimedCount { get; set; }
    public TVector<long> Winners { get; set; }
    public int Months { get; set; }
    public string? PrizeDescription { get; set; }
    public int UntilDate { get; set; }

    public void ComputeFlag()
    {
        if (OnlyNewSubscribers) { Flags[0] = true; }
        if (Refunded) { Flags[2] = true; }
        if (/*AdditionalPeersCount != 0 && */AdditionalPeersCount.HasValue) { Flags[3] = true; }
        if (PrizeDescription != null) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ChannelId);
        if (Flags[3]) { writer.Write(AdditionalPeersCount.Value); }
        writer.Write(LaunchMsgId);
        writer.Write(WinnersCount);
        writer.Write(UnclaimedCount);
        writer.Write(Winners);
        writer.Write(Months);
        if (Flags[1]) { writer.Write(PrizeDescription); }
        writer.Write(UntilDate);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { OnlyNewSubscribers = true; }
        if (Flags[2]) { Refunded = true; }
        ChannelId = reader.ReadInt64();
        if (Flags[3]) { AdditionalPeersCount = reader.ReadInt32(); }
        LaunchMsgId = reader.ReadInt32();
        WinnersCount = reader.ReadInt32();
        UnclaimedCount = reader.ReadInt32();
        Winners = reader.Read<TVector<long>>();
        Months = reader.ReadInt32();
        if (Flags[1]) { PrizeDescription = reader.ReadString(); }
        UntilDate = reader.ReadInt32();
    }
}