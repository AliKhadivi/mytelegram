// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A <a href="https://corefork.telegram.org/api/giveaways">giveaway</a> with public winners has finished, this constructor contains info about the winners.
/// See <a href="https://corefork.telegram.org/constructor/messageMediaGiveawayResults" />
///</summary>
[TlObject(0xc6991068)]
public sealed class TMessageMediaGiveawayResults : IMessageMedia
{
    public uint ConstructorId => 0xc6991068;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, only new subscribers starting from the giveaway creation date participated in the giveaway.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool OnlyNewSubscribers { get; set; }

    ///<summary>
    /// If set, the giveaway was canceled and was fully refunded.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Refunded { get; set; }

    ///<summary>
    /// ID of the channel that was automatically <a href="https://corefork.telegram.org/api/boost">boosted</a> by the winners of the giveaway for duration of the Premium subscription.
    ///</summary>
    public long ChannelId { get; set; }

    ///<summary>
    /// Number of other channels that participated in the giveaway.
    ///</summary>
    public int? AdditionalPeersCount { get; set; }

    ///<summary>
    /// Identifier of the message with the giveaway in <code>channel_id</code>.
    ///</summary>
    public int LaunchMsgId { get; set; }

    ///<summary>
    /// Total number of winners in the giveaway.
    ///</summary>
    public int WinnersCount { get; set; }

    ///<summary>
    /// Number of not-yet-claimed prizes.
    ///</summary>
    public int UnclaimedCount { get; set; }

    ///<summary>
    /// Up to 100 user identifiers of the winners of the giveaway.
    ///</summary>
    public TVector<long> Winners { get; set; }

    ///<summary>
    /// Duration in months of each <a href="https://corefork.telegram.org/api/premium">Telegram Premium</a> subscription in the giveaway.
    ///</summary>
    public int Months { get; set; }

    ///<summary>
    /// Can contain a textual description of additional giveaway prizes.
    ///</summary>
    public string? PrizeDescription { get; set; }

    ///<summary>
    /// Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in initial parameters of the giveaway.
    ///</summary>
    public int UntilDate { get; set; }

    public void ComputeFlag()
    {
        if (OnlyNewSubscribers) { Flags[0] = true; }
        if (Refunded) { Flags[2] = true; }
        if (/*AdditionalPeersCount != 0 && */AdditionalPeersCount.HasValue) { Flags[3] = true; }
        if (PrizeDescription != null) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ChannelId);
        if (Flags[3]) { writer.Write(AdditionalPeersCount.Value); }
        writer.Write(LaunchMsgId);
        writer.Write(WinnersCount);
        writer.Write(UnclaimedCount);
        writer.Write(Winners);
        writer.Write(Months);
        if (Flags[1]) { writer.Write(PrizeDescription); }
        writer.Write(UntilDate);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { OnlyNewSubscribers = true; }
        if (Flags[2]) { Refunded = true; }
        ChannelId = reader.ReadInt64();
        if (Flags[3]) { AdditionalPeersCount = reader.ReadInt32(); }
        LaunchMsgId = reader.ReadInt32();
        WinnersCount = reader.ReadInt32();
        UnclaimedCount = reader.ReadInt32();
        Winners = reader.Read<TVector<long>>();
        Months = reader.ReadInt32();
        if (Flags[1]) { PrizeDescription = reader.ReadString(); }
        UntilDate = reader.ReadInt32();
    }
}