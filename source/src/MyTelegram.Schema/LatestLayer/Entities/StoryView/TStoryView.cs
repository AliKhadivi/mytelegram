// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// <a href="https://corefork.telegram.org/api/stories">Story</a> view date and reaction information
/// See <a href="https://corefork.telegram.org/constructor/storyView" />
///</summary>
[TlObject(0xb0bdeac5)]
public sealed class TStoryView : IStoryView
{
    public uint ConstructorId => 0xb0bdeac5;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether we have <a href="https://corefork.telegram.org/api/block">completely blocked</a> this user, including from viewing more of our stories.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Blocked { get; set; }

    ///<summary>
    /// Whether we have <a href="https://corefork.telegram.org/api/block">blocked</a> this user from viewing more of our stories.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BlockedMyStoriesFrom { get; set; }

    ///<summary>
    /// The user that viewed the story
    ///</summary>
    public long UserId { get; set; }

    ///<summary>
    /// When did the user view the story
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// If present, contains the reaction that the user left on the story
    /// See <a href="https://corefork.telegram.org/type/Reaction" />
    ///</summary>
    public MyTelegram.Schema.IReaction? Reaction { get; set; }

    public void ComputeFlag()
    {
        if (Blocked) { Flags[0] = true; }
        if (BlockedMyStoriesFrom) { Flags[1] = true; }
        if (Reaction != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(UserId);
        writer.Write(Date);
        if (Flags[2]) { writer.Write(Reaction); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Blocked = true; }
        if (Flags[1]) { BlockedMyStoriesFrom = true; }
        UserId = reader.ReadInt64();
        Date = reader.ReadInt32();
        if (Flags[2]) { Reaction = reader.Read<MyTelegram.Schema.IReaction>(); }
    }
}