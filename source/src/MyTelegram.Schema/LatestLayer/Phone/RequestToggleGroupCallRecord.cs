// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Phone;

///<summary>
/// Start or stop recording a group call: the recorded audio and video streams will be automatically sent to <code>Saved messages</code> (the chat with ourselves).
/// <para>Possible errors</para>
/// Code Type Description
/// 403 GROUPCALL_FORBIDDEN The group call has already ended.
/// 400 GROUPCALL_INVALID The specified group call is invalid.
/// 400 GROUPCALL_NOT_MODIFIED Group call settings weren't modified.
/// See <a href="https://corefork.telegram.org/method/phone.toggleGroupCallRecord" />
///</summary>
[TlObject(0xf128c708)]
public sealed class RequestToggleGroupCallRecord : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0xf128c708;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether to start or stop recording
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Start { get; set; }

    ///<summary>
    /// Whether to also record video streams
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Video { get; set; }

    ///<summary>
    /// The group call or livestream
    /// See <a href="https://corefork.telegram.org/type/InputGroupCall" />
    ///</summary>
    public MyTelegram.Schema.IInputGroupCall Call { get; set; }

    ///<summary>
    /// Recording title
    ///</summary>
    public string? Title { get; set; }

    ///<summary>
    /// If video stream recording is enabled, whether to record in portrait or landscape mode
    /// See <a href="https://corefork.telegram.org/type/Bool" />
    ///</summary>
    public bool? VideoPortrait { get; set; }

    public void ComputeFlag()
    {
        if (Start) { Flags[0] = true; }
        if (Video) { Flags[2] = true; }
        if (Title != null) { Flags[1] = true; }
        if (VideoPortrait !=null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Call);
        if (Flags[1]) { writer.Write(Title); }
        if (Flags[2]) { writer.Write(VideoPortrait.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Start = true; }
        if (Flags[2]) { Video = true; }
        Call = reader.Read<MyTelegram.Schema.IInputGroupCall>();
        if (Flags[1]) { Title = reader.ReadString(); }
        if (Flags[2]) { VideoPortrait = reader.Read(); }
    }
}
