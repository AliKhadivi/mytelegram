// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Phone;

///<summary>
/// Change group call settings
/// <para>Possible errors</para>
/// Code Type Description
/// 400 GROUPCALL_INVALID The specified group call is invalid.
/// 400 GROUPCALL_NOT_MODIFIED Group call settings weren't modified.
/// See <a href="https://corefork.telegram.org/method/phone.toggleGroupCallSettings" />
///</summary>
[TlObject(0x74bbb43d)]
public sealed class RequestToggleGroupCallSettings : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0x74bbb43d;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Invalidate existing invite links
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ResetInviteHash { get; set; }

    ///<summary>
    /// Group call
    /// See <a href="https://corefork.telegram.org/type/InputGroupCall" />
    ///</summary>
    public MyTelegram.Schema.IInputGroupCall Call { get; set; }

    ///<summary>
    /// Whether all users will that join this group call are muted by default upon joining the group call
    /// See <a href="https://corefork.telegram.org/type/Bool" />
    ///</summary>
    public bool? JoinMuted { get; set; }

    public void ComputeFlag()
    {
        if (ResetInviteHash) { Flags[1] = true; }
        if (JoinMuted !=null) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Call);
        if (Flags[0]) { writer.Write(JoinMuted.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[1]) { ResetInviteHash = true; }
        Call = reader.Read<MyTelegram.Schema.IInputGroupCall>();
        if (Flags[0]) { JoinMuted = reader.Read(); }
    }
}
