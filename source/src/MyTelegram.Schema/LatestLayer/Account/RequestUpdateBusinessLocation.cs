// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// <a href="https://corefork.telegram.org/api/business#location">Businesses »</a> may advertise their location using this method, see <a href="https://corefork.telegram.org/api/business#location">here »</a> for more info.To remove business location information invoke the method without setting any of the parameters.
/// See <a href="https://corefork.telegram.org/method/account.updateBusinessLocation" />
///</summary>
[TlObject(0x9e6b131a)]
public sealed class RequestUpdateBusinessLocation : IRequest<IBool>
{
    public uint ConstructorId => 0x9e6b131a;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Optional, contains a set of geographical coordinates.
    /// See <a href="https://corefork.telegram.org/type/InputGeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IInputGeoPoint? GeoPoint { get; set; }

    ///<summary>
    /// Mandatory when setting/updating the location, contains a textual description of the address (max 96 UTF-8 chars).
    ///</summary>
    public string? Address { get; set; }

    public void ComputeFlag()
    {
        if (GeoPoint != null) { Flags[1] = true; }
        if (Address != null) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[1]) { writer.Write(GeoPoint); }
        if (Flags[0]) { writer.Write(Address); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[1]) { GeoPoint = reader.Read<MyTelegram.Schema.IInputGeoPoint>(); }
        if (Flags[0]) { Address = reader.ReadString(); }
    }
}
