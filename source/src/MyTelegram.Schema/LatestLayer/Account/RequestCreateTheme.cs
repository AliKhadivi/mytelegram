// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// Create a theme
/// <para>Possible errors</para>
/// Code Type Description
/// 400 THEME_MIME_INVALID The theme's MIME type is invalid.
/// 400 THEME_TITLE_INVALID The specified theme title is invalid.
/// See <a href="https://corefork.telegram.org/method/account.createTheme" />
///</summary>
[TlObject(0x652e4400)]
public sealed class RequestCreateTheme : IRequest<MyTelegram.Schema.ITheme>
{
    public uint ConstructorId => 0x652e4400;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Unique theme ID used to generate <a href="https://corefork.telegram.org/api/links#theme-links">theme deep links</a>, can be empty to autogenerate a random ID.
    ///</summary>
    public string Slug { get; set; }

    ///<summary>
    /// Theme name
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Theme file
    /// See <a href="https://corefork.telegram.org/type/InputDocument" />
    ///</summary>
    public MyTelegram.Schema.IInputDocument? Document { get; set; }

    ///<summary>
    /// Theme settings, multiple values can be provided for the different base themes (day/night mode, etc).
    ///</summary>
    public TVector<MyTelegram.Schema.IInputThemeSettings>? Settings { get; set; }

    public void ComputeFlag()
    {
        if (Document != null) { Flags[2] = true; }
        if (Settings?.Count > 0) { Flags[3] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Slug);
        writer.Write(Title);
        if (Flags[2]) { writer.Write(Document); }
        if (Flags[3]) { writer.Write(Settings); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Slug = reader.ReadString();
        Title = reader.ReadString();
        if (Flags[2]) { Document = reader.Read<MyTelegram.Schema.IInputDocument>(); }
        if (Flags[3]) { Settings = reader.Read<TVector<MyTelegram.Schema.IInputThemeSettings>>(); }
    }
}
