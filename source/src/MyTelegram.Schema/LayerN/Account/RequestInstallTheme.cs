// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account.LayerN;

///<summary>
/// Install a theme
/// See <a href="https://corefork.telegram.org/method/account.installTheme" />
///</summary>
[TlObject(0x7ae43737)]
public sealed class RequestInstallTheme : IRequest<IBool>
{
    public uint ConstructorId => 0x7ae43737;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether to install the dark version
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Dark { get; set; }

    ///<summary>
    /// Theme format, a string that identifies the theming engines supported by the client
    ///</summary>
    public string? Format { get; set; }

    ///<summary>
    /// Theme to install
    /// See <a href="https://corefork.telegram.org/type/InputTheme" />
    ///</summary>
    public MyTelegram.Schema.IInputTheme? Theme { get; set; }


    //account.installTheme#7ae43737 flags:# dark:flags.0?true format:flags.1?string theme:flags.1?InputTheme = Bool;

    public void ComputeFlag()
    {
        if (Dark) { Flags[0] = true; }
        if (Format != null) { Flags[1] = true; }
        if (Theme != null) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[1]) { writer.Write(Format); }
        if (Flags[1]) { writer.Write(Theme); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Dark = true; }
        if (Flags[1]) { Format = reader.ReadString(); }
        if (Flags[1]) { Theme = reader.Read<MyTelegram.Schema.IInputTheme>(); }
    }
}