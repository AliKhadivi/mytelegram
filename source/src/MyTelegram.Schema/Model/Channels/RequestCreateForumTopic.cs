// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Channels;

///<summary>
///See <a href="https://core.telegram.org/method/channels.createForumTopic" />
///</summary>
[TlObject(0xf40c0224)]
public sealed class RequestCreateForumTopic : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0xf40c0224;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputChannel" />
    ///</summary>
    public MyTelegram.Schema.IInputChannel Channel { get; set; }
    public string Title { get; set; }
    public int? IconColor { get; set; }
    public long? IconEmojiId { get; set; }
    public long RandomId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer? SendAs { get; set; }

    public void ComputeFlag()
    {
        if (IconColor != 0 && IconColor.HasValue) { Flags[0] = true; }
        if (IconEmojiId != 0 && IconEmojiId.HasValue) { Flags[3] = true; }
        if (SendAs != null) { Flags[2] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Channel.Serialize(bw);
        bw.Serialize(Title);
        if (Flags[0]) { bw.Write(IconColor.Value); }
        if (Flags[3]) { bw.Write(IconEmojiId.Value); }
        bw.Write(RandomId);
        if (Flags[2]) { SendAs.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Channel = br.Deserialize<MyTelegram.Schema.IInputChannel>();
        Title = br.Deserialize<string>();
        if (Flags[0]) { IconColor = br.ReadInt32(); }
        if (Flags[3]) { IconEmojiId = br.ReadInt64(); }
        RandomId = br.ReadInt64();
        if (Flags[2]) { SendAs = br.Deserialize<MyTelegram.Schema.IInputPeer>(); }
    }
}
