// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/forumTopic" />
///</summary>
[TlObject(0x71701da9)]
public class TForumTopic : IForumTopic
{
    public uint ConstructorId => 0x71701da9;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool My { get; set; }
    public bool Closed { get; set; }
    public bool Pinned { get; set; }
    public int Id { get; set; }
    public int Date { get; set; }
    public string Title { get; set; }
    public int IconColor { get; set; }
    public long? IconEmojiId { get; set; }
    public int TopMessage { get; set; }
    public int ReadInboxMaxId { get; set; }
    public int ReadOutboxMaxId { get; set; }
    public int UnreadCount { get; set; }
    public int UnreadMentionsCount { get; set; }
    public int UnreadReactionsCount { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer FromId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/PeerNotifySettings" />
    ///</summary>
    public MyTelegram.Schema.IPeerNotifySettings NotifySettings { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/DraftMessage" />
    ///</summary>
    public MyTelegram.Schema.IDraftMessage? Draft { get; set; }

    public void ComputeFlag()
    {
        if (My) { Flags[1] = true; }
        if (Closed) { Flags[2] = true; }
        if (Pinned) { Flags[3] = true; }
        if (IconEmojiId != 0 && IconEmojiId.HasValue) { Flags[0] = true; }
        if (Draft != null) { Flags[4] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        bw.Write(Date);
        bw.Serialize(Title);
        bw.Write(IconColor);
        if (Flags[0]) { bw.Write(IconEmojiId.Value); }
        bw.Write(TopMessage);
        bw.Write(ReadInboxMaxId);
        bw.Write(ReadOutboxMaxId);
        bw.Write(UnreadCount);
        bw.Write(UnreadMentionsCount);
        bw.Write(UnreadReactionsCount);
        FromId.Serialize(bw);
        NotifySettings.Serialize(bw);
        if (Flags[4]) { Draft.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[1]) { My = true; }
        if (Flags[2]) { Closed = true; }
        if (Flags[3]) { Pinned = true; }
        Id = br.ReadInt32();
        Date = br.ReadInt32();
        Title = br.Deserialize<string>();
        IconColor = br.ReadInt32();
        if (Flags[0]) { IconEmojiId = br.ReadInt64(); }
        TopMessage = br.ReadInt32();
        ReadInboxMaxId = br.ReadInt32();
        ReadOutboxMaxId = br.ReadInt32();
        UnreadCount = br.ReadInt32();
        UnreadMentionsCount = br.ReadInt32();
        UnreadReactionsCount = br.ReadInt32();
        FromId = br.Deserialize<MyTelegram.Schema.IPeer>();
        NotifySettings = br.Deserialize<MyTelegram.Schema.IPeerNotifySettings>();
        if (Flags[4]) { Draft = br.Deserialize<MyTelegram.Schema.IDraftMessage>(); }
    }
}