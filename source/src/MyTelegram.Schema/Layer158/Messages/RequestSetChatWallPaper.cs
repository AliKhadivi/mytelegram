// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.setChatWallPaper" />
///</summary>
[TlObject(0x8ffacae1)]
public sealed class RequestSetChatWallPaper : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0x8ffacae1;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputWallPaper" />
    ///</summary>
    public MyTelegram.Schema.IInputWallPaper? Wallpaper { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/WallPaperSettings" />
    ///</summary>
    public MyTelegram.Schema.IWallPaperSettings? Settings { get; set; }
    public int? Id { get; set; }

    public void ComputeFlag()
    {
        if (Wallpaper != null) { Flags[0] = true; }
        if (Settings != null) { Flags[2] = true; }
        if (Id != 0 && Id.HasValue) { Flags[1] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Peer.Serialize(bw);
        if (Flags[0]) { Wallpaper.Serialize(bw); }
        if (Flags[2]) { Settings.Serialize(bw); }
        if (Flags[1]) { bw.Write(Id.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        if (Flags[0]) { Wallpaper = br.Deserialize<MyTelegram.Schema.IInputWallPaper>(); }
        if (Flags[2]) { Settings = br.Deserialize<MyTelegram.Schema.IWallPaperSettings>(); }
        if (Flags[1]) { Id = br.ReadInt32(); }
    }
}
