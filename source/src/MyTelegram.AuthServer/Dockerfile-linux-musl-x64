#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/runtime:6.0-alpine AS base
WORKDIR /app

FROM mcr.microsoft.com/dotnet/sdk:6.0-alpine AS build
WORKDIR /src
COPY ["src/MyTelegram.AuthServer/nuget.config", "src/MyTelegram.AuthServer/"]
COPY ["src/MyTelegram.Core/MyTelegram.Core.csproj", "src/MyTelegram.Core/"]
COPY ["src/MyTelegram.Domain.Shared/MyTelegram.Domain.Shared.csproj", "src/MyTelegram.Domain.Shared/"]
COPY ["src/MyTelegram.Domain/MyTelegram.Domain.csproj", "src/MyTelegram.Domain/"]
COPY ["src/EventFlow/EventFlow.csproj", "src/EventFlow/"]
COPY ["src/MyTelegram.AuthServer/MyTelegram.AuthServer.csproj", "src/MyTelegram.AuthServer/"]
COPY ["src/MyTelegram.Handlers/MyTelegram.Handlers.csproj", "src/MyTelegram.Handlers/"]
COPY ["src/MyTelegram.Schema/MyTelegram.Schema.csproj", "src/MyTelegram.Schema/"]
COPY ["src/MyTelegram.Caching.Microsoft/MyTelegram.Caching.Microsoft.csproj", "src/MyTelegram.Caching.Microsoft/"]

RUN dotnet restore --runtime linux-x64 "src/MyTelegram.AuthServer/MyTelegram.AuthServer.csproj"

#RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories 
#RUN apk add clang libexecinfo binutils libc-dev build-base zlib-static
RUN sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list
RUN apt-get update && apt-get install -y clang zlib1g-dev libkrb5-dev
COPY . .
WORKDIR "/src/src/MyTelegram.AuthServer"
RUN dotnet build "MyTelegram.AuthServer.csproj" -r linux-x64 -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "MyTelegram.AuthServer.csproj" -r linux-x64 -c Release -o /app/publish
RUN strip /app/publish/MyTelegram.AuthServer

FROM base AS final
#FROM alpine AS runtime
WORKDIR /app
#RUN apk add libssl
#RUN ln -s /lib/libssl.so.1.1 /lib/libssl.so.1.0.0
COPY --from=publish /app/publish .
#RUN ls /app
#COPY --from=build /app/build/appsettings.json .
ENTRYPOINT ["/app/MyTelegram.AuthServer"]